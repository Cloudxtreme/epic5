!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A005	include/server.h	/^typedef array A005;$/;"	t
A005_item	include/server.h	/^} A005_item;$/;"	t	typeref:struct:__anon7
ACCEPT	source/dcc.c	891;"	d	file:
ACTION_LIST	include/hook.h	/^	ACTION_LIST = FIRST_NAMED_HOOK,$/;"	e	enum:HOOK_TYPES
ADDBIND	source/keys.c	293;"	d	file:
ADDBIND	source/keys.c	349;"	d	file:
ADDINC128	source/sha2.c	174;"	d	file:
ADDRESS_FUNCTION	source/alloca.c	36;"	d	file:
ADDRESS_FUNCTION	source/alloca.c	38;"	d	file:
ADD_TO_INPUT	source/input.c	213;"	d	file:
AES256CRYPT	include/sedcrypt.h	19;"	d
AESSHA256CRYPT	include/sedcrypt.h	20;"	d
AF_UNSPEC	include/gailib.h	196;"	d
AI	include/irc_std.h	/^typedef struct addrinfo		AI;$/;"	t	typeref:struct:addrinfo
AI_ADDRCONFIG	include/gailib.h	54;"	d
AI_ADDRCONFIG	include/gailib.h	95;"	d
AI_ADDRCONFIG	include/irc_std.h	65;"	d
AI_ALL	include/gailib.h	52;"	d
AI_ALL	include/gailib.h	93;"	d
AI_CANONNAME	include/gailib.h	50;"	d
AI_CANONNAME	include/gailib.h	89;"	d
AI_DEFAULT	include/gailib.h	56;"	d
AI_DEFAULT	include/gailib.h	98;"	d
AI_MASK	include/gailib.h	100;"	d
AI_MASK	include/gailib.h	53;"	d
AI_NUMERICHOST	include/gailib.h	51;"	d
AI_NUMERICHOST	include/gailib.h	90;"	d
AI_PASSIVE	include/gailib.h	49;"	d
AI_PASSIVE	include/gailib.h	88;"	d
AI_V4MAPPED	include/gailib.h	55;"	d
AI_V4MAPPED	include/gailib.h	96;"	d
AI_V4MAPPED_CFG	include/gailib.h	94;"	d
ALIAS_CACHE_SIZE	source/alias.c	137;"	d	file:
ALIGN_SIZE	source/alloca.c	102;"	d	file:
ALLOC_DEBUG	include/config.h	496;"	d
ALLOC_MAGIC	source/ircaux.c	90;"	d	file:
ALLOC_MAGIC_FAILED	source/ircaux.c	97;"	d	file:
ALLOW_USER_SPECIFIED_LOGIN	include/config.h	76;"	d
ALL_OFF	include/irc.h	54;"	d
ALL_OFF_STR	include/irc.h	55;"	d
ALREADY_FREED	source/ircaux.c	98;"	d	file:
ALT_TOG	include/irc.h	58;"	d
ALT_TOG_STR	include/irc.h	59;"	d
AND	source/expr2.c	/^	AND,$/;"	e	enum:LEX	file:
ANDEQ	source/expr2.c	/^			MODEQ,		ANDEQ,		XOREQ,		OREQ,$/;"	e	enum:LEX	file:
ANONYMOUS_COMPILE	include/config.h	236;"	d
ANSIFLAGS	Makefile	/^ANSIFLAGS =$/;"	m
ANY	source/gailib.c	40;"	d	file:
ANY	source/gailib.c	504;"	d	file:
ANYCRYPT	include/sedcrypt.h	13;"	d
ARC4	source/compat.c	/^typedef struct bsd_arc4_stream 	ARC4;$/;"	t	typeref:struct:bsd_arc4_stream	file:
ARG	source/compat.c	73;"	d	file:
ARG_TYPES	include/alias.h	/^enum ARG_TYPES {$/;"	g
ARRAY_ITEM	include/alist.h	111;"	d
ARRAY_THRESHOLD	source/array.c	208;"	d	file:
ASYNC_DNS	source/network.c	43;"	d	file:
AUTO_UNARY	source/expr2.c	1271;"	d	file:
AWAY_ALL	source/commands.c	87;"	d	file:
AWAY_ONE	source/commands.c	86;"	d	file:
ArgList	include/alias.h	/^typedef struct ArgListT ArgList;$/;"	t	typeref:struct:ArgListT
ArgListT	include/alias.h	/^struct ArgListT {$/;"	s
Attribute	source/screen.c	/^typedef struct attributes Attribute;$/;"	t	typeref:struct:attributes	file:
B64_xform	source/ircaux.c	/^int	NONE_xform, URL_xform, ENC_xform, B64_xform, FISH64_xform;$/;"	v
BAND	test.c	/^	BAND,$/;"	e	enum:token	file:
BBINOP	test.c	/^	BBINOP,$/;"	e	enum:token_types	file:
BIG_BUFFER_SIZE	include/irc.h	66;"	d
BIG_ENDIAN	source/sha2.c	108;"	d	file:
BIG_ENDIAN	source/sha2.c	94;"	d	file:
BINARY_BOOLEAN	source/expr2.c	1069;"	d	file:
BINARY_FLOAT	source/expr2.c	1044;"	d	file:
BINARY_FLOAT_NOZERO	source/expr2.c	1081;"	d	file:
BINARY_INTEGER	source/expr2.c	1056;"	d	file:
BINARY_INTEGER_NOZERO	source/expr2.c	1104;"	d	file:
BIND	source/keys.c	1247;"	d	file:
BIND	source/keys.c	1334;"	d	file:
BINOP	test.c	/^	BINOP,$/;"	e	enum:token_types	file:
BIT_BIT	include/levels.h	79;"	d
BIT_IDX	include/levels.h	77;"	d
BIT_MAXBIT	include/levels.h	76;"	d
BIT_VALID	include/levels.h	80;"	d
BIT_WORD	include/levels.h	78;"	d
BIT_WORDS	include/levels.h	75;"	d
BLINK_TOG	include/irc.h	52;"	d
BLINK_TOG_STR	include/irc.h	53;"	d
BLOWFISHCRYPT	include/sedcrypt.h	18;"	d
BOLD_TOG	include/irc.h	50;"	d
BOLD_TOG_STR	include/irc.h	51;"	d
BOOL	source/expr2.c	317;"	d	file:
BOOL_VAR	include/vars.h	211;"	d
BOR	test.c	/^	BOR,$/;"	e	enum:token	file:
BUCKET_FUNCTION	source/alias.c	1704;"	d	file:
BUILT_IN_COMMAND	include/irc_std.h	251;"	d
BUILT_IN_COMMAND	source/alias.c	/^BUILT_IN_COMMAND(aliascmd)$/;"	f
BUILT_IN_COMMAND	source/alias.c	/^BUILT_IN_COMMAND(assigncmd)$/;"	f
BUILT_IN_COMMAND	source/alias.c	/^BUILT_IN_COMMAND(dumpcmd)$/;"	f
BUILT_IN_COMMAND	source/alias.c	/^BUILT_IN_COMMAND(localcmd)$/;"	f
BUILT_IN_COMMAND	source/alias.c	/^BUILT_IN_COMMAND(stubcmd)$/;"	f
BUILT_IN_COMMAND	source/alias.c	/^BUILT_IN_COMMAND(unloadcmd)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(abortcmd)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(allocdumpcmd)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(away)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(beepcmd)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(blesscmd)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(botmodecmd)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(breakcmd)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(cd)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(commentcmd)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(continuecmd)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(ctcp)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(defercmd)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(deop)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(describe)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(e_call)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(e_channel)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(e_clear)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(e_hostname)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(e_nick)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(e_pause)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(e_privmsg)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(e_quit)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(e_topic)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(e_wallop)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(echocmd)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(evalcmd)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(flush)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(funny_stuff)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(hookcmd)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(info)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(inputcmd)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(license)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(load)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(mecmd)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(oper)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(packagecmd)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(pingcmd)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(pop_cmd)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(pretend_cmd)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(push_cmd)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(query)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(quotecmd)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(redirect)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(returncmd)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(send_2comm)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(send_channel_com)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(send_comm)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(send_invite)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(send_kick)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(send_to_channel_first)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(send_to_query_first)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(sendlinecmd)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(setenvcmd)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(shift_cmd)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(sleepcmd)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(squitcmd)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(stackcmd)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(subpackagecmd)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(typecmd)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(unshift_cmd)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(usleepcmd)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(version)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(waitcmd)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(whois)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(xechocmd)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(xevalcmd)$/;"	f
BUILT_IN_COMMAND	source/commands.c	/^BUILT_IN_COMMAND(xtypecmd)$/;"	f
BUILT_IN_COMMAND	source/crypt.c	/^BUILT_IN_COMMAND(encrypt_cmd)$/;"	f
BUILT_IN_COMMAND	source/dcc.c	/^BUILT_IN_COMMAND(dcc_cmd)$/;"	f
BUILT_IN_COMMAND	source/debug.c	/^BUILT_IN_COMMAND(xdebugcmd)$/;"	f
BUILT_IN_COMMAND	source/debuglog.c	/^BUILT_IN_COMMAND(debuglogcmd)$/;"	f
BUILT_IN_COMMAND	source/exec.c	/^BUILT_IN_COMMAND(execcmd)$/;"	f
BUILT_IN_COMMAND	source/hook.c	/^BUILT_IN_COMMAND(oncmd)$/;"	f
BUILT_IN_COMMAND	source/hook.c	/^BUILT_IN_COMMAND(shookcmd)$/;"	f
BUILT_IN_COMMAND	source/if.c	/^BUILT_IN_COMMAND(docmd)$/;"	f
BUILT_IN_COMMAND	source/if.c	/^BUILT_IN_COMMAND(fe)$/;"	f
BUILT_IN_COMMAND	source/if.c	/^BUILT_IN_COMMAND(forcmd)$/;"	f
BUILT_IN_COMMAND	source/if.c	/^BUILT_IN_COMMAND(foreach)$/;"	f
BUILT_IN_COMMAND	source/if.c	/^BUILT_IN_COMMAND(ifcmd)$/;"	f
BUILT_IN_COMMAND	source/if.c	/^BUILT_IN_COMMAND(repeatcmd)$/;"	f
BUILT_IN_COMMAND	source/if.c	/^BUILT_IN_COMMAND(switchcmd)$/;"	f
BUILT_IN_COMMAND	source/if.c	/^BUILT_IN_COMMAND(whilecmd)$/;"	f
BUILT_IN_COMMAND	source/if.c	/^static BUILT_IN_COMMAND(loopcmd)$/;"	f	file:
BUILT_IN_COMMAND	source/ignore.c	/^BUILT_IN_COMMAND(ignore)$/;"	f
BUILT_IN_COMMAND	source/keys.c	/^BUILT_IN_COMMAND(bindcmd) $/;"	f
BUILT_IN_COMMAND	source/keys.c	/^BUILT_IN_COMMAND(parsekeycmd) $/;"	f
BUILT_IN_COMMAND	source/keys.c	/^BUILT_IN_COMMAND(rbindcmd) $/;"	f
BUILT_IN_COMMAND	source/lastlog.c	/^BUILT_IN_COMMAND(lastlog)$/;"	f
BUILT_IN_COMMAND	source/logfiles.c	/^BUILT_IN_COMMAND(logcmd)$/;"	f
BUILT_IN_COMMAND	source/notify.c	/^BUILT_IN_COMMAND(notify)$/;"	f
BUILT_IN_COMMAND	source/output.c	/^BUILT_IN_COMMAND(extern_write)$/;"	f
BUILT_IN_COMMAND	source/perl.c	/^BUILT_IN_COMMAND(perlcmd)$/;"	f
BUILT_IN_COMMAND	source/queue.c	/^BUILT_IN_COMMAND(queuecmd)$/;"	f
BUILT_IN_COMMAND	source/recode.c	/^BUILT_IN_COMMAND(encoding)$/;"	f
BUILT_IN_COMMAND	source/ruby.c	/^BUILT_IN_COMMAND(rubycmd)$/;"	f
BUILT_IN_COMMAND	source/server.c	/^BUILT_IN_COMMAND(disconnectcmd)$/;"	f
BUILT_IN_COMMAND	source/server.c	/^BUILT_IN_COMMAND(reconnectcmd)$/;"	f
BUILT_IN_COMMAND	source/server.c	/^BUILT_IN_COMMAND(servercmd)$/;"	f
BUILT_IN_COMMAND	source/tcl.c	/^BUILT_IN_COMMAND(tclcmd)$/;"	f
BUILT_IN_COMMAND	source/timer.c	/^BUILT_IN_COMMAND(timercmd)$/;"	f
BUILT_IN_COMMAND	source/vars.c	/^BUILT_IN_COMMAND(setcmd)$/;"	f
BUILT_IN_COMMAND	source/who.c	/^BUILT_IN_COMMAND(isoncmd)$/;"	f
BUILT_IN_COMMAND	source/who.c	/^BUILT_IN_COMMAND(userhostcmd)$/;"	f
BUILT_IN_COMMAND	source/who.c	/^BUILT_IN_COMMAND(useripcmd)$/;"	f
BUILT_IN_COMMAND	source/who.c	/^BUILT_IN_COMMAND(usripcmd)$/;"	f
BUILT_IN_COMMAND	source/who.c	/^BUILT_IN_COMMAND(whocmd)$/;"	f
BUILT_IN_COMMAND	source/window.c	/^BUILT_IN_COMMAND(windowcmd)$/;"	f
BUILT_IN_FUNCTION	include/functions.h	67;"	d
BUILT_IN_FUNCTION	include/functions.h	69;"	d
BUILT_IN_FUNCTION	source/array.c	/^BUILT_IN_FUNCTION(function_delarray, input)$/;"	f
BUILT_IN_FUNCTION	source/array.c	/^BUILT_IN_FUNCTION(function_delitems, input)$/;"	f
BUILT_IN_FUNCTION	source/array.c	/^BUILT_IN_FUNCTION(function_getarrays, input)$/;"	f
BUILT_IN_FUNCTION	source/array.c	/^BUILT_IN_FUNCTION(function_ifindfirst, input)$/;"	f
BUILT_IN_FUNCTION	source/array.c	/^BUILT_IN_FUNCTION(function_listarray, input)$/;"	f
BUILT_IN_FUNCTION	source/array.c	/^BUILT_IN_FUNCTION(function_numarrays, input)$/;"	f
BUILT_IN_FUNCTION	source/array.c	/^BUILT_IN_FUNCTION(function_numitems, input)$/;"	f
BUILT_IN_FUNCTION	source/array.c	204;"	d	file:
BUILT_IN_FUNCTION	source/array.c	205;"	d	file:
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_after, word)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_afterw, word)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_aliasctl, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_ascii, word)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_asciiq, word)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_before, word)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_beforew, word)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_bindctl, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_builtin, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_center, word)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_cexist, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_channel, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_channellimit, word)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_channelmode, word)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_channels, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_channelsyncing, word)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_check_code, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_chmod, words)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_chngw, word)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_chop, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_chops, word)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_chr, word)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_chrq, word)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_cipher, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_close, words)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_common, word)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_connect, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_convert, words)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_count, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_crypt, words)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_curcmd, unused) {$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_curpos, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_currchans, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_dbmctl, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_dccctl, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_deuhc, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_diff, word)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_encryptparm, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_eof, words)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_epic, words)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_error, words)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_exec, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_fexist, words)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_filter, word) {$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_findw, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_findws, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_fix_arglist, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_fix_width, word)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_fnexist, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_fromw, word)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_fsize, words)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_ftime, words)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_ftruncate, words)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_functioncall, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_geom, words)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_getcap, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_getenv, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_getgid, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_getlogin, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_getopt, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_getpgrp, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_getserial, input) {$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_getset, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_getuid, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_glob, word)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_globi, word)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_hash_32bit, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_help_topics, word)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_hookctl, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_idle, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_ignorectl, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_index, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_indextoword, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_info, words)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_insert, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_insertw, word)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_iptolong, word)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_iptoname, words)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_irclib, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_is8bit, input) {$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_isalpha, words)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_isaway, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_ischannel, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_ischanop, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_ischanvoice, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_isconnected, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_iscurchan, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_isdigit, words)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_isdisplaying, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_isencrypted, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_isfilevalid, words)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_ishalfop, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_isnumber, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_isutf8, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_joinstr, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_jot, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_key, word)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_killpid, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_left, word)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_leftpc, word)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_leftw, word)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_levelctl, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_levelwindow, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_listen, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_loadinfo, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_logctl, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_longtoip, word)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_mask, args)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_match, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_maxlen, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_metric_time, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_mid, word)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_midw, word)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_mkdir, words)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_mktime, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_msar, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_nametoip, words)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_nochops, word)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_nohighlight, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_notify, words)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_notifywindows, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_notw, word)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_numlines, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_numonchannel, word)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_numsort, words)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_numwords, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_onchannel, word)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_open, words)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_outputinfo, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_pad, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_pass, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_pattern, word) {$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_perl, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_perlcall, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_perlxcall, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_pid, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_ppid, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_prefix, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_printlen, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_querywin, args)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_qword, word)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_rand, word)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_randread, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_read, words)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_realpath, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_regcomp, input)  { RETURN_EMPTY; }$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_regcomp, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_regcomp_cs, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_regerror, input) { RETURN_STR("no regex support"); }$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_regerror, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_regexec, input)  { RETURN_EMPTY; }$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_regexec, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_regfree, input)  { RETURN_EMPTY; }$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_regfree, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_regmatches, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_remw, word)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_remws, word)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_rename, words)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_repeat, words)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_rest, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_restw, word)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_reverse, words)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_revw, words)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_rewind, words)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_rfilter, word) {$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_right, word)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_rightw, word)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_rindex, word)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_rmatch, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_rmdir, words)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_rpattern, word) {$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_rsubstr, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_ruby, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_sar, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_seek, words)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_server_version, word)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_serverctl, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_servers, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_serverwin, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_servports, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_skip, words)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_sort, words)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_splice, word)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_split, word)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_splitw, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_srand, word)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_ssl, words)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_startupfile, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_stat, words)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_status, word)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_stime, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_strftime, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_strip, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_stripansi, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_stripansicodes, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_stripcrap, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_strlen, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_strptime, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_strtol, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_substr, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_symbolctl, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_tcl, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_tdiff, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_tdiff2, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_tell, words)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_time, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_timerctl, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_tobase, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_tolower, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_toupper, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_tow, word)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_translate, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_truncate, words)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_ttyname, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_twiddle, words)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_uhc, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_umask, words)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_umode, words)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_uname, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_unicode, word)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_uniq, word)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_unlink, words)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_unsplit, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_userhost, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_utime, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_which, word)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_winchan, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_windowctl, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_word, word)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_wordtoindex, input)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_write, words)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_writeb, words)$/;"	f
BUILT_IN_FUNCTION	source/functions.c	/^BUILT_IN_FUNCTION(function_xform, input)$/;"	f
BUILT_IN_FUNCTION	source/lastlog.c	/^BUILT_IN_FUNCTION(function_lastlog, word)$/;"	f
BUILT_IN_FUNCTION	source/lastlog.c	/^BUILT_IN_FUNCTION(function_line, word)$/;"	f
BUILT_IN_FUNCTION	source/status.c	/^BUILT_IN_FUNCTION(function_status_oneoff, input)$/;"	f
BUILT_IN_KEYBINDING	include/irc_std.h	254;"	d
BUILT_IN_KEYBINDING	source/clock.c	/^BUILT_IN_KEYBINDING(cpu_saver_on)$/;"	f
BUILT_IN_KEYBINDING	source/input.c	/^BUILT_IN_KEYBINDING(backward_character)$/;"	f
BUILT_IN_KEYBINDING	source/input.c	/^BUILT_IN_KEYBINDING(debug_input_line)$/;"	f
BUILT_IN_KEYBINDING	source/input.c	/^BUILT_IN_KEYBINDING(forward_character)$/;"	f
BUILT_IN_KEYBINDING	source/input.c	/^BUILT_IN_KEYBINDING(highlight_off)$/;"	f
BUILT_IN_KEYBINDING	source/input.c	/^BUILT_IN_KEYBINDING(input_add_character)$/;"	f
BUILT_IN_KEYBINDING	source/input.c	/^BUILT_IN_KEYBINDING(input_backspace)$/;"	f
BUILT_IN_KEYBINDING	source/input.c	/^BUILT_IN_KEYBINDING(input_backward_word)$/;"	f
BUILT_IN_KEYBINDING	source/input.c	/^BUILT_IN_KEYBINDING(input_beginning_of_line)$/;"	f
BUILT_IN_KEYBINDING	source/input.c	/^BUILT_IN_KEYBINDING(input_clear_line)$/;"	f
BUILT_IN_KEYBINDING	source/input.c	/^BUILT_IN_KEYBINDING(input_clear_to_bol)$/;"	f
BUILT_IN_KEYBINDING	source/input.c	/^BUILT_IN_KEYBINDING(input_clear_to_eol)$/;"	f
BUILT_IN_KEYBINDING	source/input.c	/^BUILT_IN_KEYBINDING(input_delete_character)$/;"	f
BUILT_IN_KEYBINDING	source/input.c	/^BUILT_IN_KEYBINDING(input_delete_next_word)$/;"	f
BUILT_IN_KEYBINDING	source/input.c	/^BUILT_IN_KEYBINDING(input_delete_previous_word)$/;"	f
BUILT_IN_KEYBINDING	source/input.c	/^BUILT_IN_KEYBINDING(input_delete_to_previous_space)$/;"	f
BUILT_IN_KEYBINDING	source/input.c	/^BUILT_IN_KEYBINDING(input_end_of_line)$/;"	f
BUILT_IN_KEYBINDING	source/input.c	/^BUILT_IN_KEYBINDING(input_forward_word)$/;"	f
BUILT_IN_KEYBINDING	source/input.c	/^BUILT_IN_KEYBINDING(input_reset_line)$/;"	f
BUILT_IN_KEYBINDING	source/input.c	/^BUILT_IN_KEYBINDING(input_unclear_screen)$/;"	f
BUILT_IN_KEYBINDING	source/input.c	/^BUILT_IN_KEYBINDING(input_yank_cut_buffer)$/;"	f
BUILT_IN_KEYBINDING	source/input.c	/^BUILT_IN_KEYBINDING(insert_altcharset)$/;"	f
BUILT_IN_KEYBINDING	source/input.c	/^BUILT_IN_KEYBINDING(insert_blink)$/;"	f
BUILT_IN_KEYBINDING	source/input.c	/^BUILT_IN_KEYBINDING(insert_bold)$/;"	f
BUILT_IN_KEYBINDING	source/input.c	/^BUILT_IN_KEYBINDING(insert_italic)$/;"	f
BUILT_IN_KEYBINDING	source/input.c	/^BUILT_IN_KEYBINDING(insert_reverse)$/;"	f
BUILT_IN_KEYBINDING	source/input.c	/^BUILT_IN_KEYBINDING(insert_underline)$/;"	f
BUILT_IN_KEYBINDING	source/input.c	/^BUILT_IN_KEYBINDING(my_clear_screen)$/;"	f
BUILT_IN_KEYBINDING	source/input.c	/^BUILT_IN_KEYBINDING(parse_text)$/;"	f
BUILT_IN_KEYBINDING	source/input.c	/^BUILT_IN_KEYBINDING(quote_char)$/;"	f
BUILT_IN_KEYBINDING	source/input.c	/^BUILT_IN_KEYBINDING(refresh_inputline)$/;"	f
BUILT_IN_KEYBINDING	source/input.c	/^BUILT_IN_KEYBINDING(send_line)$/;"	f
BUILT_IN_KEYBINDING	source/input.c	/^BUILT_IN_KEYBINDING(toggle_insert_mode)$/;"	f
BUILT_IN_KEYBINDING	source/input.c	/^BUILT_IN_KEYBINDING(type_text)$/;"	f
BUILT_IN_KEYBINDING	source/irc.c	/^BUILT_IN_KEYBINDING(irc_quit)$/;"	f
BUILT_IN_KEYBINDING	source/names.c	/^BUILT_IN_KEYBINDING(switch_channels)$/;"	f
BUILT_IN_KEYBINDING	source/output.c	/^BUILT_IN_KEYBINDING(refresh_screen)$/;"	f
BUILT_IN_KEYBINDING	source/term.c	/^BUILT_IN_KEYBINDING(term_pause)$/;"	f
BUILT_IN_KEYBINDING	source/window.c	/^BUILT_IN_KEYBINDING(next_window)$/;"	f
BUILT_IN_KEYBINDING	source/window.c	/^BUILT_IN_KEYBINDING(previous_window)$/;"	f
BUILT_IN_KEYBINDING	source/window.c	/^BUILT_IN_KEYBINDING(scrollback_backwards)$/;"	f
BUILT_IN_KEYBINDING	source/window.c	/^BUILT_IN_KEYBINDING(scrollback_end)$/;"	f
BUILT_IN_KEYBINDING	source/window.c	/^BUILT_IN_KEYBINDING(scrollback_forwards)$/;"	f
BUILT_IN_KEYBINDING	source/window.c	/^BUILT_IN_KEYBINDING(scrollback_start)$/;"	f
BUILT_IN_KEYBINDING	source/window.c	/^BUILT_IN_KEYBINDING(swap_last_window)$/;"	f
BUILT_IN_KEYBINDING	source/window.c	/^BUILT_IN_KEYBINDING(swap_next_window)$/;"	f
BUILT_IN_KEYBINDING	source/window.c	/^BUILT_IN_KEYBINDING(swap_previous_window)$/;"	f
BUILT_IN_KEYBINDING	source/window.c	/^BUILT_IN_KEYBINDING(switch_query)$/;"	f
BUILT_IN_KEYBINDING	source/window.c	/^BUILT_IN_KEYBINDING(toggle_stop_screen)$/;"	f
BUILT_IN_KEYBINDING	source/window.c	/^BUILT_IN_KEYBINDING(unstop_all_windows)$/;"	f
BUNOP	test.c	/^	BUNOP,$/;"	e	enum:token_types	file:
BYTESIZ	source/sdbm.c	53;"	d	file:
BYTE_ORDER	source/sha2.c	104;"	d	file:
BYTE_ORDER	source/sha2.c	110;"	d	file:
BYTE_ORDER	source/sha2.c	95;"	d	file:
BindFunction	source/keys.c	/^typedef void (*BindFunction) (unsigned int, unsigned char *);$/;"	t	file:
BindStack	source/keys.c	/^struct BindStack {$/;"	s	file:
BindStack	source/keys.c	/^typedef struct BindStack BindStack;$/;"	t	typeref:struct:BindStack	file:
Binding	source/keys.c	/^struct Binding $/;"	s	file:
Binding	source/keys.c	/^typedef struct Binding Binding;$/;"	t	typeref:struct:Binding	file:
BooL	source/expr2.c	/^typedef 	int		BooL;$/;"	t	file:
BreakArgs	source/parse.c	/^static void 	BreakArgs (char *Input, const char **Sender, const char **OutPut)$/;"	f	file:
Bucket	include/ircaux.h	/^struct Bucket {$/;"	s
Bucket	include/ircaux.h	/^typedef struct Bucket Bucket;$/;"	t	typeref:struct:Bucket
BucketItem	include/ircaux.h	/^struct BucketItem {$/;"	s
BucketItem	include/ircaux.h	/^typedef struct BucketItem BucketItem;$/;"	t	typeref:struct:BucketItem
BuiltInFunctions	source/functions.c	/^}	BuiltInFunctions;$/;"	t	typeref:struct:__anon17	file:
BuiltIns	source/functions.c	/^}	BuiltIns;$/;"	t	typeref:struct:__anon16	file:
CAP_TYPE_BOOL	source/term.c	158;"	d	file:
CAP_TYPE_INT	source/term.c	159;"	d	file:
CAP_TYPE_STR	source/term.c	160;"	d	file:
CAST5CRYPT	include/sedcrypt.h	17;"	d
CC	Makefile	/^CC = clang$/;"	m
CC	source/Makefile	/^CC	= clang$/;"	m
CFLAGS	Makefile	/^CFLAGS = -I\/usr\/local\/include\/ -g -O -Wno-pointer-sign -fno-strict-aliasing$/;"	m
CFLAGS	source/Makefile	/^CFLAGS	= -I\/usr\/local\/include\/ -g -O -Wno-pointer-sign -fno-strict-aliasing$/;"	m
CHANNEL	source/newio.c	142;"	d	file:
CHANNEL	source/newio.c	145;"	d	file:
CHANNEL_LOST_LIST	include/hook.h	/^	CHANNEL_LOST_LIST,$/;"	e	enum:HOOK_TYPES
CHANNEL_NICK_LIST	include/hook.h	/^	CHANNEL_NICK_LIST,$/;"	e	enum:HOOK_TYPES
CHANNEL_SIGNOFF_LIST	include/hook.h	/^	CHANNEL_SIGNOFF_LIST,$/;"	e	enum:HOOK_TYPES
CHANNEL_SYNC_LIST	include/hook.h	/^	CHANNEL_SYNC_LIST,$/;"	e	enum:HOOK_TYPES
CHAR	source/glob.c	123;"	d	file:
CHAR_VAR	include/vars.h	210;"	d
CHECK	source/status.c	1037;"	d	file:
CHECKVAL	source/dcc.c	895;"	d	file:
CHECK_CRYPTO_LIST	source/crypt.c	252;"	d	file:
CHECK_EXTENDED_SUPPORT	source/words.c	48;"	d	file:
CHECK_NICK_AND_TYPE	source/crypt.c	241;"	d	file:
CHECK_NOEVAL	source/expr2.c	1034;"	d	file:
CHECK_SERVER	include/server.h	167;"	d
CHECK_SERVER_RET	include/server.h	173;"	d
CHECK_ZONES	include/input.h	68;"	d
CLEANUP_IMPLIED	source/expr.c	196;"	d	file:
COLON	source/expr2.c	/^	QUEST,		COLON,$/;"	e	enum:LEX	file:
COMMA	source/expr2.c	/^	COMMA,$/;"	e	enum:LEX	file:
COMMA	source/glob.c	110;"	d	file:
COMMAND_ALIAS	include/alias.h	16;"	d
COMP	source/expr2.c	/^	NOT, 		COMP, 		PREMINUS,	PREPLUS,$/;"	e	enum:LEX	file:
COMPARE	source/expr2.c	1306;"	d	file:
CONNECT_LIST	include/hook.h	/^	CONNECT_LIST,$/;"	e	enum:HOOK_TYPES
COPATFUNC	source/functions.c	2217;"	d	file:
COPATFUNC	source/functions.c	2252;"	d	file:
CP	Makefile	/^CP = cp$/;"	m
CRAY_STACK	source/alloca.c	179;"	d	file:
CRYPTO_HELPER_FUNCTIONS	source/crypto.c	599;"	d	file:
CRYPT_BUFFER_SIZE	source/crypt.c	43;"	d	file:
CSRV	source/newio.c	156;"	d	file:
CTCP_ACTION	include/ctcp.h	15;"	d
CTCP_AES256	include/ctcp.h	19;"	d
CTCP_AESSHA256	include/ctcp.h	18;"	d
CTCP_BLOWFISH	include/ctcp.h	21;"	d
CTCP_CAST5	include/ctcp.h	20;"	d
CTCP_CLIENTINFO	include/ctcp.h	28;"	d
CTCP_CUSTOM	include/ctcp.h	33;"	d
CTCP_DCC	include/ctcp.h	16;"	d
CTCP_DELIM_CHAR	include/ctcp.h	36;"	d
CTCP_DELIM_STR	include/ctcp.h	37;"	d
CTCP_ECHO	include/ctcp.h	26;"	d
CTCP_ERRMSG	include/ctcp.h	30;"	d
CTCP_FINGER	include/ctcp.h	31;"	d
CTCP_FISH	include/ctcp.h	22;"	d
CTCP_HANDLER	source/ctcp.c	/^CTCP_HANDLER(do_atmosphere)$/;"	f
CTCP_HANDLER	source/ctcp.c	/^CTCP_HANDLER(do_clientinfo)$/;"	f
CTCP_HANDLER	source/ctcp.c	/^CTCP_HANDLER(do_crypto)$/;"	f
CTCP_HANDLER	source/ctcp.c	/^CTCP_HANDLER(do_dcc)$/;"	f
CTCP_HANDLER	source/ctcp.c	/^CTCP_HANDLER(do_dcc_reply)$/;"	f
CTCP_HANDLER	source/ctcp.c	/^CTCP_HANDLER(do_echo)$/;"	f
CTCP_HANDLER	source/ctcp.c	/^CTCP_HANDLER(do_finger)$/;"	f
CTCP_HANDLER	source/ctcp.c	/^CTCP_HANDLER(do_ping)$/;"	f
CTCP_HANDLER	source/ctcp.c	/^CTCP_HANDLER(do_ping_reply)$/;"	f
CTCP_HANDLER	source/ctcp.c	/^CTCP_HANDLER(do_time)$/;"	f
CTCP_HANDLER	source/ctcp.c	/^CTCP_HANDLER(do_userinfo)$/;"	f
CTCP_HANDLER	source/ctcp.c	/^CTCP_HANDLER(do_utc)$/;"	f
CTCP_HANDLER	source/ctcp.c	/^CTCP_HANDLER(do_version)$/;"	f
CTCP_HANDLER	source/ctcp.c	94;"	d	file:
CTCP_Handler	source/ctcp.c	/^typedef char *(*CTCP_Handler) (struct _CtcpEntry *, const char *, const char *, char *);$/;"	t	file:
CTCP_INLINE	source/ctcp.c	67;"	d	file:
CTCP_LIST	include/hook.h	/^	CTCP_LIST,$/;"	e	enum:HOOK_TYPES
CTCP_MESSAGE	source/dcc.c	3158;"	d	file:
CTCP_NOLIMIT	source/ctcp.c	68;"	d	file:
CTCP_NORECODE	source/ctcp.c	70;"	d	file:
CTCP_NOTICE	include/ctcp.h	13;"	d
CTCP_PING	include/ctcp.h	25;"	d
CTCP_PRIVMSG	include/ctcp.h	12;"	d
CTCP_QUOTE_CHAR	include/ctcp.h	38;"	d
CTCP_QUOTE_EM	include/ctcp.h	40;"	d
CTCP_QUOTE_STR	include/ctcp.h	39;"	d
CTCP_REPLY	source/ctcp.c	66;"	d	file:
CTCP_REPLY	source/dcc.c	3159;"	d	file:
CTCP_REPLY_LIST	include/hook.h	/^	CTCP_REPLY_LIST,$/;"	e	enum:HOOK_TYPES
CTCP_REQUEST_LIST	include/hook.h	/^	CTCP_REQUEST_LIST,$/;"	e	enum:HOOK_TYPES
CTCP_SED	include/ctcp.h	23;"	d
CTCP_SEDSHA	include/ctcp.h	24;"	d
CTCP_SPECIAL	source/ctcp.c	65;"	d	file:
CTCP_TELLUSER	source/ctcp.c	69;"	d	file:
CTCP_TIME	include/ctcp.h	32;"	d
CTCP_USERINFO	include/ctcp.h	29;"	d
CTCP_UTC	include/ctcp.h	27;"	d
CTCP_VERSION	include/ctcp.h	17;"	d
CTCP_xform	source/ircaux.c	/^int	CTCP_xform, SHA256_xform;$/;"	v
CURRENT_WINDOW	source/status.c	967;"	d	file:
CURRENT_WSERV_VERSION	source/screen.c	66;"	d	file:
CURRENT_WSERV_VERSION	source/wserv.c	42;"	d	file:
CURSOR_LEFT	source/input.c	221;"	d	file:
CURSOR_RIGHT	source/input.c	220;"	d	file:
CURSOR_SPOT	source/input.c	181;"	d	file:
CUT_BUFFER	source/input.c	238;"	d	file:
Cdrom_Init	contrib/cdrom.c	/^Cdrom_Init(interp)$/;"	f
Ch	source/sha2.c	200;"	d	file:
Channel	source/names.c	/^}	Channel;$/;"	t	typeref:struct:channel_stru	file:
Char	include/irc_std.h	353;"	d
Char	include/irc_std.h	355;"	d
Char	source/glob.c	/^typedef unsigned short Char;$/;"	t	file:
Char	source/glob.c	119;"	d	file:
Char	source/status.c	59;"	d	file:
Char	source/status.c	61;"	d	file:
ClientList	source/dcc.c	/^static	DCC_list *	ClientList = NULL;$/;"	v	file:
CmdFunc	source/commands.c	/^typedef void (*CmdFunc) (const char *, char *, const char *);$/;"	t	file:
CmdList	source/queue.c	/^} CmdList;$/;"	t	typeref:struct:CmdListT	file:
CmdListT	source/queue.c	/^typedef struct  CmdListT {$/;"	s	file:
Connect	source/network.c	/^static int Connect (int fd, SA *addr)$/;"	f	file:
Crypt	include/sedcrypt.h	/^}	Crypt;$/;"	t	typeref:struct:CryptStru
CryptStru	include/sedcrypt.h	/^typedef struct	CryptStru$/;"	s
CtcpEntry	source/ctcp.c	/^}	CtcpEntry;$/;"	t	typeref:struct:_CtcpEntry	file:
Current_hook	source/hook.c	/^struct Current_hook$/;"	s	file:
DAND	source/expr2.c	/^	DAND,$/;"	e	enum:LEX	file:
DANDEQ	source/expr2.c	/^			SHLEFTEQ,	SHRIGHTEQ,	DANDEQ,		DOREQ,$/;"	e	enum:LEX	file:
DBLKSIZ	source/sdbm.c	20;"	d	file:
DBM_INSERT	include/sdbm.h	18;"	d
DBM_IOERR	source/sdbm.c	46;"	d	file:
DBM_RDONLY	source/sdbm.c	45;"	d	file:
DBM_REPLACE	include/sdbm.h	19;"	d
DBM___	source/files.c	/^struct DBM___ {$/;"	s	file:
DCC_ACTIVE	source/dcc.c	69;"	d	file:
DCC_ACTIVITY_LIST	include/hook.h	/^	DCC_ACTIVITY_LIST,$/;"	e	enum:HOOK_TYPES
DCC_BLOCK_SIZE	source/dcc.c	56;"	d	file:
DCC_CHAT	source/dcc.c	62;"	d	file:
DCC_CHAT_LIST	include/hook.h	/^	DCC_CHAT_LIST,$/;"	e	enum:HOOK_TYPES
DCC_CONNECTING	source/dcc.c	75;"	d	file:
DCC_CONNECT_LIST	include/hook.h	/^	DCC_CONNECT_LIST,$/;"	e	enum:HOOK_TYPES
DCC_DELETE	source/dcc.c	71;"	d	file:
DCC_FILEOFFER	source/dcc.c	63;"	d	file:
DCC_FILEREAD	source/dcc.c	64;"	d	file:
DCC_LIST_LIST	include/hook.h	/^	DCC_LIST_LIST,$/;"	e	enum:HOOK_TYPES
DCC_LOST_LIST	include/hook.h	/^	DCC_LOST_LIST,$/;"	e	enum:HOOK_TYPES
DCC_MY_OFFER	source/dcc.c	68;"	d	file:
DCC_OFFER_LIST	include/hook.h	/^	DCC_OFFER_LIST,$/;"	e	enum:HOOK_TYPES
DCC_QUOTED	source/dcc.c	74;"	d	file:
DCC_RAW	source/dcc.c	65;"	d	file:
DCC_RAW_LIST	include/hook.h	/^	DCC_RAW_LIST,$/;"	e	enum:HOOK_TYPES
DCC_RAW_LISTEN	source/dcc.c	66;"	d	file:
DCC_RCV_BLOCK_SIZE	source/dcc.c	59;"	d	file:
DCC_REJECTED	source/dcc.c	73;"	d	file:
DCC_REQUEST_LIST	include/hook.h	/^	DCC_REQUEST_LIST,$/;"	e	enum:HOOK_TYPES
DCC_STATES	source/dcc.c	76;"	d	file:
DCC_SUBCOMMAND	source/dcc.c	/^DCC_SUBCOMMAND(dcc_chat_subcmd)$/;"	f
DCC_SUBCOMMAND	source/dcc.c	/^DCC_SUBCOMMAND(dcc_close_subcmd)$/;"	f
DCC_SUBCOMMAND	source/dcc.c	/^DCC_SUBCOMMAND(dcc_closeall_subcmd)$/;"	f
DCC_SUBCOMMAND	source/dcc.c	/^DCC_SUBCOMMAND(dcc_get_subcmd)$/;"	f
DCC_SUBCOMMAND	source/dcc.c	137;"	d	file:
DCC_THEIR_OFFER	source/dcc.c	70;"	d	file:
DCC_TWOCLIENTS	source/dcc.c	72;"	d	file:
DCC_TYPES	source/dcc.c	67;"	d	file:
DCC_close_filesend	source/dcc.c	/^static void	DCC_close_filesend (DCC_list *Client, const char *info,$/;"	f	file:
DCC_current_transfer_buffer	source/dcc.c	/^static	char		DCC_current_transfer_buffer[256];$/;"	v	file:
DCC_get_current_transfer	source/dcc.c	/^char *	DCC_get_current_transfer (void)$/;"	f
DCC_list	source/dcc.c	/^}	DCC_list;$/;"	t	typeref:struct:DCC_struct	file:
DCC_struct	source/dcc.c	/^typedef	struct	DCC_struct$/;"	s	file:
DEBUG_1	include/debug.h	14;"	d
DEBUG_18	include/debug.h	31;"	d
DEBUG_19	include/debug.h	32;"	d
DEBUG_21	include/debug.h	34;"	d
DEBUG_8	include/debug.h	21;"	d
DEBUG_BROKEN_CLOCK	include/debug.h	28;"	d
DEBUG_CHANNELS	include/debug.h	29;"	d
DEBUG_COMMANDS	include/vars.h	198;"	d
DEBUG_CRASH	include/debug.h	23;"	d
DEBUG_CTCPS	include/debug.h	15;"	d
DEBUG_DCC_SEARCH	include/debug.h	16;"	d
DEBUG_DCC_XMIT	include/debug.h	19;"	d
DEBUG_DWORD	include/debug.h	43;"	d
DEBUG_EXPANSIONS	include/vars.h	199;"	d
DEBUG_EXTRACTW	include/debug.h	35;"	d
DEBUG_EXTRACTW_DEBUG	include/debug.h	39;"	d
DEBUG_FUNCTIONS	include/vars.h	200;"	d
DEBUG_INBOUND	include/debug.h	18;"	d
DEBUG_LASTLOG	include/debug.h	38;"	d
DEBUG_LOCAL_VARS	include/debug.h	13;"	d
DEBUG_MESSAGE_FROM	include/debug.h	40;"	d
DEBUG_NEW_MATH_DEBUG	include/debug.h	33;"	d
DEBUG_NOTIFY	include/debug.h	25;"	d
DEBUG_NO_COLOR	include/debug.h	24;"	d
DEBUG_OUTBOUND	include/debug.h	17;"	d
DEBUG_RECODE	include/debug.h	44;"	d
DEBUG_REGEX	include/debug.h	26;"	d
DEBUG_REGEX_DEBUG	include/debug.h	27;"	d
DEBUG_SERVER_CONNECT	include/debug.h	22;"	d
DEBUG_SLASH_HACK	include/debug.h	36;"	d
DEBUG_SSL	include/debug.h	37;"	d
DEBUG_UNICODE	include/debug.h	42;"	d
DEBUG_UNKNOWN	include/debug.h	30;"	d
DEBUG_WAITS	include/debug.h	20;"	d
DEBUG_WHO_QUEUE	include/debug.h	41;"	d
DECODE_ERROR	source/ircaux.c	5879;"	d	file:
DEFAULT_ALLOW_C1_CHARS	include/config.h	256;"	d
DEFAULT_ALT_CHARSET	include/config.h	257;"	d
DEFAULT_ALWAYS_SPLIT_BIGGEST	include/config.h	258;"	d
DEFAULT_BANNER	include/config.h	259;"	d
DEFAULT_BANNER_EXPAND	include/config.h	260;"	d
DEFAULT_BEEP	include/config.h	261;"	d
DEFAULT_BEEP_MAX	include/config.h	262;"	d
DEFAULT_BLINK_VIDEO	include/config.h	263;"	d
DEFAULT_BOLD_VIDEO	include/config.h	264;"	d
DEFAULT_CHANNEL_NAME_WIDTH	include/config.h	265;"	d
DEFAULT_CLIENT_INFORMATION	source/vars.c	279;"	d	file:
DEFAULT_CLOCK	include/config.h	266;"	d
DEFAULT_CLOCK_24HOUR	include/config.h	267;"	d
DEFAULT_CLOCK_FORMAT	include/config.h	268;"	d
DEFAULT_CLOCK_INTERVAL	include/config.h	269;"	d
DEFAULT_CMDCHARS	include/config.h	270;"	d
DEFAULT_COLOR	include/config.h	271;"	d
DEFAULT_COMMENT_HACK	include/config.h	272;"	d
DEFAULT_CONTINUED_LINE	include/config.h	273;"	d
DEFAULT_CPU_SAVER_AFTER	include/config.h	274;"	d
DEFAULT_CPU_SAVER_EVERY	include/config.h	275;"	d
DEFAULT_CURRENT_WINDOW_LEVEL	include/config.h	276;"	d
DEFAULT_DCC_AUTO_SEND_REJECTS	include/config.h	277;"	d
DEFAULT_DCC_CONNECT_TIMEOUT	include/config.h	278;"	d
DEFAULT_DCC_DEQUOTE_FILENAMES	include/config.h	279;"	d
DEFAULT_DCC_LONG_PATHNAMES	include/config.h	280;"	d
DEFAULT_DCC_SLIDING_WINDOW	include/config.h	281;"	d
DEFAULT_DCC_STORE_PATH	include/config.h	282;"	d
DEFAULT_DCC_USE_GATEWAY_ADDR	include/config.h	283;"	d
DEFAULT_DEBUG	source/vars.c	298;"	d	file:
DEFAULT_DEFAULT_REALNAME	source/vars.c	300;"	d	file:
DEFAULT_DEFAULT_SCRIPT_ENCODING	include/config.h	284;"	d
DEFAULT_DEFAULT_USERNAME	source/vars.c	302;"	d	file:
DEFAULT_DISPATCH_UNKNOWN_COMMANDS	include/config.h	285;"	d
DEFAULT_DISPLAY	include/config.h	286;"	d
DEFAULT_DISPLAY_ANSI	include/config.h	287;"	d
DEFAULT_DISPLAY_PC_CHARACTERS	include/config.h	288;"	d
DEFAULT_DO_NOTIFY_IMMEDIATELY	include/config.h	289;"	d
DEFAULT_EIGHT_BIT_CHARACTERS	include/config.h	290;"	d
DEFAULT_FLOATING_POINT_MATH	include/config.h	291;"	d
DEFAULT_FLOATING_POINT_PRECISION	include/config.h	292;"	d
DEFAULT_FLOOD_AFTER	include/config.h	293;"	d
DEFAULT_FLOOD_IGNORE	include/config.h	294;"	d
DEFAULT_FLOOD_MASKUSER	include/config.h	295;"	d
DEFAULT_FLOOD_RATE	include/config.h	296;"	d
DEFAULT_FLOOD_RATE_PER	include/config.h	297;"	d
DEFAULT_FLOOD_USERS	include/config.h	298;"	d
DEFAULT_FLOOD_WARNING	include/config.h	299;"	d
DEFAULT_HIDE_PRIVATE_CHANNELS	include/config.h	300;"	d
DEFAULT_HIGHLIGHT_CHAR	include/config.h	301;"	d
DEFAULT_HIGH_BIT_ESCAPE	include/config.h	302;"	d
DEFAULT_HOLD_SLIDER	include/config.h	303;"	d
DEFAULT_INDENT	include/config.h	304;"	d
DEFAULT_INPUT_INDICATOR_LEFT	include/config.h	305;"	d
DEFAULT_INPUT_INDICATOR_RIGHT	include/config.h	306;"	d
DEFAULT_INPUT_PROMPT	include/config.h	307;"	d
DEFAULT_INSERT_MODE	include/config.h	308;"	d
DEFAULT_INVERSE_VIDEO	include/config.h	309;"	d
DEFAULT_IRCPATH	include/config.h	245;"	d
DEFAULT_KEY_INTERVAL	include/config.h	310;"	d
DEFAULT_LASTLOG	include/config.h	311;"	d
DEFAULT_LASTLOG_LEVEL	include/config.h	312;"	d
DEFAULT_LASTLOG_REWRITE	include/config.h	313;"	d
DEFAULT_LOAD_PATH	source/vars.c	327;"	d	file:
DEFAULT_LOG	include/config.h	314;"	d
DEFAULT_LOGFILE	include/config.h	315;"	d
DEFAULT_LOG_REWRITE	source/vars.c	331;"	d	file:
DEFAULT_MAIL	include/config.h	316;"	d
DEFAULT_MAIL_INTERVAL	include/config.h	317;"	d
DEFAULT_MAIL_TYPE	include/config.h	318;"	d
DEFAULT_MANGLE_DISPLAY	source/vars.c	336;"	d	file:
DEFAULT_MANGLE_INBOUND	source/vars.c	338;"	d	file:
DEFAULT_MANGLE_LOGFILES	source/vars.c	340;"	d	file:
DEFAULT_MANGLE_OUTBOUND	source/vars.c	342;"	d	file:
DEFAULT_METRIC_TIME	include/config.h	319;"	d
DEFAULT_MIRC_BROKEN_DCC_RESUME	include/config.h	320;"	d
DEFAULT_MODE_STRIPPER	include/config.h	321;"	d
DEFAULT_ND_SPACE_MAX	include/config.h	322;"	d
DEFAULT_NEW_SERVER_LASTLOG_LEVEL	include/config.h	323;"	d
DEFAULT_NOTIFY	include/config.h	324;"	d
DEFAULT_NOTIFY_INTERVAL	include/config.h	325;"	d
DEFAULT_NOTIFY_LEVEL	include/config.h	326;"	d
DEFAULT_NOTIFY_ON_TERMINATION	include/config.h	327;"	d
DEFAULT_NOTIFY_USERHOST_AUTOMATIC	include/config.h	328;"	d
DEFAULT_NO_CONTROL_LOG	include/config.h	329;"	d
DEFAULT_NO_CTCP_FLOOD	include/config.h	330;"	d
DEFAULT_NO_FAIL_DISCONNECT	include/config.h	331;"	d
DEFAULT_OLD_MATH_PARSER	include/config.h	332;"	d
DEFAULT_OLD_SERVER_LASTLOG_LEVEL	include/config.h	333;"	d
DEFAULT_OUTPUT_REWRITE	source/vars.c	358;"	d	file:
DEFAULT_PAD_CHAR	include/config.h	334;"	d
DEFAULT_QUIT_MESSAGE	include/config.h	335;"	d
DEFAULT_RANDOM_SOURCE	include/config.h	336;"	d
DEFAULT_SCREEN_OPTIONS	include/config.h	337;"	d
DEFAULT_SCROLLBACK	include/config.h	338;"	d
DEFAULT_SCROLLBACK_RATIO	include/config.h	339;"	d
DEFAULT_SCROLL_LINES	include/config.h	340;"	d
DEFAULT_SERVER	include/config.h	44;"	d
DEFAULT_SHELL	include/config.h	341;"	d
DEFAULT_SHELL_FLAGS	include/config.h	342;"	d
DEFAULT_SHELL_LIMIT	include/config.h	343;"	d
DEFAULT_SHOW_CHANNEL_NAMES	include/config.h	344;"	d
DEFAULT_SHOW_NUMERICS	include/config.h	345;"	d
DEFAULT_SHOW_STATUS_ALL	include/config.h	346;"	d
DEFAULT_STATUS_AWAY	include/config.h	347;"	d
DEFAULT_STATUS_CHANNEL	include/config.h	348;"	d
DEFAULT_STATUS_CHANOP	include/config.h	349;"	d
DEFAULT_STATUS_CLOCK	include/config.h	350;"	d
DEFAULT_STATUS_CPU_SAVER	include/config.h	351;"	d
DEFAULT_STATUS_DOES_EXPANDOS	source/vars.c	378;"	d	file:
DEFAULT_STATUS_FORMAT	include/config.h	352;"	d
DEFAULT_STATUS_FORMAT1	include/config.h	353;"	d
DEFAULT_STATUS_FORMAT2	include/config.h	354;"	d
DEFAULT_STATUS_HALFOP	include/config.h	355;"	d
DEFAULT_STATUS_HOLD	include/config.h	356;"	d
DEFAULT_STATUS_HOLDMODE	include/config.h	358;"	d
DEFAULT_STATUS_HOLD_LINES	include/config.h	357;"	d
DEFAULT_STATUS_INSERT	include/config.h	359;"	d
DEFAULT_STATUS_MAIL	include/config.h	360;"	d
DEFAULT_STATUS_MODE	include/config.h	361;"	d
DEFAULT_STATUS_NICKNAME	include/config.h	362;"	d
DEFAULT_STATUS_NOSWAP	include/config.h	363;"	d
DEFAULT_STATUS_NOTIFY	include/config.h	364;"	d
DEFAULT_STATUS_NO_REPEAT	include/config.h	365;"	d
DEFAULT_STATUS_OPER	include/config.h	366;"	d
DEFAULT_STATUS_OVERWRITE	include/config.h	367;"	d
DEFAULT_STATUS_QUERY	include/config.h	368;"	d
DEFAULT_STATUS_SCROLLBACK	include/config.h	369;"	d
DEFAULT_STATUS_SERVER	include/config.h	370;"	d
DEFAULT_STATUS_SSL_OFF	include/config.h	371;"	d
DEFAULT_STATUS_SSL_ON	include/config.h	372;"	d
DEFAULT_STATUS_TRUNCATE_RHS	include/config.h	373;"	d
DEFAULT_STATUS_UMODE	include/config.h	374;"	d
DEFAULT_STATUS_USER	include/config.h	375;"	d
DEFAULT_STATUS_USER1	include/config.h	376;"	d
DEFAULT_STATUS_USER10	include/config.h	385;"	d
DEFAULT_STATUS_USER11	include/config.h	386;"	d
DEFAULT_STATUS_USER12	include/config.h	387;"	d
DEFAULT_STATUS_USER13	include/config.h	388;"	d
DEFAULT_STATUS_USER14	include/config.h	389;"	d
DEFAULT_STATUS_USER15	include/config.h	390;"	d
DEFAULT_STATUS_USER16	include/config.h	391;"	d
DEFAULT_STATUS_USER17	include/config.h	392;"	d
DEFAULT_STATUS_USER18	include/config.h	393;"	d
DEFAULT_STATUS_USER19	include/config.h	394;"	d
DEFAULT_STATUS_USER2	include/config.h	377;"	d
DEFAULT_STATUS_USER20	include/config.h	395;"	d
DEFAULT_STATUS_USER21	include/config.h	396;"	d
DEFAULT_STATUS_USER22	include/config.h	397;"	d
DEFAULT_STATUS_USER23	include/config.h	398;"	d
DEFAULT_STATUS_USER24	include/config.h	399;"	d
DEFAULT_STATUS_USER25	include/config.h	400;"	d
DEFAULT_STATUS_USER26	include/config.h	401;"	d
DEFAULT_STATUS_USER27	include/config.h	402;"	d
DEFAULT_STATUS_USER28	include/config.h	403;"	d
DEFAULT_STATUS_USER29	include/config.h	404;"	d
DEFAULT_STATUS_USER3	include/config.h	378;"	d
DEFAULT_STATUS_USER30	include/config.h	405;"	d
DEFAULT_STATUS_USER31	include/config.h	406;"	d
DEFAULT_STATUS_USER32	include/config.h	407;"	d
DEFAULT_STATUS_USER33	include/config.h	408;"	d
DEFAULT_STATUS_USER34	include/config.h	409;"	d
DEFAULT_STATUS_USER35	include/config.h	410;"	d
DEFAULT_STATUS_USER36	include/config.h	411;"	d
DEFAULT_STATUS_USER37	include/config.h	412;"	d
DEFAULT_STATUS_USER38	include/config.h	413;"	d
DEFAULT_STATUS_USER39	include/config.h	414;"	d
DEFAULT_STATUS_USER4	include/config.h	379;"	d
DEFAULT_STATUS_USER5	include/config.h	380;"	d
DEFAULT_STATUS_USER6	include/config.h	381;"	d
DEFAULT_STATUS_USER7	include/config.h	382;"	d
DEFAULT_STATUS_USER8	include/config.h	383;"	d
DEFAULT_STATUS_USER9	include/config.h	384;"	d
DEFAULT_STATUS_VOICE	include/config.h	415;"	d
DEFAULT_STATUS_WINDOW	include/config.h	416;"	d
DEFAULT_SUPPRESS_FROM_REMOTE_SERVER	include/config.h	417;"	d
DEFAULT_SWITCH_CHANNELS_BETWEEN_WINDOWS	include/config.h	418;"	d
DEFAULT_TAB	include/config.h	419;"	d
DEFAULT_TAB_MAX	include/config.h	420;"	d
DEFAULT_TERM_DOES_BRIGHT_BLINK	include/config.h	421;"	d
DEFAULT_TMUX_OPTIONS	include/config.h	422;"	d
DEFAULT_UNDERLINE_VIDEO	include/config.h	423;"	d
DEFAULT_USER_INFORMATION	include/config.h	424;"	d
DEFAULT_WORD_BREAK	include/config.h	425;"	d
DEFAULT_WSERV_PATH	source/vars.c	450;"	d	file:
DEFAULT_WSERV_TYPE	include/config.h	426;"	d
DEFAULT_XTERM	include/config.h	427;"	d
DEFAULT_XTERM_OPTIONS	include/config.h	428;"	d
DEFS	Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEFS	source/Makefile	/^DEFS	= -DHAVE_CONFIG_H$/;"	m
DEQ	source/expr2.c	/^	DEQ,		NEQ,		LITEQ,		NOTLITEQ,$/;"	e	enum:LEX	file:
DEREF	source/expr2.c	/^			WORDC,		DEREF,		REEXP,$/;"	e	enum:LEX	file:
DGETS	source/dcc.c	936;"	d	file:
DGETS	source/server.c	1423;"	d	file:
DIRFEXT	source/sdbm.c	25;"	d	file:
DIRSIZ_TAKES_NO_ARG	acconfig.h	204;"	d
DISCONNECT_LIST	include/hook.h	/^	DISCONNECT_LIST,$/;"	e	enum:HOOK_TYPES
DISPLAY_ON_WINDOW	source/status.c	984;"	d	file:
DIV	source/expr2.c	/^	MUL,		DIV,		MOD,$/;"	e	enum:LEX	file:
DIVEQ	source/expr2.c	/^	EQ,		PLUSEQ,		MINUSEQ,	MULEQ,		DIVEQ,$/;"	e	enum:LEX	file:
DOLLAR	source/glob.c	94;"	d	file:
DONT_SUPPRESS_DEFAULT	source/hook.c	685;"	d	file:
DONT_USE_TERM_H	acconfig.h	414;"	d
DOR	source/expr2.c	/^	DOR,$/;"	e	enum:LEX	file:
DOREQ	source/expr2.c	/^			SHLEFTEQ,	SHRIGHTEQ,	DANDEQ,		DOREQ,$/;"	e	enum:LEX	file:
DOT	source/glob.c	95;"	d	file:
DOUBLE_QUOTE	source/alias.c	66;"	d	file:
DO_NOT_USE_IPV6	acconfig.h	276;"	d
DUFF	source/sdbm.c	503;"	d	file:
DUFF	source/sdbm.c	658;"	d	file:
DWORD	include/alias.h	/^	DWORD,$/;"	e	enum:ARG_TYPES
DWORD_DWORDS	include/words.h	45;"	d
DWORD_EXTRACTW	include/words.h	44;"	d
DWORD_NO	include/words.h	42;"	d
DWORD_YES	include/words.h	43;"	d
DXOR	source/expr2.c	/^	DXOR,$/;"	e	enum:LEX	file:
DXOREQ	source/expr2.c	/^			DXOREQ,		POWEREQ,	STRCATEQ,    STRPREEQ,$/;"	e	enum:LEX	file:
D_FILE_OFFSET_BITS	source/Makefile	/^		cpp -MM -I..\/include -I\/usr\/include -I\/usr\/include\/ruby-2.1.0 -I\/usr\/include\/ruby-2.1.0\/x86_64-linux\/  -D_REENTRANT -D_GNU_SOURCE -fwrapv -fno-strict-aliasing -pipe -fstack-protector -I\/usr\/local\/include -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64  -I\/usr\/lib\/perl5\/core_perl\/CORE  $(CFLAGS) $$i >> tmp ;	\\$/;"	m
Datum	include/sdbm.h	/^} Datum;$/;"	t	typeref:struct:__anon6
Datum_to_string	source/files.c	/^static char *	Datum_to_string (Datum d)$/;"	f	file:
Dbm	source/files.c	/^typedef struct DBM___ Dbm;$/;"	t	typeref:struct:DBM___	file:
Defer	source/commands.c	/^typedef struct defer Defer;$/;"	t	typeref:struct:defer	file:
Display	include/window.h	/^}	Display;$/;"	t	typeref:struct:DisplayStru
DisplayStru	include/window.h	/^typedef	struct	DisplayStru$/;"	s
DtopEntry	source/files.c	/^static Dbm *	DtopEntry = (Dbm *) 0;$/;"	v	file:
EAI_ADDRFAMILY	include/gailib.h	34;"	d
EAI_ADDRFAMILY	include/gailib.h	70;"	d
EAI_AGAIN	include/gailib.h	35;"	d
EAI_AGAIN	include/gailib.h	71;"	d
EAI_BADFLAGS	include/gailib.h	36;"	d
EAI_BADFLAGS	include/gailib.h	72;"	d
EAI_BADHINTS	include/gailib.h	45;"	d
EAI_BADHINTS	include/gailib.h	81;"	d
EAI_FAIL	include/gailib.h	37;"	d
EAI_FAIL	include/gailib.h	73;"	d
EAI_FAMILY	include/gailib.h	38;"	d
EAI_FAMILY	include/gailib.h	74;"	d
EAI_MAX	include/gailib.h	47;"	d
EAI_MAX	include/gailib.h	83;"	d
EAI_MEMORY	include/gailib.h	39;"	d
EAI_MEMORY	include/gailib.h	75;"	d
EAI_NODATA	include/gailib.h	40;"	d
EAI_NODATA	include/gailib.h	76;"	d
EAI_NONAME	include/gailib.h	41;"	d
EAI_NONAME	include/gailib.h	77;"	d
EAI_PROTOCOL	include/gailib.h	46;"	d
EAI_PROTOCOL	include/gailib.h	82;"	d
EAI_SERVICE	include/gailib.h	42;"	d
EAI_SERVICE	include/gailib.h	78;"	d
EAI_SOCKTYPE	include/gailib.h	43;"	d
EAI_SOCKTYPE	include/gailib.h	79;"	d
EAI_SYSTEM	include/gailib.h	44;"	d
EAI_SYSTEM	include/gailib.h	80;"	d
EMACS_KEYBINDINGS	include/config.h	448;"	d
EMAIL_CONTACT	include/irc.h	17;"	d
EMPTY	include/functions.h	21;"	d
EMPTY_STRING	include/functions.h	22;"	d
ENCODING	source/server.c	/^enum serverinfo_fields { HOST, PORT, PASS, NICK, GROUP, TYPE, PROTO, VHOST, ENCODING, LASTFIELD };$/;"	e	enum:serverinfo_fields	file:
ENCODING_FALLBACK	source/recode.c	194;"	d	file:
ENCODING_FROM_LOCALE	source/recode.c	193;"	d	file:
ENCODING_FROM_USER	source/recode.c	195;"	d	file:
ENCRYPTED_NOTICE_LIST	include/hook.h	/^	ENCRYPTED_NOTICE_LIST,$/;"	e	enum:HOOK_TYPES
ENCRYPTED_PRIVMSG_LIST	include/hook.h	/^	ENCRYPTED_PRIVMSG_LIST,$/;"	e	enum:HOOK_TYPES
ENC_xform	source/ircaux.c	/^int	NONE_xform, URL_xform, ENC_xform, B64_xform, FISH64_xform;$/;"	v
ENI_FAMILY	source/gailib.c	513;"	d	file:
ENI_MEMORY	source/gailib.c	511;"	d	file:
ENI_NOHOSTNAME	source/gailib.c	510;"	d	file:
ENI_NOSERVNAME	source/gailib.c	509;"	d	file:
ENI_NOSOCKET	source/gailib.c	508;"	d	file:
ENI_SALEN	source/gailib.c	514;"	d	file:
ENI_SYSTEM	source/gailib.c	512;"	d	file:
EOI	source/expr2.c	/^	EOI,$/;"	e	enum:LEX	file:
EOI	test.c	/^	EOI,$/;"	e	enum:token	file:
EOS	include/words.h	36;"	d
EOS	source/glob.c	93;"	d	file:
EOS	source/glob.c	96;"	d	file:
EPIC	Makefile	/^EPIC 	  = $(epic5_exe)-$(VERSION)$/;"	m
EPICRC_NAME	include/irc.h	16;"	d
EPIC_LINK	Makefile	/^EPIC_LINK = $(epic5_exe)$/;"	m
EPIC_OLD	Makefile	/^EPIC_OLD  = $(epic5_exe).old$/;"	m
EQ	source/expr2.c	/^	EQ,		PLUSEQ,		MINUSEQ,	MULEQ,		DIVEQ,$/;"	e	enum:LEX	file:
ERR	source/gailib.c	119;"	d	file:
ERROR	source/expr2.c	/^	ERROR,$/;"	e	enum:LEX	file:
ERROR_LIST	include/hook.h	/^	ERROR_LIST,$/;"	e	enum:HOOK_TYPES
EXEC_ERRORS_LIST	include/hook.h	/^	EXEC_ERRORS_LIST,$/;"	e	enum:HOOK_TYPES
EXEC_EXIT_LIST	include/hook.h	/^	EXEC_EXIT_LIST,$/;"	e	enum:HOOK_TYPES
EXEC_LIST	include/hook.h	/^	EXEC_LIST,$/;"	e	enum:HOOK_TYPES
EXEC_PROMPT_LIST	include/hook.h	/^	EXEC_PROMPT_LIST,$/;"	e	enum:HOOK_TYPES
EXIT_LIST	include/hook.h	/^	EXIT_LIST,$/;"	e	enum:HOOK_TYPES
ExecuteTimers	source/timer.c	/^void 	ExecuteTimers (void)$/;"	f
FALSE	include/irc_std.h	220;"	d
FAMILY	include/network.h	40;"	d
FD_SETSIZE	include/irc_std.h	380;"	d
FILBDEV	test.c	/^	FILBDEV,$/;"	e	enum:token	file:
FILCDEV	test.c	/^	FILCDEV,$/;"	e	enum:token	file:
FILDIR	test.c	/^	FILDIR,$/;"	e	enum:token	file:
FILEQ	test.c	/^	FILEQ,$/;"	e	enum:token	file:
FILEX	test.c	/^	FILEX,$/;"	e	enum:token	file:
FILEXIST	test.c	/^	FILEXIST,$/;"	e	enum:token	file:
FILE___	source/files.c	/^struct FILE___ {$/;"	s	file:
FILFIFO	test.c	/^	FILFIFO,$/;"	e	enum:token	file:
FILGID	test.c	/^	FILGID,$/;"	e	enum:token	file:
FILGZ	test.c	/^	FILGZ,$/;"	e	enum:token	file:
FILNT	test.c	/^	FILNT,$/;"	e	enum:token	file:
FILOT	test.c	/^	FILOT,$/;"	e	enum:token	file:
FILRD	test.c	/^	FILRD,$/;"	e	enum:token	file:
FILREG	test.c	/^	FILREG,$/;"	e	enum:token	file:
FILSGID	test.c	/^	FILSGID,$/;"	e	enum:token	file:
FILSOCK	test.c	/^	FILSOCK,$/;"	e	enum:token	file:
FILSTCK	test.c	/^	FILSTCK,$/;"	e	enum:token	file:
FILSUID	test.c	/^	FILSUID,$/;"	e	enum:token	file:
FILSYM	test.c	/^	FILSYM,$/;"	e	enum:token	file:
FILTT	test.c	/^	FILTT,$/;"	e	enum:token	file:
FILUID	test.c	/^	FILUID,$/;"	e	enum:token	file:
FILWR	test.c	/^	FILWR,$/;"	e	enum:token	file:
FINDI	source/array.c	/^FINDI(function_ifinditems, find_items, item, item)$/;"	f
FINDI	source/array.c	698;"	d	file:
FINDI	source/array.c	719;"	d	file:
FINDIT	source/array.c	267;"	d	file:
FINDIT	source/array.c	296;"	d	file:
FIRST_NAMED_HOOK	include/hook.h	12;"	d
FISH64_xform	source/ircaux.c	/^int	NONE_xform, URL_xform, ENC_xform, B64_xform, FISH64_xform;$/;"	v
FISHCRYPT	include/sedcrypt.h	21;"	d
FLOOD_LIST	include/hook.h	/^	FLOOD_LIST,$/;"	e	enum:HOOK_TYPES
FORCE_STATUS	source/window.c	74;"	d	file:
FREED_VAL	source/ircaux.c	89;"	d	file:
FROMSERV	include/server.h	186;"	d
FUNCTION_SETITEM	source/array.c	635;"	d	file:
FUNCTION_SETITEM	source/array.c	659;"	d	file:
FUNNY_NAME	include/server.h	193;"	d
FUNNY_PRIVATE	include/server.h	190;"	d
FUNNY_PUBLIC	include/server.h	189;"	d
FUNNY_TOPIC	include/server.h	191;"	d
FUNNY_USERS	include/server.h	192;"	d
File	source/files.c	/^typedef struct FILE___ File;$/;"	t	typeref:struct:FILE___	file:
Filename	include/irc_std.h	/^typedef char Filename[PATH_MAX + 1];$/;"	t
Flooding	source/flood.c	/^}	Flooding;$/;"	t	typeref:struct:flood_stru	file:
FromUserHost	source/parse.c	/^const char	*FromUserHost = empty_string;$/;"	v
FtopEntry	source/files.c	/^static File *	FtopEntry = (File *) 0;$/;"	v	file:
GC_symbol	source/alias.c	/^static int	GC_symbol (Symbol *item, array *list, int loc)$/;"	f	file:
GECOS_DELIMITER	source/ctcp.c	535;"	d	file:
GENERAL_NOTICE_LIST	include/hook.h	/^	GENERAL_NOTICE_LIST,$/;"	e	enum:HOOK_TYPES
GENERAL_PRIVMSG_LIST	include/hook.h	/^	GENERAL_PRIVMSG_LIST,$/;"	e	enum:HOOK_TYPES
GENERAL_TIMER	include/timer.h	/^	GENERAL_TIMER$/;"	e	enum:__anon9
GEQ	source/expr2.c	/^	LES,		LEQ,		GRE,		GEQ,$/;"	e	enum:LEX	file:
GETADDRINFO_DOES_NOT_DO_AF_UNIX	acconfig.h	273;"	d
GETADDRINFO_DOES_NOT_DO_AF_UNIX	include/defs.h	227;"	d
GETITEM	source/array.c	597;"	d	file:
GETITEM	source/array.c	621;"	d	file:
GETPGRP_VOID	acconfig.h	140;"	d
GETPGRP_VOID	include/defs.h	133;"	d
GETPGRP_VOID	include/defs.h	19;"	d
GETPGRP_VOID	include/irc_std.h	278;"	d
GETPGRP_VOID	include/irc_std.h	464;"	d
GET_AI	source/gailib.c	103;"	d	file:
GET_ARRAY_NAMES_FUNCTION	include/alist.h	127;"	d
GET_BUCKET_NAMES_FUNCTION	include/alist.h	128;"	d
GET_CANONNAME	source/gailib.c	93;"	d	file:
GET_DWORD_ARG	include/functions.h	45;"	d
GET_FLOAT_ARG	include/functions.h	33;"	d
GET_FUNC_ARG	include/functions.h	41;"	d
GET_IATTRIBUTE	source/server.c	/^GET_IATTRIBUTE(operator)$/;"	f
GET_IATTRIBUTE	source/server.c	/^GET_IATTRIBUTE(ssl_enabled)$/;"	f
GET_IATTRIBUTE	source/server.c	/^GET_IATTRIBUTE(status)$/;"	f
GET_IATTRIBUTE	source/server.c	3015;"	d	file:
GET_INT_ARG	include/functions.h	25;"	d
GET_LVAL_RVAL	source/expr2.c	1130;"	d	file:
GET_MATCHES	source/array.c	550;"	d	file:
GET_MATCHES	source/array.c	574;"	d	file:
GET_SATTRIBUTE	source/server.c	3037;"	d	file:
GET_SOME_ARRAY_NAMES_FUNCTION	include/alist.h	116;"	d
GET_UNIFIED_ARRAY_FUNCTION	source/functions.c	/^GET_UNIFIED_ARRAY_FUNCTION(function_getsets, pmatch_builtin_variables)$/;"	f
GET_UNIFIED_ARRAY_FUNCTION	source/functions.c	5866;"	d	file:
GET_UWORD_ARG	include/functions.h	49;"	d
GLOB_ABEND	include/glob.h	81;"	d
GLOB_ALTDIRFUNC	include/glob.h	72;"	d
GLOB_APPEND	include/glob.h	65;"	d
GLOB_BRACE	include/glob.h	73;"	d
GLOB_DOOFFS	include/glob.h	66;"	d
GLOB_ERR	include/glob.h	67;"	d
GLOB_INSENSITIVE	include/glob.h	78;"	d
GLOB_INSENSITIVE	source/functions.c	4166;"	d	file:
GLOB_MAGCHAR	include/glob.h	74;"	d
GLOB_MARK	include/glob.h	68;"	d
GLOB_NOCHECK	include/glob.h	69;"	d
GLOB_NOMAGIC	include/glob.h	75;"	d
GLOB_NOSORT	include/glob.h	70;"	d
GLOB_NOSPACE	include/glob.h	80;"	d
GLOB_QUOTE	include/glob.h	76;"	d
GLOB_TILDE	include/glob.h	77;"	d
GNI_INTEGER	include/network.h	71;"	d
GRE	source/expr2.c	/^	LES,		LEQ,		GRE,		GEQ,$/;"	e	enum:LEX	file:
GROUP	source/server.c	/^enum serverinfo_fields { HOST, PORT, PASS, NICK, GROUP, TYPE, PROTO, VHOST, ENCODING, LASTFIELD };$/;"	e	enum:serverinfo_fields	file:
Getnameinfo	source/network.c	/^static int	Getnameinfo(const SA *sa, socklen_t salen, char *host, size_t hostlen, char *serv, size_t servlen, int flags)$/;"	f	file:
HACKED_DCC_WARNING	include/config.h	449;"	d
HANDLE_TYPE	source/ignore.c	342;"	d	file:
HARD_SECURE	include/config.h	143;"	d
HARD_UNFLASH	include/config.h	450;"	d
HASHC	source/sdbm.c	506;"	d	file:
HASH_INSENSITIVE	include/alist.h	/^	HASH_INSENSITIVE,$/;"	e	enum:__anon2
HASH_SENSITIVE	include/alist.h	/^	HASH_SENSITIVE$/;"	e	enum:__anon2
HAVE_ALLOCA	include/defs.h	25;"	d
HAVE_ALLOCA_H	include/defs.h	28;"	d
HAVE_ARC4RANDOM	acconfig.h	339;"	d
HAVE_ATOLL	acconfig.h	318;"	d
HAVE_ATOQ	acconfig.h	324;"	d
HAVE_BROKEN_REALPATH	acconfig.h	297;"	d
HAVE_BROKEN_REALPATH	include/defs.h	251;"	d
HAVE_CLOCK_GETTIME	acconfig.h	306;"	d
HAVE_CLOCK_GETTIME	include/defs.h	260;"	d
HAVE_DIRENT_H	include/defs.h	374;"	d
HAVE_FCHDIR	acconfig.h	222;"	d
HAVE_FCHDIR	include/defs.h	197;"	d
HAVE_FCNTL_H	acconfig.h	74;"	d
HAVE_FCNTL_H	include/defs.h	377;"	d
HAVE_FINITE	acconfig.h	384;"	d
HAVE_FINITE	include/defs.h	323;"	d
HAVE_FPATHCONF	acconfig.h	10;"	d
HAVE_FPATHCONF	include/defs.h	82;"	d
HAVE_GETADDRINFO	acconfig.h	288;"	d
HAVE_GETADDRINFO	include/defs.h	242;"	d
HAVE_GETHOSTBYNAME2	acconfig.h	267;"	d
HAVE_GETLOGIN	acconfig.h	216;"	d
HAVE_GETLOGIN	include/defs.h	191;"	d
HAVE_GETNAMEINFO	acconfig.h	291;"	d
HAVE_GETNAMEINFO	include/defs.h	245;"	d
HAVE_GETPASS	acconfig.h	13;"	d
HAVE_GETPASS	include/defs.h	85;"	d
HAVE_GETPGID	acconfig.h	16;"	d
HAVE_GETPGID	include/defs.h	88;"	d
HAVE_GETSERVBYPORT	acconfig.h	285;"	d
HAVE_GETSERVBYPORT	include/defs.h	239;"	d
HAVE_GETTIMEOFDAY	acconfig.h	19;"	d
HAVE_GETTIMEOFDAY	include/defs.h	91;"	d
HAVE_GLOB	acconfig.h	22;"	d
HAVE_HSTRERROR	acconfig.h	240;"	d
HAVE_ICONV	acconfig.h	402;"	d
HAVE_ICONV	include/defs.h	338;"	d
HAVE_ICONV_H	acconfig.h	399;"	d
HAVE_IEEEFP_H	acconfig.h	426;"	d
HAVE_INET_ATON	acconfig.h	161;"	d
HAVE_INET_NTOP	acconfig.h	261;"	d
HAVE_INET_PTON	acconfig.h	264;"	d
HAVE_INTMAX_LONG	acconfig.h	345;"	d
HAVE_INTMAX_LONG	include/defs.h	287;"	d
HAVE_INTMAX_LONG_LONG	acconfig.h	351;"	d
HAVE_INTMAX_LONG_LONG	include/defs.h	293;"	d
HAVE_INTMAX_NATIVE	acconfig.h	354;"	d
HAVE_INTMAX_NATIVE	include/defs.h	296;"	d
HAVE_INTMAX_QUADT	acconfig.h	348;"	d
HAVE_INTPTR_T	acconfig.h	312;"	d
HAVE_INTPTR_T	include/defs.h	263;"	d
HAVE_INTTYPES_H	acconfig.h	309;"	d
HAVE_INTTYPES_H	include/defs.h	383;"	d
HAVE_ISFINITE	acconfig.h	387;"	d
HAVE_KILLPG	acconfig.h	25;"	d
HAVE_KILLPG	include/defs.h	94;"	d
HAVE_LIBARCHIVE	acconfig.h	405;"	d
HAVE_LIBARCHIVE	include/defs.h	341;"	d
HAVE_LIB_NLS	acconfig.h	108;"	d
HAVE_LIB_NSL	acconfig.h	111;"	d
HAVE_LIB_PW	acconfig.h	114;"	d
HAVE_LONG_LONG	acconfig.h	315;"	d
HAVE_MATH_H	acconfig.h	390;"	d
HAVE_MATH_H	include/defs.h	386;"	d
HAVE_MEMMOVE	acconfig.h	28;"	d
HAVE_MEMMOVE	include/defs.h	97;"	d
HAVE_MEMORY_H	acconfig.h	77;"	d
HAVE_NANOSLEEP	acconfig.h	396;"	d
HAVE_NANOSLEEP	include/defs.h	332;"	d
HAVE_NDBM_H	include/defs.h	389;"	d
HAVE_NETDB_H	acconfig.h	80;"	d
HAVE_NETDB_H	include/defs.h	395;"	d
HAVE_PERL	acconfig.h	201;"	d
HAVE_PERL	include/defs.h	182;"	d
HAVE_REALPATH	acconfig.h	225;"	d
HAVE_REALPATH	include/defs.h	200;"	d
HAVE_REGEX_H	include/defs.h	398;"	d
HAVE_RUBY	acconfig.h	303;"	d
HAVE_RUBY	include/defs.h	257;"	d
HAVE_SA_LEN	acconfig.h	258;"	d
HAVE_SCANDIR	acconfig.h	31;"	d
HAVE_SETENV	acconfig.h	34;"	d
HAVE_SETENV	include/defs.h	100;"	d
HAVE_SETSID	acconfig.h	207;"	d
HAVE_SETSID	acconfig.h	40;"	d
HAVE_SETSID	include/defs.h	106;"	d
HAVE_SETSID	include/defs.h	185;"	d
HAVE_SNPRINTF	acconfig.h	43;"	d
HAVE_SNPRINTF	include/defs.h	109;"	d
HAVE_SOCKLEN_T	acconfig.h	270;"	d
HAVE_SOCKLEN_T	include/defs.h	224;"	d
HAVE_SO_SNDLOWAT	acconfig.h	252;"	d
HAVE_SSL	acconfig.h	243;"	d
HAVE_SSL	include/defs.h	209;"	d
HAVE_STDARG_H	acconfig.h	83;"	d
HAVE_STDDEF_H	acconfig.h	363;"	d
HAVE_STDDEF_H	include/defs.h	401;"	d
HAVE_STDINT_H	include/defs.h	404;"	d
HAVE_STPCPY	acconfig.h	234;"	d
HAVE_STRERROR	acconfig.h	46;"	d
HAVE_STRERROR	include/defs.h	112;"	d
HAVE_STRING_H	acconfig.h	86;"	d
HAVE_STRLCAT	acconfig.h	231;"	d
HAVE_STRLCPY	acconfig.h	228;"	d
HAVE_STRPTIME	acconfig.h	408;"	d
HAVE_STRPTIME	include/defs.h	344;"	d
HAVE_STRTOIMAX	acconfig.h	357;"	d
HAVE_STRTOIMAX	include/defs.h	299;"	d
HAVE_STRTOLL	acconfig.h	321;"	d
HAVE_STRTOLL	include/defs.h	266;"	d
HAVE_STRTOQ	acconfig.h	360;"	d
HAVE_STRTOUL	acconfig.h	49;"	d
HAVE_STRTOUL	include/defs.h	115;"	d
HAVE_STRUCT_ADDRINFO	acconfig.h	279;"	d
HAVE_STRUCT_ADDRINFO	include/defs.h	233;"	d
HAVE_STRUCT_SOCKADDR_IN6	acconfig.h	282;"	d
HAVE_STRUCT_SOCKADDR_IN6	include/defs.h	236;"	d
HAVE_STRUCT_SOCKADDR_STORAGE	acconfig.h	255;"	d
HAVE_STRUCT_SOCKADDR_STORAGE	include/defs.h	218;"	d
HAVE_SUN_LEN	acconfig.h	131;"	d
HAVE_SYSCONF	acconfig.h	52;"	d
HAVE_SYSCONF	include/defs.h	118;"	d
HAVE_SYSCTLBYNAME	acconfig.h	249;"	d
HAVE_SYS_FCNTL_H	acconfig.h	89;"	d
HAVE_SYS_FCNTL_H	include/defs.h	410;"	d
HAVE_SYS_FILE_H	acconfig.h	92;"	d
HAVE_SYS_FILE_H	include/defs.h	413;"	d
HAVE_SYS_PARAM_H	include/defs.h	422;"	d
HAVE_SYS_SELECT_H	acconfig.h	95;"	d
HAVE_SYS_SELECT_H	include/defs.h	425;"	d
HAVE_SYS_SIGLIST	acconfig.h	66;"	d
HAVE_SYS_SYSCTL_H	include/defs.h	428;"	d
HAVE_SYS_TERMIOS_H	acconfig.h	435;"	d
HAVE_SYS_TERMIOS_H	include/defs.h	434;"	d
HAVE_SYS_TIME_H	acconfig.h	98;"	d
HAVE_SYS_TIME_H	include/defs.h	437;"	d
HAVE_SYS_UN_H	include/defs.h	440;"	d
HAVE_SYS_WAIT_H	acconfig.h	101;"	d
HAVE_TCL	acconfig.h	300;"	d
HAVE_TCL	include/defs.h	254;"	d
HAVE_TCSETPGRP	acconfig.h	417;"	d
HAVE_TCSETPGRP	include/defs.h	353;"	d
HAVE_TERMINFO	acconfig.h	219;"	d
HAVE_TERMINFO	include/defs.h	194;"	d
HAVE_TERMIOS_H	acconfig.h	432;"	d
HAVE_TERMIOS_H	include/defs.h	449;"	d
HAVE_TERM_H	include/defs.h	443;"	d
HAVE_TPARM	acconfig.h	213;"	d
HAVE_TPARM	include/defs.h	188;"	d
HAVE_UNAME	acconfig.h	55;"	d
HAVE_UNAME	include/defs.h	121;"	d
HAVE_UNSETENV	acconfig.h	37;"	d
HAVE_UNSETENV	include/defs.h	103;"	d
HAVE_USEFUL_FIONREAD	acconfig.h	210;"	d
HAVE_VSNPRINTF	acconfig.h	58;"	d
HAVE_VSNPRINTF	include/defs.h	124;"	d
HELP_LIST	include/hook.h	/^	HELP_LIST,$/;"	e	enum:HOOK_TYPES
HF_NORECURSE	source/hook.c	80;"	d	file:
HOOKCTL_ADD	source/hook.c	/^	HOOKCTL_ADD = 1,$/;"	e	enum:__anon19	file:
HOOKCTL_ARGS	source/hook.c	/^	HOOKCTL_ARGS,$/;"	e	enum:__anon19	file:
HOOKCTL_COUNT	source/hook.c	/^	HOOKCTL_COUNT,$/;"	e	enum:__anon19	file:
HOOKCTL_CURRENT_IMPLIED_HOOK	source/hook.c	/^	HOOKCTL_CURRENT_IMPLIED_HOOK,$/;"	e	enum:__anon19	file:
HOOKCTL_DEFAULT_NOISE_LEVEL	source/hook.c	/^	HOOKCTL_DEFAULT_NOISE_LEVEL,$/;"	e	enum:__anon19	file:
HOOKCTL_DENY_ALL_HOOKS	source/hook.c	/^	HOOKCTL_DENY_ALL_HOOKS,$/;"	e	enum:__anon19	file:
HOOKCTL_EMPTY_SLOTS	source/hook.c	/^	HOOKCTL_EMPTY_SLOTS,$/;"	e	enum:__anon19	file:
HOOKCTL_EXECUTING_HOOKS	source/hook.c	/^	HOOKCTL_EXECUTING_HOOKS,$/;"	e	enum:__anon19	file:
HOOKCTL_FIRST_NAMED_HOOK	source/hook.c	/^	HOOKCTL_FIRST_NAMED_HOOK,$/;"	e	enum:__anon19	file:
HOOKCTL_GET	source/hook.c	/^	HOOKCTL_GET,$/;"	e	enum:__anon19	file:
HOOKCTL_GET_HOOK	source/hook.c	/^	HOOKCTL_GET_HOOK,$/;"	e	enum:__anon18	file:
HOOKCTL_GET_HOOK_ARGUMENT_LIST	source/hook.c	/^	HOOKCTL_GET_HOOK_ARGUMENT_LIST = 1,$/;"	e	enum:__anon20	file:
HOOKCTL_GET_HOOK_FLEXIBLE	source/hook.c	/^	HOOKCTL_GET_HOOK_FLEXIBLE,$/;"	e	enum:__anon20	file:
HOOKCTL_GET_HOOK_NICK	source/hook.c	/^	HOOKCTL_GET_HOOK_NICK,$/;"	e	enum:__anon20	file:
HOOKCTL_GET_HOOK_NOARG	source/hook.c	/^	HOOKCTL_GET_HOOK_NOARG,$/;"	e	enum:__anon18	file:
HOOKCTL_GET_HOOK_NOISE	source/hook.c	/^	HOOKCTL_GET_HOOK_NOISE,$/;"	e	enum:__anon20	file:
HOOKCTL_GET_HOOK_NOISY	source/hook.c	/^	HOOKCTL_GET_HOOK_NOISY,$/;"	e	enum:__anon20	file:
HOOKCTL_GET_HOOK_NOT	source/hook.c	/^	HOOKCTL_GET_HOOK_NOT,$/;"	e	enum:__anon20	file:
HOOKCTL_GET_HOOK_PACKAGE	source/hook.c	/^	HOOKCTL_GET_HOOK_PACKAGE,$/;"	e	enum:__anon20	file:
HOOKCTL_GET_HOOK_SERIAL	source/hook.c	/^	HOOKCTL_GET_HOOK_SERIAL,$/;"	e	enum:__anon20	file:
HOOKCTL_GET_HOOK_SKIP	source/hook.c	/^	HOOKCTL_GET_HOOK_SKIP,$/;"	e	enum:__anon20	file:
HOOKCTL_GET_HOOK_STRING	source/hook.c	/^	HOOKCTL_GET_HOOK_STRING$/;"	e	enum:__anon20	file:
HOOKCTL_GET_HOOK_STUFF	source/hook.c	/^	HOOKCTL_GET_HOOK_STUFF,$/;"	e	enum:__anon20	file:
HOOKCTL_GET_HOOK_TYPE	source/hook.c	/^	HOOKCTL_GET_HOOK_TYPE,$/;"	e	enum:__anon20	file:
HOOKCTL_GET_LIST	source/hook.c	/^	HOOKCTL_GET_LIST,$/;"	e	enum:__anon18	file:
HOOKCTL_GET_NOISE	source/hook.c	/^	HOOKCTL_GET_NOISE,$/;"	e	enum:__anon18	file:
HOOKCTL_GET_NOISY	source/hook.c	/^	HOOKCTL_GET_NOISY,$/;"	e	enum:__anon18	file:
HOOKCTL_HALTCHAIN	source/hook.c	/^	HOOKCTL_HALTCHAIN,$/;"	e	enum:__anon19	file:
HOOKCTL_HOOKLIST_SIZE	source/hook.c	/^	HOOKCTL_HOOKLIST_SIZE,$/;"	e	enum:__anon19	file:
HOOKCTL_LAST_CREATED_HOOK	source/hook.c	/^	HOOKCTL_LAST_CREATED_HOOK,$/;"	e	enum:__anon19	file:
HOOKCTL_LIST	source/hook.c	/^	HOOKCTL_LIST,$/;"	e	enum:__anon19	file:
HOOKCTL_LOOKUP	source/hook.c	/^	HOOKCTL_LOOKUP,$/;"	e	enum:__anon19	file:
HOOKCTL_MATCH	source/hook.c	/^	HOOKCTL_MATCH,$/;"	e	enum:__anon19	file:
HOOKCTL_MATCHES	source/hook.c	/^	HOOKCTL_MATCHES,$/;"	e	enum:__anon19	file:
HOOKCTL_NOISE_LEVELS	source/hook.c	/^	HOOKCTL_NOISE_LEVELS,$/;"	e	enum:__anon19	file:
HOOKCTL_NOISE_LEVEL_NUM	source/hook.c	/^	HOOKCTL_NOISE_LEVEL_NUM,$/;"	e	enum:__anon19	file:
HOOKCTL_NUMBER_OF_LISTS	source/hook.c	/^	HOOKCTL_NUMBER_OF_LISTS,$/;"	e	enum:__anon19	file:
HOOKCTL_PACKAGE	source/hook.c	/^	HOOKCTL_PACKAGE,$/;"	e	enum:__anon19	file:
HOOKCTL_POPULATED_LISTS	source/hook.c	/^	HOOKCTL_POPULATED_LISTS,$/;"	e	enum:__anon19	file:
HOOKCTL_REMOVE	source/hook.c	/^	HOOKCTL_REMOVE,$/;"	e	enum:__anon19	file:
HOOKCTL_RETVAL	source/hook.c	/^	HOOKCTL_RETVAL,$/;"	e	enum:__anon19	file:
HOOKCTL_SERIAL	source/hook.c	/^	HOOKCTL_SERIAL,$/;"	e	enum:__anon19	file:
HOOKCTL_SET	source/hook.c	/^	HOOKCTL_SET,$/;"	e	enum:__anon19	file:
HOOKCTL_USERINFO	source/hook.c	/^	HOOKCTL_USERINFO$/;"	e	enum:__anon19	file:
HOOK_LIST	include/hook.h	/^	HOOK_LIST,$/;"	e	enum:HOOK_TYPES
HOOK_TYPES	include/hook.h	/^enum HOOK_TYPES {$/;"	g
HOST	source/server.c	/^enum serverinfo_fields { HOST, PORT, PASS, NICK, GROUP, TYPE, PROTO, VHOST, ENCODING, LASTFIELD };$/;"	e	enum:serverinfo_fields	file:
HOST_SECURE	include/config.h	178;"	d
History	script/history.rb	/^class History$/;"	c
HistoryItem	script/history.rb	/^class HistoryItem$/;"	c
Hook	source/hook.c	/^}	Hook;$/;"	t	typeref:struct:hook_stru	file:
Hookables	source/hook.c	/^typedef struct Hookables$/;"	s	file:
Hookables	source/hook.c	/^} Hookables;$/;"	t	typeref:struct:Hookables	file:
Hostent	include/irc_std.h	/^typedef struct hostent		Hostent;$/;"	t	typeref:struct:hostent
I2I	source/array.c	726;"	d	file:
I2I	source/array.c	757;"	d	file:
I6A	include/irc_std.h	/^typedef struct in6_addr		I6A;$/;"	t	typeref:struct:in6_addr
I6SA	include/irc_std.h	/^typedef struct sockaddr_in6	I6SA;$/;"	t	typeref:struct:sockaddr_in6
IA	include/irc_std.h	/^typedef struct in_addr		IA;$/;"	t	typeref:struct:in_addr
IA6	include/irc_std.h	/^typedef struct in6_addr		IA6;$/;"	t	typeref:struct:in6_addr
IACCESSOR	source/server.c	/^IACCESSOR(v, doing_privmsg)$/;"	f
IACCESSOR	source/server.c	/^IACCESSOR(v, funny_min)$/;"	f
IACCESSOR	source/server.c	3051;"	d	file:
ID	source/expr2.c	/^	ID,$/;"	e	enum:LEX	file:
IDLE_LIST	include/hook.h	/^	IDLE_LIST,$/;"	e	enum:HOOK_TYPES
ID_CHANNEL	source/parse.c	62;"	d	file:
IGNORED	include/ignore.h	16;"	d
IGNORE_DONT	source/ignore.c	105;"	d	file:
IGNORE_REMOVE	source/ignore.c	103;"	d	file:
IGNORE_SUPPRESS	source/ignore.c	104;"	d	file:
IMPLIED_BOOLEAN	source/expr2.c	1178;"	d	file:
IMPLIED_FLOAT	source/expr2.c	1159;"	d	file:
IMPLIED_FLOAT_NOZERO	source/expr2.c	1201;"	d	file:
IMPLIED_INTEGER	source/expr2.c	1139;"	d	file:
IMPLIED_INTEGER_NOZERO	source/expr2.c	1234;"	d	file:
IMPLIED_ON_HOOKS	include/config.h	247;"	d
INCLUDES	source/Makefile	/^INCLUDES = -I.\/..\/include -I..\/include$/;"	m
INCLUDE_PROTOTYPES	include/irc_std.h	68;"	d
IND_LEFT	source/input.c	227;"	d	file:
IND_LEFT_LEN	source/input.c	228;"	d	file:
IND_RIGHT	source/input.c	230;"	d	file:
IND_RIGHT_LEN	source/input.c	231;"	d	file:
INET6	include/irc_std.h	18;"	d
INET6	include/irc_std.h	20;"	d
INET6	include/irc_std.h	412;"	d
INET6	include/irc_std.h	417;"	d
INET6	source/gailib.c	33;"	d	file:
INPUT_BUFFER	source/input.c	125;"	d	file:
INPUT_BUFFER_SIZE	include/irc.h	75;"	d
INPUT_LINE	source/input.c	237;"	d	file:
INPUT_LIST	include/hook.h	/^	INPUT_LIST,$/;"	e	enum:HOOK_TYPES
INPUT_PASSWD_LEN	source/irc.c	1002;"	d	file:
INPUT_PROMPT	source/input.c	224;"	d	file:
INPUT_PROMPT_LEN	source/input.c	225;"	d	file:
INSTALL_DATA	Makefile	/^INSTALL_DATA = .\/bsdinstall -c -m 644$/;"	m
INSTALL_PROGRAM	Makefile	/^INSTALL_PROGRAM = .\/bsdinstall -c -m 755$/;"	m
INT2STR	include/ircaux.h	271;"	d
INTEGER	source/compat.c	76;"	d	file:
INTEQ	test.c	/^	INTEQ,$/;"	e	enum:token	file:
INTGE	test.c	/^	INTGE,$/;"	e	enum:token	file:
INTGT	test.c	/^	INTGT,$/;"	e	enum:token	file:
INTLE	test.c	/^	INTLE,$/;"	e	enum:token	file:
INTLT	test.c	/^	INTLT,$/;"	e	enum:token	file:
INTMAX_FORMAT	include/irc_std.h	303;"	d
INTMAX_FORMAT	include/irc_std.h	306;"	d
INTMAX_FORMAT	include/irc_std.h	315;"	d
INTMAX_FORMAT	include/irc_std.h	323;"	d
INTMAX_FORMAT	include/irc_std.h	331;"	d
INTNE	test.c	/^	INTNE,$/;"	e	enum:token	file:
INT_VAR	include/vars.h	209;"	d
INVALID_HOOKNUM	include/hook.h	118;"	d
INVALID_HOST_FILE	include/config.h	181;"	d
INVITE_LIST	include/hook.h	/^	INVITE_LIST,$/;"	e	enum:HOOK_TYPES
IN_CLASSA_NSHIFT	include/gailib.h	188;"	d
IN_CLASSD	include/gailib.h	179;"	d
IN_EXPERIMENTAL	include/gailib.h	184;"	d
IN_LOOPBACKNET	include/gailib.h	192;"	d
IN_MULTICAST	include/gailib.h	180;"	d
IOLENTYPE	include/socks5p.h	36;"	d
IOPTRTYPE	include/socks5p.h	32;"	d
IORETTYPE	include/socks5p.h	28;"	d
IO_ARRAYLEN	source/newio.c	51;"	d	file:
IO_ARRAYLEN	source/newio.c	54;"	d	file:
IO_ARRAYLEN	source/newio.c	56;"	d	file:
IO_BUFFER_SIZE	include/newio.h	73;"	d
IP	Makefile	/^IP	    = $/;"	m
IRCD_BUFFER_SIZE	include/irc.h	63;"	d
IRCII_COMMENT	include/irc.h	14;"	d
IRCII_LIKE_BAN_SUMMARY	include/config.h	66;"	d
IRCRC_NAME	include/irc.h	15;"	d
IRC_PORT	include/config.h	216;"	d
ISA	include/irc_std.h	/^typedef struct sockaddr_in 	ISA;$/;"	t	typeref:struct:sockaddr_in
ISA6	include/irc_std.h	/^typedef struct sockaddr_in6	ISA6;$/;"	t	typeref:struct:sockaddr_in6
IS_CURRENT_WINDOW	source/status.c	972;"	d	file:
ITALIC_TOG	include/irc.h	60;"	d
ITALIC_TOG_STR	include/irc.h	61;"	d
I_DONT_TRUST_MY_USERS	include/config.h	454;"	d
Iconv_stuff	include/ircaux.h	/^extern struct Iconv_stuff {$/;"	s
Ignore	source/ignore.c	/^}	Ignore;$/;"	t	typeref:struct:IgnoreStru	file:
IgnoreStru	source/ignore.c	/^typedef struct	IgnoreStru$/;"	s	file:
InputLine	include/screen.h	/^typedef struct InputLine$/;"	s
InputLine	include/screen.h	/^}	InputLine;$/;"	t	typeref:struct:InputLine
IrcCommand	source/commands.c	/^}	IrcCommand;$/;"	t	typeref:struct:__anon12	file:
IrcVariable	include/vars.h	/^}       IrcVariable;$/;"	t	typeref:struct:__anon10
IsonEntry	include/who.h	/^} IsonEntry;$/;"	t	typeref:struct:IsonEntryT
IsonEntryT	include/who.h	/^typedef struct IsonEntryT$/;"	s
JOIN_LIST	include/hook.h	/^	JOIN_LIST,$/;"	e	enum:HOOK_TYPES
K256	source/sha2.c	/^static const sha2_word32 K256[64] = {$/;"	v	file:
KEYBINDING_LIST	include/hook.h	/^	KEYBINDING_LIST,$/;"	e	enum:HOOK_TYPES
KEYMAP_SIZE	source/keys.c	95;"	d	file:
KICK_LIST	include/hook.h	/^	KICK_LIST,$/;"	e	enum:HOOK_TYPES
KILL_LIST	include/hook.h	/^	KILL_LIST,$/;"	e	enum:HOOK_TYPES
Key	source/keys.c	/^struct Key $/;"	s	file:
Key	source/keys.c	/^typedef struct Key Key;$/;"	t	typeref:struct:Key	file:
LARRAY_ITEM	include/alist.h	112;"	d
LASTFIELD	source/server.c	/^enum serverinfo_fields { HOST, PORT, PASS, NICK, GROUP, TYPE, PROTO, VHOST, ENCODING, LASTFIELD };$/;"	e	enum:serverinfo_fields	file:
LBRACE	source/glob.c	107;"	d	file:
LBRACKET	source/glob.c	97;"	d	file:
LDFLAGS	Makefile	/^LDFLAGS = $/;"	m
LDFLAGS	source/Makefile	/^LDFLAGS	= $/;"	m
LEFT	source/commands.c	80;"	d	file:
LEFT	source/input.c	67;"	d	file:
LEFT_BRACE	source/alias.c	60;"	d	file:
LEFT_BRACKET	source/alias.c	62;"	d	file:
LEFT_PAREN	source/alias.c	64;"	d	file:
LEQ	source/expr2.c	/^	LES,		LEQ,		GRE,		GEQ,$/;"	e	enum:LEX	file:
LES	source/expr2.c	/^	LES,		LEQ,		GRE,		GEQ,$/;"	e	enum:LEX	file:
LEVELNAME	source/levels.c	95;"	d	file:
LEVELNUM	source/levels.c	96;"	d	file:
LEVEL_ACTION	source/levels.c	/^int	LEVEL_WALLOP,	LEVEL_OPNOTE,	LEVEL_SNOTE,	LEVEL_ACTION;$/;"	v
LEVEL_ALL	source/levels.c	/^int	LEVEL_ALL;$/;"	v
LEVEL_CTCP	source/levels.c	/^int	LEVEL_DCC,	LEVEL_CTCP,	LEVEL_INVITE,	LEVEL_JOIN;$/;"	v
LEVEL_CURRENT	source/levels.c	/^int	LEVEL_NONE,	LEVEL_CURRENT,	LEVEL_OTHER;$/;"	v
LEVEL_DCC	source/levels.c	/^int	LEVEL_DCC,	LEVEL_CTCP,	LEVEL_INVITE,	LEVEL_JOIN;$/;"	v
LEVEL_INVITE	source/levels.c	/^int	LEVEL_DCC,	LEVEL_CTCP,	LEVEL_INVITE,	LEVEL_JOIN;$/;"	v
LEVEL_JOIN	source/levels.c	/^int	LEVEL_DCC,	LEVEL_CTCP,	LEVEL_INVITE,	LEVEL_JOIN;$/;"	v
LEVEL_KICK	source/levels.c	/^int	LEVEL_KICK,	LEVEL_MODE,	LEVEL_OPERWALL,	LEVEL_SYSERR;$/;"	v
LEVEL_MODE	source/levels.c	/^int	LEVEL_KICK,	LEVEL_MODE,	LEVEL_OPERWALL,	LEVEL_SYSERR;$/;"	v
LEVEL_MSG	source/levels.c	/^int	LEVEL_PUBLIC,	LEVEL_MSG,	LEVEL_NOTICE,	LEVEL_WALL;$/;"	v
LEVEL_NICK	source/levels.c	/^int	LEVEL_NICK,	LEVEL_TOPIC,	LEVEL_PART,	LEVEL_QUIT;$/;"	v
LEVEL_NONE	source/levels.c	/^int	LEVEL_NONE,	LEVEL_CURRENT,	LEVEL_OTHER;$/;"	v
LEVEL_NOTICE	source/levels.c	/^int	LEVEL_PUBLIC,	LEVEL_MSG,	LEVEL_NOTICE,	LEVEL_WALL;$/;"	v
LEVEL_OPERWALL	source/levels.c	/^int	LEVEL_KICK,	LEVEL_MODE,	LEVEL_OPERWALL,	LEVEL_SYSERR;$/;"	v
LEVEL_OPNOTE	source/levels.c	/^int	LEVEL_WALLOP,	LEVEL_OPNOTE,	LEVEL_SNOTE,	LEVEL_ACTION;$/;"	v
LEVEL_OTHER	source/levels.c	/^int	LEVEL_NONE,	LEVEL_CURRENT,	LEVEL_OTHER;$/;"	v
LEVEL_PART	source/levels.c	/^int	LEVEL_NICK,	LEVEL_TOPIC,	LEVEL_PART,	LEVEL_QUIT;$/;"	v
LEVEL_PUBLIC	source/levels.c	/^int	LEVEL_PUBLIC,	LEVEL_MSG,	LEVEL_NOTICE,	LEVEL_WALL;$/;"	v
LEVEL_QUIT	source/levels.c	/^int	LEVEL_NICK,	LEVEL_TOPIC,	LEVEL_PART,	LEVEL_QUIT;$/;"	v
LEVEL_SNOTE	source/levels.c	/^int	LEVEL_WALLOP,	LEVEL_OPNOTE,	LEVEL_SNOTE,	LEVEL_ACTION;$/;"	v
LEVEL_SYSERR	source/levels.c	/^int	LEVEL_KICK,	LEVEL_MODE,	LEVEL_OPERWALL,	LEVEL_SYSERR;$/;"	v
LEVEL_TOPIC	source/levels.c	/^int	LEVEL_NICK,	LEVEL_TOPIC,	LEVEL_PART,	LEVEL_QUIT;$/;"	v
LEVEL_USER1	source/levels.c	/^int	LEVEL_USER1,	LEVEL_USER2;$/;"	v
LEVEL_USER10	source/levels.c	/^int	LEVEL_USER7,	LEVEL_USER8,	LEVEL_USER9,	LEVEL_USER10;$/;"	v
LEVEL_USER2	source/levels.c	/^int	LEVEL_USER1,	LEVEL_USER2;$/;"	v
LEVEL_USER3	source/levels.c	/^int	LEVEL_USER3,	LEVEL_USER4,	LEVEL_USER5,	LEVEL_USER6;$/;"	v
LEVEL_USER4	source/levels.c	/^int	LEVEL_USER3,	LEVEL_USER4,	LEVEL_USER5,	LEVEL_USER6;$/;"	v
LEVEL_USER5	source/levels.c	/^int	LEVEL_USER3,	LEVEL_USER4,	LEVEL_USER5,	LEVEL_USER6;$/;"	v
LEVEL_USER6	source/levels.c	/^int	LEVEL_USER3,	LEVEL_USER4,	LEVEL_USER5,	LEVEL_USER6;$/;"	v
LEVEL_USER7	source/levels.c	/^int	LEVEL_USER7,	LEVEL_USER8,	LEVEL_USER9,	LEVEL_USER10;$/;"	v
LEVEL_USER8	source/levels.c	/^int	LEVEL_USER7,	LEVEL_USER8,	LEVEL_USER9,	LEVEL_USER10;$/;"	v
LEVEL_USER9	source/levels.c	/^int	LEVEL_USER7,	LEVEL_USER8,	LEVEL_USER9,	LEVEL_USER10;$/;"	v
LEVEL_WALL	source/levels.c	/^int	LEVEL_PUBLIC,	LEVEL_MSG,	LEVEL_NOTICE,	LEVEL_WALL;$/;"	v
LEVEL_WALLOP	source/levels.c	/^int	LEVEL_WALLOP,	LEVEL_OPNOTE,	LEVEL_SNOTE,	LEVEL_ACTION;$/;"	v
LEX	source/expr2.c	/^enum LEX {$/;"	g	file:
LIBPREFIX	include/socks5p.h	21;"	d
LIBPREFIX	include/socks5p.h	23;"	d
LIBS	Makefile	/^LIBS = -lncurses -L\/usr\/local\/lib  -larchive -lssl -lcrypto -lnsl -lresolv -lcrypt -lm -lrt$/;"	m
LIBS	source/Makefile	/^LIBS	= -lncurses -L\/usr\/local\/lib  -larchive -lssl -lcrypto -lnsl -lresolv -lcrypt -lm -lrt$/;"	m
LIST_LIST	include/hook.h	/^	LIST_LIST,$/;"	e	enum:HOOK_TYPES
LITEQ	source/expr2.c	/^	DEQ,		NEQ,		LITEQ,		NOTLITEQ,$/;"	e	enum:LEX	file:
LITTLE_ENDIAN	source/sha2.c	102;"	d	file:
LITTLE_ENDIAN	source/sha2.c	93;"	d	file:
LOCAL_CHANNEL	source/parse.c	61;"	d	file:
LOCAL_COPY	include/irc_std.h	263;"	d
LOGICAL_CHARS	source/input.c	147;"	d	file:
LOGICAL_COLUMN	source/input.c	148;"	d	file:
LOGICAL_CURSOR	source/input.c	158;"	d	file:
LOGICAL_LOCATION	source/input.c	161;"	d	file:
LOGICAL_LOCATION	source/input.c	300;"	d	file:
LOG_SERVERS	source/logfiles.c	49;"	d	file:
LOG_TARGETS	source/logfiles.c	47;"	d	file:
LOG_WINDOWS	source/logfiles.c	48;"	d	file:
LPAREN	test.c	/^	LPAREN,$/;"	e	enum:token	file:
LR	source/expr2.c	315;"	d	file:
Lastlog	source/lastlog.c	/^}	Lastlog;$/;"	t	typeref:struct:lastlog_stru	file:
List	include/list.h	/^}	List;$/;"	t	typeref:struct:list_stru
LocalHostName	source/irc.c	/^char *		LocalHostName = NULL;$/;"	v
LocalIPv4HostName	source/irc.c	/^char *		LocalIPv4HostName = NULL;$/;"	v
LocalIPv6HostName	source/irc.c	/^char *		LocalIPv6HostName = NULL;$/;"	v
Logfile	source/logfiles.c	/^struct Logfile {$/;"	s	file:
Logfile	source/logfiles.c	/^typedef struct Logfile Logfile;$/;"	t	typeref:struct:Logfile	file:
MAGIC_TOKEN	source/expr2.c	48;"	d	file:
MAIL_LIST	include/hook.h	/^	MAIL_LIST,$/;"	e	enum:HOOK_TYPES
MAKE2	Makefile	/^MAKE2 = $(MAKE) $(MFLAGS)$/;"	m
MANGLE_ESCAPES	include/ircaux.h	228;"	d
MATCH	source/expr2.c	/^	MATCH,		NOMATCH,$/;"	e	enum:LEX	file:
MATCHITEM	source/array.c	513;"	d	file:
MATCHITEM	source/array.c	542;"	d	file:
MATH_FUNCTION	source/functions.c	/^MATH_FUNCTION(function_abs, fabs)$/;"	f
MATH_FUNCTION	source/functions.c	6661;"	d	file:
MATH_FUNCTION2	source/functions.c	6672;"	d	file:
MATH_RETVAL	source/functions.c	6649;"	d	file:
MAX	include/irc_std.h	186;"	d
MAXCOLS	source/input.c	150;"	d	file:
MAXPARA	source/parse.c	65;"	d	file:
MAX_FUNCTIONS	include/status.h	14;"	d
MAX_FUNCTIONS	source/status.c	68;"	d	file:
MAX_LINE	source/compat.c	79;"	d	file:
MAX_LINE_SIZE	source/commands.c	1853;"	d	file:
MAX_LOAD_DEPTH	source/commands.c	83;"	d	file:
MAX_PROTOCOL_SIZE	include/irc.h	65;"	d
MAX_PUSHED	source/compat.c	70;"	d	file:
MAX_RECODING_RULES	source/recode.c	182;"	d	file:
MAX_SEGMENTS	source/newio.c	60;"	d	file:
MAX_STACK_FRAMES	include/config.h	56;"	d
MAX_STATUS_USER	source/status.c	69;"	d	file:
MAX_TARGETS	source/logfiles.c	45;"	d	file:
MAX_TRANSFORMS	source/functions.c	7303;"	d	file:
MEMCPY_BCOPY	source/sha2.c	182;"	d	file:
MEMSET_BZERO	source/sha2.c	181;"	d	file:
META	source/glob.c	124;"	d	file:
MFLAGS	Makefile	/^MFLAGS ='CC=$(CC)'					\\$/;"	m
MIN	include/irc_std.h	183;"	d
MINUS	source/expr2.c	/^	PLUS,		MINUS,		STRCAT,$/;"	e	enum:LEX	file:
MINUSEQ	source/expr2.c	/^	EQ,		PLUSEQ,		MINUSEQ,	MULEQ,		DIVEQ,$/;"	e	enum:LEX	file:
MIRC_BROKEN_DCC_RESUME	include/config.h	99;"	d
MO	source/ircaux.c	/^} MO;$/;"	t	typeref:struct:_mo_money	file:
MOD	source/expr2.c	/^	MUL,		DIV,		MOD,$/;"	e	enum:LEX	file:
MODEQ	source/expr2.c	/^			MODEQ,		ANDEQ,		XOREQ,		OREQ,$/;"	e	enum:LEX	file:
MODE_LIST	include/hook.h	/^	MODE_LIST,$/;"	e	enum:HOOK_TYPES
MODE_STRIPPED_LIST	include/hook.h	/^	MODE_STRIPPED_LIST,$/;"	e	enum:HOOK_TYPES
MOVB	source/sdbm.c	660;"	d	file:
MSG_GROUP_LIST	include/hook.h	/^	MSG_GROUP_LIST,$/;"	e	enum:HOOK_TYPES
MSG_LIST	include/hook.h	/^	MSG_LIST,$/;"	e	enum:HOOK_TYPES
MUL	source/expr2.c	/^	MUL,		DIV,		MOD,$/;"	e	enum:LEX	file:
MULEQ	source/expr2.c	/^	EQ,		PLUSEQ,		MINUSEQ,	MULEQ,		DIVEQ,$/;"	e	enum:LEX	file:
MULTI_CHANNEL	source/parse.c	60;"	d	file:
MUST_BE_MALLOCED	include/ircaux.h	31;"	d
MV	Makefile	/^MV = mv$/;"	m
M_ALL	source/glob.c	125;"	d	file:
M_ANYCASE	source/glob.c	114;"	d	file:
M_ASCII	source/glob.c	116;"	d	file:
M_END	source/glob.c	126;"	d	file:
M_FUNCTION	source/expr2.c	/^	M_FUNCTION,	M_INPAR,$/;"	e	enum:LEX	file:
M_INPAR	source/expr2.c	/^	M_FUNCTION,	M_INPAR,$/;"	e	enum:LEX	file:
M_MASK	source/glob.c	115;"	d	file:
M_NOT	source/glob.c	127;"	d	file:
M_ONE	source/glob.c	128;"	d	file:
M_OUTPAR	source/expr2.c	/^	M_OUTPAR,$/;"	e	enum:LEX	file:
M_PROTECT	source/glob.c	113;"	d	file:
M_QUOTE	source/glob.c	112;"	d	file:
M_RNG	source/glob.c	129;"	d	file:
M_SET	source/glob.c	130;"	d	file:
Maj	source/sha2.c	201;"	d	file:
Mask	include/levels.h	/^typedef struct Mask {$/;"	s
Mask	include/levels.h	/^} Mask;$/;"	t	typeref:struct:Mask
MatchingBracket	source/ircaux.c	/^ssize_t	MatchingBracket (const char *start, char left, char right)$/;"	f
MyIO	source/newio.c	/^}           MyIO;$/;"	t	typeref:struct:myio_struct	file:
NAMES_LIST	include/hook.h	/^	NAMES_LIST,$/;"	e	enum:HOOK_TYPES
NAME_LEN	include/irc.h	79;"	d
NAMLEN	include/irc_std.h	121;"	d
NAMLEN	include/irc_std.h	124;"	d
NBBY	include/irc_std.h	372;"	d
ND_SPACE	include/irc.h	56;"	d
ND_SPACE_STR	include/irc.h	57;"	d
NEED_GAILIB	include/irc_std.h	416;"	d
NEED_GLOB	include/config.h	108;"	d
NEED_SERVER_LIST	source/notify.c	43;"	d	file:
NEED_SERVER_LIST	source/recode.c	34;"	d	file:
NEED_SERVER_LIST	source/server.c	37;"	d	file:
NEED_SERVER_LIST	source/who.c	34;"	d	file:
NEED_STRTOLL	acconfig.h	429;"	d
NEED_SYS_SELECT_H	acconfig.h	164;"	d
NEQ	source/expr2.c	/^	DEQ,		NEQ,		LITEQ,		NOTLITEQ,$/;"	e	enum:LEX	file:
NEWIO_ACCEPT	include/newio.h	66;"	d
NEWIO_CONNECT	include/newio.h	68;"	d
NEWIO_NULL	include/newio.h	70;"	d
NEWIO_READ	include/newio.h	65;"	d
NEWIO_RECV	include/newio.h	69;"	d
NEWIO_SSL_CONNECT	include/newio.h	71;"	d
NEWIO_SSL_READ	include/newio.h	67;"	d
NEW_NICKNAME_LIST	include/hook.h	/^	NEW_NICKNAME_LIST,$/;"	e	enum:HOOK_TYPES
NEXT_CHAR	source/input.c	200;"	d	file:
NEXT_LOGICAL_LOCATION	source/input.c	169;"	d	file:
NEXT_SPOT	source/input.c	182;"	d	file:
NFDBITS	include/irc_std.h	376;"	d
NICK	source/server.c	/^enum serverinfo_fields { HOST, PORT, PASS, NICK, GROUP, TYPE, PROTO, VHOST, ENCODING, LASTFIELD };$/;"	e	enum:serverinfo_fields	file:
NICKNAME_LEN	include/irc.h	78;"	d
NICKNAME_LIST	include/hook.h	/^	NICKNAME_LIST,$/;"	e	enum:HOOK_TYPES
NI_DGRAM	include/gailib.h	115;"	d
NI_DGRAM	include/gailib.h	65;"	d
NI_MAXHOST	include/gailib.h	105;"	d
NI_MAXHOST	include/gailib.h	58;"	d
NI_MAXSERV	include/gailib.h	106;"	d
NI_MAXSERV	include/gailib.h	59;"	d
NI_NAMEREQD	include/gailib.h	113;"	d
NI_NAMEREQD	include/gailib.h	63;"	d
NI_NOFQDN	include/gailib.h	111;"	d
NI_NOFQDN	include/gailib.h	61;"	d
NI_NUMERICHOST	include/gailib.h	112;"	d
NI_NUMERICHOST	include/gailib.h	62;"	d
NI_NUMERICSERV	include/gailib.h	114;"	d
NI_NUMERICSERV	include/gailib.h	64;"	d
NO	source/gailib.c	42;"	d	file:
NO	source/gailib.c	506;"	d	file:
NOCRYPT	include/sedcrypt.h	12;"	d
NOMATCH	source/expr2.c	/^	MATCH,		NOMATCH,$/;"	e	enum:LEX	file:
NONE_xform	source/ircaux.c	/^int	NONE_xform, URL_xform, ENC_xform, B64_xform, FISH64_xform;$/;"	v
NORMALIZE	include/ircaux.h	229;"	d
NOSERV	include/server.h	185;"	d
NOT	source/expr2.c	/^	NOT, 		COMP, 		PREMINUS,	PREPLUS,$/;"	e	enum:LEX	file:
NOT	source/glob.c	98;"	d	file:
NOTE_LIST	include/hook.h	/^	NOTE_LIST,$/;"	e	enum:HOOK_TYPES
NOTICE_LIST	include/hook.h	/^	NOTICE_LIST,$/;"	e	enum:HOOK_TYPES
NOTIFY_ITEM	source/notify.c	91;"	d	file:
NOTIFY_LIST	source/notify.c	89;"	d	file:
NOTIFY_MAX	source/notify.c	90;"	d	file:
NOTIFY_SIGNOFF_LIST	include/hook.h	/^	NOTIFY_SIGNOFF_LIST,$/;"	e	enum:HOOK_TYPES
NOTIFY_SIGNON_LIST	include/hook.h	/^	NOTIFY_SIGNON_LIST,$/;"	e	enum:HOOK_TYPES
NOTLITEQ	source/expr2.c	/^	DEQ,		NEQ,		LITEQ,		NOTLITEQ,$/;"	e	enum:LEX	file:
NOT_IGNORED	include/ignore.h	15;"	d
NO_ACTION_TAKEN	source/hook.c	683;"	d	file:
NO_BOTS	include/config.h	451;"	d
NO_CHEATING	include/config.h	452;"	d
NO_ERROR	source/ircaux.c	96;"	d	file:
NO_JOB_CONTROL	acconfig.h	420;"	d
NO_STRUCT_LINGER	acconfig.h	134;"	d
NO_UPDATE	include/input.h	64;"	d
NSIG	include/irc_std.h	472;"	d
NSIG	include/irc_std.h	474;"	d
NULL	include/irc_std.h	211;"	d
NULL	include/irc_std.h	213;"	d
NULL	source/alloca.c	43;"	d	file:
NUM	source/compat.c	74;"	d	file:
NUMBER_OF_COMMANDS	source/parse.c	1509;"	d	file:
NUMBER_OF_CTCPS	include/ctcp.h	34;"	d
NUMBER_OF_EXPANDOS	source/status.c	238;"	d	file:
NUMBER_OF_LISTS	include/hook.h	117;"	d
NUMERIC_LIST	include/hook.h	/^	NUMERIC_LIST,$/;"	e	enum:HOOK_TYPES
NUMSTR	include/ircaux.h	273;"	d
NU_ADD	source/expr.c	101;"	d	file:
NU_ASSN	source/expr.c	96;"	d	file:
NU_BITW	source/expr.c	99;"	d	file:
NU_COMP	source/expr.c	100;"	d	file:
NU_CONJ	source/expr.c	98;"	d	file:
NU_EXPR	source/expr.c	95;"	d	file:
NU_MULT	source/expr.c	102;"	d	file:
NU_TERT	source/expr.c	97;"	d	file:
NU_UNIT	source/expr.c	103;"	d	file:
N_INET	source/gailib.c	61;"	d	file:
Nick	source/names.c	/^}	Nick;$/;"	t	typeref:struct:nick_stru	file:
NickList	source/names.c	/^}	NickList;$/;"	t	typeref:struct:nick_list_stru	file:
NoiseInfo	source/hook.c	/^struct NoiseInfo {$/;"	s	file:
NotifyItem	source/notify.c	/^} NotifyItem;$/;"	t	typeref:struct:notify_stru	file:
NotifyList	include/notify.h	/^} NotifyList;$/;"	t	typeref:struct:notify_alist
OBJECTS	source/Makefile	/^OBJECTS = alias.o alist.o array.o clock.o commands.o compat.o crypt.o crypto.o \\$/;"	m
OBNOXIOUS_BUFFER_SIZE	source/output.c	56;"	d	file:
ODD_SERVER_STUFF_LIST	include/hook.h	/^	ODD_SERVER_STUFF_LIST,$/;"	e	enum:HOOK_TYPES
OFF	include/vars.h	194;"	d
OFF	include/window.h	26;"	d
OFF_DIR	source/sdbm.c	80;"	d	file:
OFF_PAG	source/sdbm.c	79;"	d	file:
ON	include/vars.h	195;"	d
ON	include/window.h	27;"	d
OPERAND	test.c	/^	OPERAND$/;"	e	enum:token	file:
OPERATOR	source/expr2.c	1736;"	d	file:
OPERWALL_LIST	include/hook.h	/^	OPERWALL_LIST,$/;"	e	enum:HOOK_TYPES
OPER_NOTICE_LIST	include/hook.h	/^	OPER_NOTICE_LIST,$/;"	e	enum:HOOK_TYPES
OR	source/expr2.c	/^	OR,$/;"	e	enum:LEX	file:
OREQ	source/expr2.c	/^			MODEQ,		ANDEQ,		XOREQ,		OREQ,$/;"	e	enum:LEX	file:
OnStack	source/hook.c	/^}       OnStack;$/;"	t	typeref:struct:onstacklist	file:
P	include/socks5p.h	16;"	d
PAGFEXT	source/sdbm.c	26;"	d	file:
PAIRMAX	source/sdbm.c	22;"	d	file:
PAREN	test.c	/^	PAREN$/;"	e	enum:token_types	file:
PART_LIST	include/hook.h	/^	PART_LIST,$/;"	e	enum:HOOK_TYPES
PASS	source/server.c	/^enum serverinfo_fields { HOST, PORT, PASS, NICK, GROUP, TYPE, PROTO, VHOST, ENCODING, LASTFIELD };$/;"	e	enum:serverinfo_fields	file:
PASSWORD	include/config.h	476;"	d
PATH_LEN	include/irc.h	81;"	d
PATH_MAX	include/irc_std.h	230;"	d
PATH_MAX	include/irc_std.h	232;"	d
PATH_MAX	include/irc_std.h	235;"	d
PATH_MAX	source/glob.c	84;"	d	file:
PATH_MAX	source/glob.c	86;"	d	file:
PATH_MAX	source/glob.c	89;"	d	file:
PBLKSIZ	source/sdbm.c	21;"	d	file:
PERLCFLAGS	acconfig.h	378;"	d
PERLCFLAGS	include/defs.h	317;"	d
PERLLDFLAGS	acconfig.h	381;"	d
PERLLDFLAGS	include/defs.h	320;"	d
PERL_SYS_TERM	configure	/^	PERL_SYS_TERM();$/;"	f
PF_INET	include/gailib.h	204;"	d
PF_UNSPEC	include/gailib.h	200;"	d
PHYSICAL_CURSOR	source/input.c	189;"	d	file:
PLUS	source/expr2.c	/^	PLUS,		MINUS,		STRCAT,$/;"	e	enum:LEX	file:
PLUSEQ	source/expr2.c	/^	EQ,		PLUSEQ,		MINUSEQ,	MULEQ,		DIVEQ,$/;"	e	enum:LEX	file:
PMATCH_SYMBOL	source/alias.c	/^static PMATCH_SYMBOL(any_symbol, name)$/;"	f	file:
PMATCH_SYMBOL	source/alias.c	2101;"	d	file:
PONG_LIST	include/hook.h	/^	PONG_LIST,$/;"	e	enum:HOOK_TYPES
PORT	source/server.c	/^enum serverinfo_fields { HOST, PORT, PASS, NICK, GROUP, TYPE, PROTO, VHOST, ENCODING, LASTFIELD };$/;"	e	enum:serverinfo_fields	file:
POSTMINUS	source/expr2.c	/^	POSTMINUS,	POSTPLUS,$/;"	e	enum:LEX	file:
POSTPLUS	source/expr2.c	/^	POSTMINUS,	POSTPLUS,$/;"	e	enum:LEX	file:
POWER	source/expr2.c	/^	POWER,$/;"	e	enum:LEX	file:
POWEREQ	source/expr2.c	/^			DXOREQ,		POWEREQ,	STRCATEQ,    STRPREEQ,$/;"	e	enum:LEX	file:
PREMINUS	source/expr2.c	/^	NOT, 		COMP, 		PREMINUS,	PREPLUS,$/;"	e	enum:LEX	file:
PREPARE_NOWRAP	include/screen.h	156;"	d
PREPLUS	source/expr2.c	/^	NOT, 		COMP, 		PREMINUS,	PREPLUS,$/;"	e	enum:LEX	file:
PRESS	source/status.c	1060;"	d	file:
PREV_CHAR	source/input.c	199;"	d	file:
PREV_LOGICAL_LOCATION	source/input.c	170;"	d	file:
PREV_SPOT	source/input.c	183;"	d	file:
PROGCRYPT	include/sedcrypt.h	14;"	d
PROTO	source/server.c	/^enum serverinfo_fields { HOST, PORT, PASS, NICK, GROUP, TYPE, PROTO, VHOST, ENCODING, LASTFIELD };$/;"	e	enum:serverinfo_fields	file:
PROTO_QUOTEBAD	include/parse.h	20;"	d
PS	source/newio.c	/^typedef struct pthread_stuff PS;$/;"	t	typeref:struct:pthread_stuff	file:
PTON_MAX	source/gailib.c	69;"	d	file:
PUBLIC_LIST	include/hook.h	/^	PUBLIC_LIST,$/;"	e	enum:HOOK_TYPES
PUBLIC_MSG_LIST	include/hook.h	/^	PUBLIC_MSG_LIST,$/;"	e	enum:HOOK_TYPES
PUBLIC_NOTICE_LIST	include/hook.h	/^	PUBLIC_NOTICE_LIST,$/;"	e	enum:HOOK_TYPES
PUBLIC_OTHER_LIST	include/hook.h	/^	PUBLIC_OTHER_LIST,$/;"	e	enum:HOOK_TYPES
PasteArgs	source/parse.c	/^const char *	PasteArgs (const char **arg_list, int paste_point)$/;"	f
PendingTimers	source/timer.c	/^static 	Timer *		PendingTimers;$/;"	v	file:
Process	source/exec.c	/^}	Process;$/;"	t	typeref:struct:__anon14	file:
PromptStru	include/screen.h	/^typedef struct PromptStru$/;"	s
QUEST	source/expr2.c	/^	QUEST,		COLON,$/;"	e	enum:LEX	file:
QUESTION	source/glob.c	99;"	d	file:
QUOTE	source/glob.c	100;"	d	file:
QUOTE_CHAR	include/irc.h	24;"	d
QWORD	include/alias.h	/^	QWORD$/;"	e	enum:ARG_TYPES
Queue	source/queue.c	/^} Queue;$/;"	t	typeref:struct:QueueT	file:
QueueT	source/queue.c	/^typedef struct  QueueT {$/;"	s	file:
R	source/sha2.c	195;"	d	file:
RANGE	source/glob.c	101;"	d	file:
RAW_IRC_LIST	include/hook.h	/^	RAW_IRC_LIST,$/;"	e	enum:HOOK_TYPES
RBRACE	source/glob.c	108;"	d	file:
RBRACKET	source/glob.c	102;"	d	file:
REALNAME_LEN	include/irc.h	80;"	d
RECHECK	source/status.c	1045;"	d	file:
REDIRECT_LIST	include/hook.h	/^	REDIRECT_LIST,$/;"	e	enum:HOOK_TYPES
REDRAW_DISPLAY	source/window.c	71;"	d	file:
REDRAW_STATUS	source/window.c	73;"	d	file:
REEXP	source/expr2.c	/^			WORDC,		DEREF,		REEXP,$/;"	e	enum:LEX	file:
REFNUM_MAX	source/timer.c	275;"	d	file:
REMOVE_FROM_LIST	include/list.h	24;"	d
RESIZE	include/ircaux.h	33;"	d
RESIZE_ABS	source/window.c	68;"	d	file:
RESIZE_REL	source/window.c	67;"	d	file:
RESULT_PENDING	source/hook.c	686;"	d	file:
RETSIGTYPE	include/defs.h	46;"	d
RETURN	source/status.c	1073;"	d	file:
RETURN_EMPTY	include/functions.h	23;"	d
RETURN_FLOAT	include/functions.h	56;"	d
RETURN_FLOAT2	include/functions.h	57;"	d
RETURN_IF_EMPTY	include/functions.h	24;"	d
RETURN_INT	include/functions.h	55;"	d
RETURN_MSTR	include/functions.h	53;"	d
RETURN_STR	include/functions.h	54;"	d
REVERSE32	source/sha2.c	154;"	d	file:
REVERSE64	source/sha2.c	159;"	d	file:
REV_TOG	include/irc.h	46;"	d
REV_TOG_STR	include/irc.h	47;"	d
RIGHT	source/commands.c	79;"	d	file:
RIGHT	source/input.c	66;"	d	file:
RIGHT_BRACE	source/alias.c	61;"	d	file:
RIGHT_BRACKET	source/alias.c	63;"	d	file:
RIGHT_PAREN	source/alias.c	65;"	d	file:
RL	source/expr2.c	316;"	d	file:
RM	Makefile	/^RM = rm -f$/;"	m
RM	source/Makefile	/^RM	= rm -f$/;"	m
RPAREN	test.c	/^	RPAREN,$/;"	e	enum:token	file:
RUBYCFLAGS	acconfig.h	366;"	d
RUBYCFLAGS	include/defs.h	305;"	d
RUBYLDFLAGS	acconfig.h	369;"	d
RUBYLDFLAGS	include/defs.h	308;"	d
RUBY_STARTUP	source/ruby.c	48;"	d	file:
Raccept	acconfig.h	194;"	d
Rbind	acconfig.h	193;"	d
Rconnect	acconfig.h	190;"	d
RecodeRule	source/recode.c	/^struct RecodeRule {$/;"	s	file:
RecodeRule	source/recode.c	/^typedef struct RecodeRule RecodeRule;$/;"	t	typeref:struct:RecodeRule	file:
Rgetpeername	acconfig.h	192;"	d
Rgetsockname	acconfig.h	191;"	d
Rlisten	acconfig.h	195;"	d
Rselect	acconfig.h	196;"	d
RuntimeStack	source/alias.c	/^}	RuntimeStack;$/;"	t	typeref:struct:RuntimeStackStru	file:
RuntimeStackStru	source/alias.c	/^typedef struct RuntimeStackStru$/;"	s	file:
S	source/compat.c	/^static stack S[MAX_PUSHED];$/;"	v	file:
S	source/who.c	135;"	d	file:
S32	source/sha2.c	197;"	d	file:
SA	include/irc_std.h	/^typedef struct sockaddr 	SA;$/;"	t	typeref:struct:sockaddr
SACCESSOR	source/server.c	3055;"	d	file:
SAFE	include/irc_std.h	264;"	d
SAVED_BUILTIN_CMD	source/alias.c	122;"	d	file:
SAVED_BUILTIN_EXPANDO	source/alias.c	124;"	d	file:
SAVED_BUILTIN_FUNCTION	source/alias.c	123;"	d	file:
SAVED_BUILTIN_VAR	source/alias.c	125;"	d	file:
SAVED_CMD	source/alias.c	121;"	d	file:
SAVED_VAR	source/alias.c	120;"	d	file:
SA_LEN	include/gailib.h	151;"	d
SA_LEN	include/gailib.h	154;"	d
SA_LEN	include/gailib.h	159;"	d
SDBM	include/sdbm.h	/^typedef struct SDBM SDBM;$/;"	t	typeref:struct:SDBM
SDBM	source/sdbm.c	/^struct SDBM {$/;"	s	file:
SEDCRYPT	include/sedcrypt.h	15;"	d
SEDSHACRYPT	include/sedcrypt.h	16;"	d
SEND_ACTION_LIST	include/hook.h	/^	SEND_ACTION_LIST,$/;"	e	enum:HOOK_TYPES
SEND_CTCP_LIST	include/hook.h	/^	SEND_CTCP_LIST,$/;"	e	enum:HOOK_TYPES
SEND_DCC_CHAT_LIST	include/hook.h	/^	SEND_DCC_CHAT_LIST,$/;"	e	enum:HOOK_TYPES
SEND_MSG_LIST	include/hook.h	/^	SEND_MSG_LIST,$/;"	e	enum:HOOK_TYPES
SEND_NOTICE_LIST	include/hook.h	/^	SEND_NOTICE_LIST,$/;"	e	enum:HOOK_TYPES
SEND_PUBLIC_LIST	include/hook.h	/^	SEND_PUBLIC_LIST,$/;"	e	enum:HOOK_TYPES
SEND_TO_SERVER_LIST	include/hook.h	/^	SEND_TO_SERVER_LIST,$/;"	e	enum:HOOK_TYPES
SEP	source/glob.c	103;"	d	file:
SERVER	include/server.h	181;"	d
SERVERS_FILE	include/config.h	225;"	d
SERVER_ACTIVE	include/server.h	202;"	d
SERVER_CLOSED	include/server.h	206;"	d
SERVER_CLOSING	include/server.h	205;"	d
SERVER_CONNECTING	include/server.h	198;"	d
SERVER_CREATED	include/server.h	195;"	d
SERVER_DELETED	include/server.h	207;"	d
SERVER_DNS	include/server.h	197;"	d
SERVER_EOF	include/server.h	203;"	d
SERVER_ERROR	include/server.h	204;"	d
SERVER_ESTABLISHED_LIST	include/hook.h	/^	SERVER_ESTABLISHED_LIST,$/;"	e	enum:HOOK_TYPES
SERVER_LOST_LIST	include/hook.h	/^	SERVER_LOST_LIST,$/;"	e	enum:HOOK_TYPES
SERVER_NOTICE_LIST	include/hook.h	/^	SERVER_NOTICE_LIST,$/;"	e	enum:HOOK_TYPES
SERVER_RECONNECT	include/server.h	196;"	d
SERVER_REGISTERING	include/server.h	200;"	d
SERVER_SSL_CONNECTING	include/server.h	199;"	d
SERVER_STATUS_LIST	include/hook.h	/^	SERVER_STATUS_LIST,$/;"	e	enum:HOOK_TYPES
SERVER_SYNCING	include/server.h	201;"	d
SERVER_TIMER	include/timer.h	/^	SERVER_TIMER,$/;"	e	enum:__anon9
SERVICE_CLIENT	include/network.h	36;"	d
SERVICE_SERVER	include/network.h	35;"	d
SETUP	source/expr.c	240;"	d	file:
SETUP_BINARY	source/expr.c	216;"	d	file:
SETUP_FLOAT_OPERATION	source/expr.c	259;"	d	file:
SETUP_IMPLIED	source/expr.c	166;"	d	file:
SETUP_INTEGER_OPERATION	source/expr.c	263;"	d	file:
SET_IATTRIBUTE	source/server.c	3004;"	d	file:
SET_LIST	include/hook.h	/^	SET_LIST,$/;"	e	enum:HOOK_TYPES
SET_SATTRIBUTE	source/server.c	/^SET_SATTRIBUTE(name, itsname)$/;"	f
SET_SATTRIBUTE	source/server.c	3026;"	d	file:
SET_SA_LEN	include/gailib.h	165;"	d
SET_SA_LEN	include/gailib.h	167;"	d
SET_SIN_LEN	include/gailib.h	172;"	d
SET_SIN_LEN	include/gailib.h	175;"	d
SHA256_BLOCK_LENGTH	source/sha2.c	39;"	d	file:
SHA256_CTX	source/sha2.c	/^} SHA256_CTX;$/;"	t	typeref:struct:_SHA256_CTX	file:
SHA256_DIGEST_LENGTH	source/sha2.c	40;"	d	file:
SHA256_DIGEST_STRING_LENGTH	source/sha2.c	41;"	d	file:
SHA256_Data	source/sha2.c	/^static char *	SHA256_Data (const sha2_byte *data, size_t len, char digest[SHA256_DIGEST_STRING_LENGTH]) $/;"	f	file:
SHA256_End	source/sha2.c	/^static char *	SHA256_End (SHA256_CTX *context, char *buffer) $/;"	f	file:
SHA256_Final	source/sha2.c	/^static void 	SHA256_Final (sha2_byte *digest, SHA256_CTX *context) $/;"	f	file:
SHA256_Init	source/sha2.c	/^static void	SHA256_Init (SHA256_CTX *context) $/;"	f	file:
SHA256_SHORT_BLOCK_LENGTH	source/sha2.c	149;"	d	file:
SHA256_Transform	source/sha2.c	/^static void	SHA256_Transform (SHA256_CTX *context, const sha2_word32 *data) $/;"	f	file:
SHA256_Update	source/sha2.c	/^static void	SHA256_Update (SHA256_CTX *context, const sha2_byte *data, size_t len) $/;"	f	file:
SHA256_xform	source/ircaux.c	/^int	CTCP_xform, SHA256_xform;$/;"	v
SHELL	Makefile	/^SHELL = \/bin\/sh$/;"	m
SHLEFT	source/expr2.c	/^	SHLEFT,		SHRIGHT,$/;"	e	enum:LEX	file:
SHLEFTEQ	source/expr2.c	/^			SHLEFTEQ,	SHRIGHTEQ,	DANDEQ,		DOREQ,$/;"	e	enum:LEX	file:
SHOW_ALL_WINDOWS	source/status.c	977;"	d	file:
SHRIGHT	source/expr2.c	/^	SHLEFT,		SHRIGHT,$/;"	e	enum:LEX	file:
SHRIGHTEQ	source/expr2.c	/^			SHLEFTEQ,	SHRIGHTEQ,	DANDEQ,		DOREQ,$/;"	e	enum:LEX	file:
SIGNAL_HANDLER	include/irc_std.h	246;"	d
SIGNAL_HANDLER	source/irc.c	/^static SIGNAL_HANDLER(child_reap)$/;"	f	file:
SIGNAL_HANDLER	source/irc.c	/^static SIGNAL_HANDLER(cntl_c)$/;"	f	file:
SIGNAL_HANDLER	source/irc.c	/^static SIGNAL_HANDLER(coredump)$/;"	f	file:
SIGNAL_HANDLER	source/irc.c	/^static SIGNAL_HANDLER(nothing)$/;"	f	file:
SIGNAL_HANDLER	source/irc.c	/^static SIGNAL_HANDLER(sig_irc_exit)$/;"	f	file:
SIGNAL_HANDLER	source/irc.c	/^static SIGNAL_HANDLER(sig_user1)$/;"	f	file:
SIGNAL_HANDLER	source/irc.c	/^static SIGNAL_HANDLER(sig_user2)$/;"	f	file:
SIGNAL_HANDLER	source/output.c	/^SIGNAL_HANDLER(sig_refresh_screen)$/;"	f
SIGNAL_HANDLER	source/term.c	/^SIGNAL_HANDLER(term_cont)$/;"	f
SIGNAL_LIST	include/hook.h	/^	SIGNAL_LIST,$/;"	e	enum:HOOK_TYPES
SIGNOFF_LIST	include/hook.h	/^	SIGNOFF_LIST,$/;"	e	enum:HOOK_TYPES
SIGVOID	acconfig.h	143;"	d
SILENCE_LIST	include/hook.h	/^	SILENCE_LIST,$/;"	e	enum:HOOK_TYPES
SIN_LEN	include/gailib.h	171;"	d
SIN_LEN	include/gailib.h	174;"	d
SIZEOF_LONG_LONG	include/defs.h	362;"	d
SIZEOF_QUAD_T	include/defs.h	365;"	d
SIZEOF_UNSIGNED_INT	include/defs.h	368;"	d
SLASH	source/glob.c	109;"	d	file:
SOCKS	acconfig.h	169;"	d
SOFT_SECURE	include/config.h	158;"	d
SORT_INDICES	source/array.c	249;"	d	file:
SOS	include/words.h	35;"	d
SPLIT_EXTENT	source/screen.c	1762;"	d	file:
SPLTMAX	source/sdbm.c	23;"	d	file:
SPOOF_PROGRAM	include/config.h	204;"	d
SPOOF_PROGRAM	include/config.h	492;"	d
SRV	include/newio.h	82;"	d
SS	include/irc_std.h	/^typedef struct sockaddr_storage	SS;$/;"	t	typeref:struct:sockaddr_storage
SSL_CTX_init	source/ssl.c	/^static SSL_CTX	*SSL_CTX_init (int server)$/;"	f	file:
SSL_FD_init	source/ssl.c	/^static SSL *SSL_FD_init (SSL_CTX *ctx, int channel)$/;"	f	file:
SSL_SERVER_CERT_LIST	include/hook.h	/^	SSL_SERVER_CERT_LIST,$/;"	e	enum:HOOK_TYPES
STACKSZ	source/expr2.c	46;"	d	file:
STACK_DIR	source/alloca.c	65;"	d	file:
STACK_DIR	source/alloca.c	70;"	d	file:
STACK_DIRECTION	source/alloca.c	60;"	d	file:
STACK_DO_ALIAS	include/stack.h	17;"	d
STACK_DO_ASSIGN	include/stack.h	18;"	d
STACK_LIST	include/stack.h	15;"	d
STACK_POP	include/stack.h	12;"	d
STACK_PUSH	include/stack.h	13;"	d
STACK_SWAP	include/stack.h	14;"	d
STAR	source/glob.c	104;"	d	file:
START	source/input.c	149;"	d	file:
STATUS_FUNCTION	source/status.c	/^STATUS_FUNCTION(status_activity)$/;"	f
STATUS_FUNCTION	source/status.c	/^STATUS_FUNCTION(status_away)$/;"	f
STATUS_FUNCTION	source/status.c	/^STATUS_FUNCTION(status_channel)$/;"	f
STATUS_FUNCTION	source/status.c	/^STATUS_FUNCTION(status_chanop)$/;"	f
STATUS_FUNCTION	source/status.c	/^STATUS_FUNCTION(status_clock)$/;"	f
STATUS_FUNCTION	source/status.c	/^STATUS_FUNCTION(status_cpu_saver_mode)$/;"	f
STATUS_FUNCTION	source/status.c	/^STATUS_FUNCTION(status_dcc)$/;"	f
STATUS_FUNCTION	source/status.c	/^STATUS_FUNCTION(status_dcc_all)$/;"	f
STATUS_FUNCTION	source/status.c	/^STATUS_FUNCTION(status_hold)$/;"	f
STATUS_FUNCTION	source/status.c	/^STATUS_FUNCTION(status_hold_lines)$/;"	f
STATUS_FUNCTION	source/status.c	/^STATUS_FUNCTION(status_holdmode)$/;"	f
STATUS_FUNCTION	source/status.c	/^STATUS_FUNCTION(status_insert_mode)$/;"	f
STATUS_FUNCTION	source/status.c	/^STATUS_FUNCTION(status_mail)$/;"	f
STATUS_FUNCTION	source/status.c	/^STATUS_FUNCTION(status_mode)$/;"	f
STATUS_FUNCTION	source/status.c	/^STATUS_FUNCTION(status_network)$/;"	f
STATUS_FUNCTION	source/status.c	/^STATUS_FUNCTION(status_nickname)$/;"	f
STATUS_FUNCTION	source/status.c	/^STATUS_FUNCTION(status_notify_windows)$/;"	f
STATUS_FUNCTION	source/status.c	/^STATUS_FUNCTION(status_null_function)$/;"	f
STATUS_FUNCTION	source/status.c	/^STATUS_FUNCTION(status_oper)$/;"	f
STATUS_FUNCTION	source/status.c	/^STATUS_FUNCTION(status_overwrite_mode)$/;"	f
STATUS_FUNCTION	source/status.c	/^STATUS_FUNCTION(status_percent)$/;"	f
STATUS_FUNCTION	source/status.c	/^STATUS_FUNCTION(status_position)$/;"	f
STATUS_FUNCTION	source/status.c	/^STATUS_FUNCTION(status_query_nick)$/;"	f
STATUS_FUNCTION	source/status.c	/^STATUS_FUNCTION(status_refnum)$/;"	f
STATUS_FUNCTION	source/status.c	/^STATUS_FUNCTION(status_refnum_real)$/;"	f
STATUS_FUNCTION	source/status.c	/^STATUS_FUNCTION(status_right_justify)$/;"	f
STATUS_FUNCTION	source/status.c	/^STATUS_FUNCTION(status_scroll_info)$/;"	f
STATUS_FUNCTION	source/status.c	/^STATUS_FUNCTION(status_scrollback)$/;"	f
STATUS_FUNCTION	source/status.c	/^STATUS_FUNCTION(status_server)$/;"	f
STATUS_FUNCTION	source/status.c	/^STATUS_FUNCTION(status_ssl)$/;"	f
STATUS_FUNCTION	source/status.c	/^STATUS_FUNCTION(status_swappable)$/;"	f
STATUS_FUNCTION	source/status.c	/^STATUS_FUNCTION(status_test)$/;"	f
STATUS_FUNCTION	source/status.c	/^STATUS_FUNCTION(status_umode)$/;"	f
STATUS_FUNCTION	source/status.c	/^STATUS_FUNCTION(status_user)$/;"	f
STATUS_FUNCTION	source/status.c	/^STATUS_FUNCTION(status_version)$/;"	f
STATUS_FUNCTION	source/status.c	/^STATUS_FUNCTION(status_voice)$/;"	f
STATUS_FUNCTION	source/status.c	/^STATUS_FUNCTION(status_window)$/;"	f
STATUS_FUNCTION	source/status.c	/^STATUS_FUNCTION(status_windowspec)$/;"	f
STATUS_FUNCTION	source/status.c	67;"	d	file:
STATUS_UPDATE_LIST	include/hook.h	/^	STATUS_UPDATE_LIST,$/;"	e	enum:HOOK_TYPES
STATUS_VARS	source/status.c	1031;"	d	file:
STDC_HEADERS	include/defs.h	70;"	d
STPCPY_DECLARED	acconfig.h	237;"	d
STR2INT	include/ircaux.h	270;"	d
STRCAT	source/expr2.c	/^	PLUS,		MINUS,		STRCAT,$/;"	e	enum:LEX	file:
STRCATEQ	source/expr2.c	/^			DXOREQ,		POWEREQ,	STRCATEQ,    STRPREEQ,$/;"	e	enum:LEX	file:
STREQ	test.c	/^	STREQ,$/;"	e	enum:token	file:
STREZ	test.c	/^	STREZ,$/;"	e	enum:token	file:
STRGT	test.c	/^	STRGT,$/;"	e	enum:token	file:
STRING	source/compat.c	77;"	d	file:
STRING_CHANNEL	source/parse.c	59;"	d	file:
STRIP_ALL_OFF	include/ircaux.h	237;"	d
STRIP_ALT_CHAR	include/ircaux.h	236;"	d
STRIP_BLINK	include/ircaux.h	234;"	d
STRIP_BOLD	include/ircaux.h	233;"	d
STRIP_COLOR	include/ircaux.h	230;"	d
STRIP_ITALIC	include/ircaux.h	240;"	d
STRIP_ND_SPACE	include/ircaux.h	235;"	d
STRIP_OTHER	include/ircaux.h	239;"	d
STRIP_REVERSE	include/ircaux.h	231;"	d
STRIP_UNDERLINE	include/ircaux.h	232;"	d
STRIP_UNPRINTABLE	include/ircaux.h	238;"	d
STRLEN	source/expr2.c	/^			UPLUS,		UMINUS,		STRLEN,$/;"	e	enum:LEX	file:
STRLT	test.c	/^	STRLT,$/;"	e	enum:token	file:
STRNE	test.c	/^	STRNE,$/;"	e	enum:token	file:
STRNUM	include/ircaux.h	272;"	d
STRNZ	test.c	/^	STRNZ,$/;"	e	enum:token	file:
STRPREEQ	source/expr2.c	/^			DXOREQ,		POWEREQ,	STRCATEQ,    STRPREEQ,$/;"	e	enum:LEX	file:
STR_VAR	include/vars.h	208;"	d
ST_NOTHING	source/screen.c	3164;"	d	file:
ST_SCREEN	source/screen.c	3165;"	d	file:
ST_TMUX	source/screen.c	3167;"	d	file:
ST_XTERM	source/screen.c	3166;"	d	file:
SUCCESS	source/gailib.c	39;"	d	file:
SUCCESS	source/gailib.c	503;"	d	file:
SUPPRESS_DEFAULT	source/hook.c	684;"	d	file:
SV2STR	source/perl.c	55;"	d	file:
SVR4	acconfig.h	155;"	d
SWAP	source/expr2.c	/^			SWAP,$/;"	e	enum:LEX	file:
SWITCH_CHANNELS_LIST	include/hook.h	/^	SWITCH_CHANNELS_LIST,$/;"	e	enum:HOOK_TYPES
SWITCH_QUERY_LIST	include/hook.h	/^	SWITCH_QUERY_LIST,$/;"	e	enum:HOOK_TYPES
SWITCH_WINDOWS_LIST	include/hook.h	/^	SWITCH_WINDOWS_LIST,$/;"	e	enum:HOOK_TYPES
SYMBOL	source/expr2.c	/^} SYMBOL;$/;"	t	typeref:struct:TOKEN_type	file:
SYS_SIGLIST_DECLARED	acconfig.h	294;"	d
SYS_SIGLIST_DECLARED	include/defs.h	248;"	d
SYS_SIGLIST_DECLARED	include/defs.h	73;"	d
Screen	include/screen.h	/^}	Screen;$/;"	t	typeref:struct:ScreenStru
ScreenStru	include/screen.h	/^typedef	struct	ScreenStru$/;"	s
Server	include/server.h	/^}	Server;$/;"	t	typeref:struct:__anon8
ServerInfo	include/server.h	/^typedef struct ServerInfo $/;"	s
ServerInfo	include/server.h	/^} ServerInfo;$/;"	t	typeref:struct:ServerInfo
Sigma0_256	source/sha2.c	204;"	d	file:
Sigma1_256	source/sha2.c	205;"	d	file:
Socket	source/network.c	/^int	Socket (int domain, int type, int protocol)$/;"	f
Stat	include/irc_std.h	/^typedef struct stat		Stat;$/;"	t	typeref:struct:stat
Status	include/status.h	/^} Status;$/;"	t	typeref:struct:status_stuff
Status_line	include/status.h	/^} Status_line;$/;"	t	typeref:struct:status_line
SvPV_nolen	source/perl.c	58;"	d	file:
Symbol	source/alias.c	/^}	Symbol;$/;"	t	typeref:struct:SymbolStru	file:
SymbolSet	source/alias.c	/^}	SymbolSet;$/;"	t	typeref:struct:SymbolSetStru	file:
SymbolSetStru	source/alias.c	/^typedef struct	SymbolSetStru$/;"	s	file:
SymbolStru	source/alias.c	/^typedef	struct	SymbolStru$/;"	s	file:
TBIND	source/keys.c	1346;"	d	file:
TBIND	source/keys.c	1359;"	d	file:
TCLCFLAGS	acconfig.h	372;"	d
TCLCFLAGS	include/defs.h	311;"	d
TCLLDFLAGS	acconfig.h	375;"	d
TCLLDFLAGS	include/defs.h	314;"	d
TERM_CAN_BLINK	include/termx.h	85;"	d
TERM_CAN_BOLD	include/termx.h	84;"	d
TERM_CAN_CLEAR	include/termx.h	74;"	d
TERM_CAN_CLREOL	include/termx.h	75;"	d
TERM_CAN_COLOR	include/termx.h	88;"	d
TERM_CAN_CUP	include/termx.h	73;"	d
TERM_CAN_DELETE	include/termx.h	79;"	d
TERM_CAN_DELLINES	include/termx.h	81;"	d
TERM_CAN_GCHAR	include/termx.h	89;"	d
TERM_CAN_INSERT	include/termx.h	80;"	d
TERM_CAN_INSLINES	include/termx.h	82;"	d
TERM_CAN_LEFT	include/termx.h	77;"	d
TERM_CAN_REPEAT	include/termx.h	83;"	d
TERM_CAN_REVERSE	include/termx.h	87;"	d
TERM_CAN_RIGHT	include/termx.h	76;"	d
TERM_CAN_SCROLL	include/termx.h	78;"	d
TERM_CAN_UNDL	include/termx.h	86;"	d
TERM_H_REQUIRES_CURSES_H	acconfig.h	411;"	d
TERM_SGR_ALTCHAR_OFF	include/termx.h	68;"	d
TERM_SGR_ALTCHAR_ON	include/termx.h	67;"	d
TERM_SGR_BACKGROUND	include/termx.h	65;"	d
TERM_SGR_BLINK_OFF	include/termx.h	57;"	d
TERM_SGR_BLINK_ON	include/termx.h	56;"	d
TERM_SGR_BOLD_OFF	include/termx.h	55;"	d
TERM_SGR_BOLD_ON	include/termx.h	54;"	d
TERM_SGR_FOREGROUND	include/termx.h	64;"	d
TERM_SGR_GCHAR	include/termx.h	66;"	d
TERM_SGR_ITALIC_OFF	include/termx.h	70;"	d
TERM_SGR_ITALIC_ON	include/termx.h	69;"	d
TERM_SGR_MAXVAL	include/termx.h	71;"	d
TERM_SGR_NORMAL	include/termx.h	62;"	d
TERM_SGR_RESET	include/termx.h	63;"	d
TERM_SGR_REV_OFF	include/termx.h	61;"	d
TERM_SGR_REV_ON	include/termx.h	60;"	d
TERM_SGR_UNDL_OFF	include/termx.h	59;"	d
TERM_SGR_UNDL_ON	include/termx.h	58;"	d
THIS_CHAR	source/input.c	198;"	d	file:
TI	source/term.c	/^struct	my_term	TI;$/;"	v	typeref:struct:my_term
TILDE	source/glob.c	105;"	d	file:
TIMER_LIST	include/hook.h	/^	TIMER_LIST,$/;"	e	enum:HOOK_TYPES
TIME_WITH_SYS_TIME	acconfig.h	137;"	d
TIME_WITH_SYS_TIME	include/defs.h	130;"	d
TIME_WITH_SYS_TIME	include/defs.h	76;"	d
TIOBUFSZ	source/term.c	1770;"	d	file:
TIO_H	include/tio.h	6;"	d
TI_OTG1	include/termx.h	/^	const char *TI_OTG1;	 \/* G1  \/ OTG1      single upper right *\/$/;"	m	struct:my_term
TI_OTG2	include/termx.h	/^	const char *TI_OTG2;	 \/* G2  \/ OTG2      single upper left *\/$/;"	m	struct:my_term
TI_OTG3	include/termx.h	/^	const char *TI_OTG3;	 \/* G3  \/ OTG3      single lower left *\/$/;"	m	struct:my_term
TI_OTG4	include/termx.h	/^	const char *TI_OTG4;	 \/* G4  \/ OTG4      single lower right *\/$/;"	m	struct:my_term
TI_OTGC	include/termx.h	/^	const char *TI_OTGC;	 \/* GC  \/ OTGC      single intersection *\/$/;"	m	struct:my_term
TI_OTGD	include/termx.h	/^	const char *TI_OTGD;	 \/* GD  \/ OTGD      tee pointing down *\/$/;"	m	struct:my_term
TI_OTGH	include/termx.h	/^	const char *TI_OTGH;	 \/* GH  \/ OTGH      single horizontal line *\/$/;"	m	struct:my_term
TI_OTGL	include/termx.h	/^	const char *TI_OTGL;	 \/* GL  \/ OTGL      tee pointing left *\/$/;"	m	struct:my_term
TI_OTGR	include/termx.h	/^	const char *TI_OTGR;	 \/* GR  \/ OTGR      tee pointing right *\/$/;"	m	struct:my_term
TI_OTGU	include/termx.h	/^	const char *TI_OTGU;	 \/* GU  \/ OTGU      tee pointing up *\/$/;"	m	struct:my_term
TI_OTGV	include/termx.h	/^	const char *TI_OTGV;	 \/* GV  \/ OTGV      single vertical line *\/$/;"	m	struct:my_term
TI_OTMT	include/termx.h	/^	int TI_OTMT;	 \/* MT  \/ OTMT      has meta key *\/$/;"	m	struct:my_term
TI_OTNL	include/termx.h	/^	int TI_OTNL;	 \/* NL  \/ OTNL      move down with \\n *\/$/;"	m	struct:my_term
TI_OTbc	include/termx.h	/^	const char *TI_OTbc;	 \/* bc  \/ OTbc      move left, if not ^H *\/$/;"	m	struct:my_term
TI_OTbs	include/termx.h	/^	int TI_OTbs;	 \/* bs  \/ OTbs      uses ^H to move left *\/$/;"	m	struct:my_term
TI_OTdB	include/termx.h	/^	int TI_OTdB;	 \/* dB  \/ OTdB      padding required for ^H *\/$/;"	m	struct:my_term
TI_OTdC	include/termx.h	/^	int TI_OTdC;	 \/* dC  \/ OTdC      pad needed for CR *\/$/;"	m	struct:my_term
TI_OTdN	include/termx.h	/^	int TI_OTdN;	 \/* dN  \/ OTdN      pad needed for LF *\/$/;"	m	struct:my_term
TI_OTdT	include/termx.h	/^	int TI_OTdT;	 \/* dT  \/ OTdT      padding required for ^I *\/$/;"	m	struct:my_term
TI_OTi2	include/termx.h	/^	const char *TI_OTi2;	 \/* i2  \/ OTi2      secondary initialization string *\/$/;"	m	struct:my_term
TI_OTkn	include/termx.h	/^	int TI_OTkn;	 \/* kn  \/ OTkn      count of function keys *\/$/;"	m	struct:my_term
TI_OTko	include/termx.h	/^	const char *TI_OTko;	 \/* ko  \/ OTko      list of self-mapped keycaps *\/$/;"	m	struct:my_term
TI_OTma	include/termx.h	/^	const char *TI_OTma;	 \/* ma  \/ OTma      map arrow keys rogue(1) motion keys *\/$/;"	m	struct:my_term
TI_OTnc	include/termx.h	/^	int TI_OTnc;	 \/* nc  \/ OTnc      no way to go to start of line *\/$/;"	m	struct:my_term
TI_OTnl	include/termx.h	/^	const char *TI_OTnl;	 \/* nl  \/ OTnl      use to move down *\/$/;"	m	struct:my_term
TI_OTns	include/termx.h	/^	int TI_OTns;	 \/* ns  \/ OTns      crt cannot scroll *\/$/;"	m	struct:my_term
TI_OTpt	include/termx.h	/^	int TI_OTpt;	 \/* pt  \/ OTpt      has 8-const char tabs invoked with ^I *\/$/;"	m	struct:my_term
TI_OTrs	include/termx.h	/^	const char *TI_OTrs;	 \/* rs  \/ OTrs      terminal reset string *\/$/;"	m	struct:my_term
TI_OTug	include/termx.h	/^	int TI_OTug;	 \/* ug  \/ OTug      number of blanks left by ul *\/$/;"	m	struct:my_term
TI_OTxr	include/termx.h	/^	int TI_OTxr;	 \/* xr  \/ OTxr      return clears the line *\/$/;"	m	struct:my_term
TI_acsc	include/termx.h	/^	const char *TI_acsc;	 \/* ac  \/ acsc      graphics charset pairs, based on vt100 *\/$/;"	m	struct:my_term
TI_am	include/termx.h	/^	int TI_am;	 \/* am  \/ am        terminal has automatic margins *\/$/;"	m	struct:my_term
TI_backcolors	include/termx.h	/^	const char *TI_backcolors[256];$/;"	m	struct:my_term
TI_bce	include/termx.h	/^	int TI_bce;	 \/* ut  \/ bce       screen erased with background color *\/$/;"	m	struct:my_term
TI_bel	include/termx.h	/^	const char *TI_bel;	 \/* bl  \/ bel       audible signal (bell) (P) *\/$/;"	m	struct:my_term
TI_bicr	include/termx.h	/^	const char *TI_bicr;	 \/* Yv  \/ bicr      Move to beginning of same row *\/$/;"	m	struct:my_term
TI_binel	include/termx.h	/^	const char *TI_binel;	 \/* Zz  \/ binel     Move to next row of the bit image *\/$/;"	m	struct:my_term
TI_birep	include/termx.h	/^	const char *TI_birep;	 \/* Xy  \/ birep     Repeat bit image cell #1 #2 times *\/$/;"	m	struct:my_term
TI_bitwin	include/termx.h	/^	int TI_bitwin;	 \/* Yo  \/ bitwin    number of passes for each bit-image row *\/$/;"	m	struct:my_term
TI_bitype	include/termx.h	/^	int TI_bitype;	 \/* Yp  \/ bitype    type of bit-image device *\/$/;"	m	struct:my_term
TI_blink	include/termx.h	/^	const char *TI_blink;	 \/* mb  \/ blink     turn on blinking *\/$/;"	m	struct:my_term
TI_bold	include/termx.h	/^	const char *TI_bold;	 \/* md  \/ bold      turn on bold (extra bright) mode *\/$/;"	m	struct:my_term
TI_box1	include/termx.h	/^	const char *TI_box1;	 \/* bx  \/ box1      box characters primary set *\/$/;"	m	struct:my_term
TI_btns	include/termx.h	/^	int TI_btns;	 \/* BT  \/ btns      number of buttons on mouse *\/$/;"	m	struct:my_term
TI_bufsz	include/termx.h	/^	int TI_bufsz;	 \/* Ya  \/ bufsz     numbers of bytes buffered before printing *\/$/;"	m	struct:my_term
TI_bw	include/termx.h	/^	int TI_bw;	 \/* bw  \/ bw        cub1 wraps from column 0 to last column *\/$/;"	m	struct:my_term
TI_cbt	include/termx.h	/^	const char *TI_cbt;	 \/* bt  \/ cbt       back tab (P) *\/$/;"	m	struct:my_term
TI_ccc	include/termx.h	/^	int TI_ccc;	 \/* cc  \/ ccc       terminal can re-define existing colors *\/$/;"	m	struct:my_term
TI_chr	include/termx.h	/^	const char *TI_chr;	 \/* ZC  \/ chr       Change horizontal resolution *\/$/;"	m	struct:my_term
TI_chts	include/termx.h	/^	int TI_chts;	 \/* HC  \/ chts      cursor is hard to see *\/$/;"	m	struct:my_term
TI_civis	include/termx.h	/^	const char *TI_civis;	 \/* vi  \/ civis     make cursor invisible *\/$/;"	m	struct:my_term
TI_clear	include/termx.h	/^	const char *TI_clear;	 \/* cl  \/ clear     clear screen and home cursor (P*) *\/$/;"	m	struct:my_term
TI_cmdch	include/termx.h	/^	const char *TI_cmdch;	 \/* CC  \/ cmdch     terminal settable cmd character in prototype !? *\/$/;"	m	struct:my_term
TI_cnorm	include/termx.h	/^	const char *TI_cnorm;	 \/* ve  \/ cnorm     make cursor appear normal (undo civis\/cvvis) *\/$/;"	m	struct:my_term
TI_colornm	include/termx.h	/^	const char *TI_colornm; \/* Yw  \/ colornm   Give name for color #1 *\/$/;"	m	struct:my_term
TI_colors	include/termx.h	/^	int TI_colors;	 \/* Co  \/ colors    maximum number of colors on screen *\/$/;"	m	struct:my_term
TI_cols	include/termx.h	/^	int TI_cols;	 \/* co  \/ cols      number of columns in a line *\/$/;"	m	struct:my_term
TI_cpi	include/termx.h	/^	const char *TI_cpi;	 \/* ZA  \/ cpi       Change number of characters per inch *\/$/;"	m	struct:my_term
TI_cpix	include/termx.h	/^	int TI_cpix;	 \/* YF  \/ cpix      changing character pitch changes resolution *\/$/;"	m	struct:my_term
TI_cps	include/termx.h	/^	int TI_cps;	 \/* Ym  \/ cps       print rate in characters per second *\/$/;"	m	struct:my_term
TI_cr	include/termx.h	/^	const char *TI_cr;	 \/* cr  \/ cr        carriage return (P*) (P*) *\/$/;"	m	struct:my_term
TI_crxm	include/termx.h	/^	int TI_crxm;	 \/* YB  \/ crxm      using cr turns off micro mode *\/$/;"	m	struct:my_term
TI_csin	include/termx.h	/^	const char *TI_csin;	 \/* ci  \/ csin      Init sequence for multiple codesets *\/$/;"	m	struct:my_term
TI_csnm	include/termx.h	/^	const char *TI_csnm;	 \/* Zy  \/ csnm      List of character set names *\/$/;"	m	struct:my_term
TI_csr	include/termx.h	/^	const char *TI_csr;	 \/* cs  \/ csr       change region to line #1 to line #2 (P) *\/$/;"	m	struct:my_term
TI_cub	include/termx.h	/^	const char *TI_cub;	 \/* LE  \/ cub       move #1 characters to the left (P) *\/$/;"	m	struct:my_term
TI_cub1	include/termx.h	/^	const char *TI_cub1;	 \/* le  \/ cub1      move left one space *\/$/;"	m	struct:my_term
TI_cud	include/termx.h	/^	const char *TI_cud;	 \/* DO  \/ cud       down #1 lines (P*) *\/$/;"	m	struct:my_term
TI_cud1	include/termx.h	/^	const char *TI_cud1;	 \/* do  \/ cud1      down one line *\/$/;"	m	struct:my_term
TI_cuf	include/termx.h	/^	const char *TI_cuf;	 \/* RI  \/ cuf       move #1 characters to the right (P*) *\/$/;"	m	struct:my_term
TI_cuf1	include/termx.h	/^	const char *TI_cuf1;	 \/* nd  \/ cuf1      non-destructive space (move right one space) *\/$/;"	m	struct:my_term
TI_cup	include/termx.h	/^	const char *TI_cup;	 \/* cm  \/ cup       move to row #1 columns #2 *\/$/;"	m	struct:my_term
TI_cuu	include/termx.h	/^	const char *TI_cuu;	 \/* UP  \/ cuu       up #1 lines (P*) *\/$/;"	m	struct:my_term
TI_cuu1	include/termx.h	/^	const char *TI_cuu1;	 \/* up  \/ cuu1      up one line *\/$/;"	m	struct:my_term
TI_cvr	include/termx.h	/^	const char *TI_cvr;	 \/* ZD  \/ cvr       Change vertical resolution *\/$/;"	m	struct:my_term
TI_cvvis	include/termx.h	/^	const char *TI_cvvis;	 \/* vs  \/ cvvis     make cursor very visible *\/$/;"	m	struct:my_term
TI_cwin	include/termx.h	/^	const char *TI_cwin;	 \/* CW  \/ cwin      define a window #1 from #2,#3 to #4,#5 *\/$/;"	m	struct:my_term
TI_da	include/termx.h	/^	int TI_da;	 \/* da  \/ da        display may be retained above the screen *\/$/;"	m	struct:my_term
TI_daisy	include/termx.h	/^	int TI_daisy;	 \/* YC  \/ daisy     printer needs operator to change character set *\/$/;"	m	struct:my_term
TI_db	include/termx.h	/^	int TI_db;	 \/* db  \/ db        display may be retained below the screen *\/$/;"	m	struct:my_term
TI_dch	include/termx.h	/^	const char *TI_dch;	 \/* DC  \/ dch       delete #1 characters (P*) *\/$/;"	m	struct:my_term
TI_dch1	include/termx.h	/^	const char *TI_dch1;	 \/* dc  \/ dch1      delete character (P*) *\/$/;"	m	struct:my_term
TI_dclk	include/termx.h	/^	const char *TI_dclk;	 \/* DK  \/ dclk      display clock at (#1,#2) *\/$/;"	m	struct:my_term
TI_defbi	include/termx.h	/^	const char *TI_defbi;	 \/* Yx  \/ defbi     Define rectangualar bit image region *\/$/;"	m	struct:my_term
TI_defc	include/termx.h	/^	const char *TI_defc;	 \/* ZE  \/ defc      Define a character *\/$/;"	m	struct:my_term
TI_devt	include/termx.h	/^	const char *TI_devt;	 \/* dv  \/ devt      Indicate language\/codeset support *\/$/;"	m	struct:my_term
TI_dial	include/termx.h	/^	const char *TI_dial;	 \/* DI  \/ dial      dial number #1 *\/$/;"	m	struct:my_term
TI_dim	include/termx.h	/^	const char *TI_dim;	 \/* mh  \/ dim       turn on half-bright mode *\/$/;"	m	struct:my_term
TI_dispc	include/termx.h	/^	const char *TI_dispc;	 \/* S1  \/ dispc     Display PC character *\/$/;"	m	struct:my_term
TI_dl	include/termx.h	/^	const char *TI_dl;	 \/* DL  \/ dl        delete #1 lines (P*) *\/$/;"	m	struct:my_term
TI_dl1	include/termx.h	/^	const char *TI_dl1;	 \/* dl  \/ dl1       delete line (P*) *\/$/;"	m	struct:my_term
TI_docr	include/termx.h	/^	const char *TI_docr;	 \/* Zw  \/ docr      Printing any of these characters causes CR *\/$/;"	m	struct:my_term
TI_dsl	include/termx.h	/^	const char *TI_dsl;	 \/* ds  \/ dsl       disable status line *\/$/;"	m	struct:my_term
TI_ech	include/termx.h	/^	const char *TI_ech;	 \/* ec  \/ ech       erase #1 characters (P) *\/$/;"	m	struct:my_term
TI_ed	include/termx.h	/^	const char *TI_ed;	 \/* cd  \/ ed        clear to end of screen (P*) *\/$/;"	m	struct:my_term
TI_ehhlm	include/termx.h	/^	const char *TI_ehhlm;	 \/* Xh  \/ ehhlm     Enter horizontal highlight mode *\/$/;"	m	struct:my_term
TI_el	include/termx.h	/^	const char *TI_el;	 \/* ce  \/ el        clear to end of line (P) *\/$/;"	m	struct:my_term
TI_el1	include/termx.h	/^	const char *TI_el1;	 \/* cb  \/ el1       Clear to beginning of line *\/$/;"	m	struct:my_term
TI_elhlm	include/termx.h	/^	const char *TI_elhlm;	 \/* Xl  \/ elhlm     Enter left highlight mode *\/$/;"	m	struct:my_term
TI_elohlm	include/termx.h	/^	const char *TI_elohlm; \/* Xo  \/ elohlm    Enter low highlight mode *\/$/;"	m	struct:my_term
TI_enacs	include/termx.h	/^	const char *TI_enacs;	 \/* eA  \/ enacs     enable alternate char set *\/$/;"	m	struct:my_term
TI_endbi	include/termx.h	/^	const char *TI_endbi;	 \/* Yy  \/ endbi     End a bit-image region *\/$/;"	m	struct:my_term
TI_eo	include/termx.h	/^	int TI_eo;	 \/* eo  \/ eo        can erase overstrikes with a blank *\/$/;"	m	struct:my_term
TI_erhlm	include/termx.h	/^	const char *TI_erhlm;	 \/* Xr  \/ erhlm     Enter right highlight mode *\/$/;"	m	struct:my_term
TI_eslok	include/termx.h	/^	int TI_eslok;	 \/* es  \/ eslok     escape can be used on the status line *\/$/;"	m	struct:my_term
TI_ethlm	include/termx.h	/^	const char *TI_ethlm;	 \/* Xt  \/ ethlm     Enter top highlight mode *\/$/;"	m	struct:my_term
TI_evhlm	include/termx.h	/^	const char *TI_evhlm;	 \/* Xv  \/ evhlm     Enter vertical highlight mode *\/$/;"	m	struct:my_term
TI_ff	include/termx.h	/^	const char *TI_ff;	 \/* ff  \/ ff        hardcopy terminal page eject (P*) *\/$/;"	m	struct:my_term
TI_flash	include/termx.h	/^	const char *TI_flash;	 \/* vb  \/ flash     visible bell (may not move cursor) *\/$/;"	m	struct:my_term
TI_fln	include/termx.h	/^	const char *TI_fln;	 \/* Lf  \/ fln       label format *\/$/;"	m	struct:my_term
TI_forecolors	include/termx.h	/^	const char *TI_forecolors[256];$/;"	m	struct:my_term
TI_fsl	include/termx.h	/^	const char *TI_fsl;	 \/* fs  \/ fsl       return from status line *\/$/;"	m	struct:my_term
TI_getm	include/termx.h	/^	const char *TI_getm;	 \/* Gm  \/ getm      Curses should get button events *\/$/;"	m	struct:my_term
TI_gn	include/termx.h	/^	int TI_gn;	 \/* gn  \/ gn        generic line type *\/$/;"	m	struct:my_term
TI_hc	include/termx.h	/^	int TI_hc;	 \/* hc  \/ hc        hardcopy terminal *\/$/;"	m	struct:my_term
TI_hd	include/termx.h	/^	const char *TI_hd;	 \/* hd  \/ hd        half a line down *\/$/;"	m	struct:my_term
TI_hls	include/termx.h	/^	int TI_hls;	 \/* hl  \/ hls       terminal uses only HLS color notation (Tektronix) *\/$/;"	m	struct:my_term
TI_home	include/termx.h	/^	const char *TI_home;	 \/* ho  \/ home      home cursor (if no cup) *\/$/;"	m	struct:my_term
TI_hook	include/termx.h	/^	const char *TI_hook;	 \/* fh  \/ hook      flash switch hook *\/$/;"	m	struct:my_term
TI_hpa	include/termx.h	/^	const char *TI_hpa;	 \/* ch  \/ hpa       horizontal position #1, absolute (P) *\/$/;"	m	struct:my_term
TI_hs	include/termx.h	/^	int TI_hs;	 \/* hs  \/ hs        has extra status line *\/$/;"	m	struct:my_term
TI_ht	include/termx.h	/^	const char *TI_ht;	 \/* ta  \/ ht        tab to next 8-space hardware tab stop *\/$/;"	m	struct:my_term
TI_hts	include/termx.h	/^	const char *TI_hts;	 \/* st  \/ hts       set a tab in every row, current columns *\/$/;"	m	struct:my_term
TI_hu	include/termx.h	/^	const char *TI_hu;	 \/* hu  \/ hu        half a line up *\/$/;"	m	struct:my_term
TI_hup	include/termx.h	/^	const char *TI_hup;	 \/* HU  \/ hup       hang-up phone *\/$/;"	m	struct:my_term
TI_hz	include/termx.h	/^	int TI_hz;	 \/* hz  \/ hz        can't print ~'s (hazeltine) *\/$/;"	m	struct:my_term
TI_ich	include/termx.h	/^	const char *TI_ich;	 \/* IC  \/ ich       insert #1 characters (P*) *\/$/;"	m	struct:my_term
TI_ich1	include/termx.h	/^	const char *TI_ich1;	 \/* ic  \/ ich1      insert character (P) *\/$/;"	m	struct:my_term
TI_if	include/termx.h	/^	const char *TI_if;	 \/* if  \/ if        name of initialization file *\/$/;"	m	struct:my_term
TI_il	include/termx.h	/^	const char *TI_il;	 \/* AL  \/ il        insert #1 lines (P*) *\/$/;"	m	struct:my_term
TI_il1	include/termx.h	/^	const char *TI_il1;	 \/* al  \/ il1       insert line (P*) *\/$/;"	m	struct:my_term
TI_in	include/termx.h	/^	int TI_in;	 \/* in  \/ in        insert mode distinguishes nulls *\/$/;"	m	struct:my_term
TI_ind	include/termx.h	/^	const char *TI_ind;	 \/* sf  \/ ind       scroll text up (P) *\/$/;"	m	struct:my_term
TI_indn	include/termx.h	/^	const char *TI_indn;	 \/* SF  \/ indn      scroll forward #1 lines (P) *\/$/;"	m	struct:my_term
TI_initc	include/termx.h	/^	const char *TI_initc;	 \/* Ic  \/ initc     initialize color #1 to (#2,#3,#4) *\/$/;"	m	struct:my_term
TI_initp	include/termx.h	/^	const char *TI_initp;	 \/* Ip  \/ initp     Initialize color pair #1 to fg=(#2,#3,#4), bg=(#5,#6,#7) *\/$/;"	m	struct:my_term
TI_invis	include/termx.h	/^	const char *TI_invis;	 \/* mk  \/ invis     turn on blank mode (characters invisible) *\/$/;"	m	struct:my_term
TI_ip	include/termx.h	/^	const char *TI_ip;	 \/* ip  \/ ip        insert padding after inserted character *\/$/;"	m	struct:my_term
TI_iprog	include/termx.h	/^	const char *TI_iprog;	 \/* iP  \/ iprog     path name of program for initialization *\/$/;"	m	struct:my_term
TI_is1	include/termx.h	/^	const char *TI_is1;	 \/* i1  \/ is1       initialization string *\/$/;"	m	struct:my_term
TI_is2	include/termx.h	/^	const char *TI_is2;	 \/* is  \/ is2       initialization string *\/$/;"	m	struct:my_term
TI_is3	include/termx.h	/^	const char *TI_is3;	 \/* i3  \/ is3       initialization string *\/$/;"	m	struct:my_term
TI_it	include/termx.h	/^	int TI_it;	 \/* it  \/ it        tabs initially every # spaces *\/$/;"	m	struct:my_term
TI_kBEG	include/termx.h	/^	const char *TI_kBEG;	 \/* &9  \/ kBEG      shifted begin key *\/$/;"	m	struct:my_term
TI_kCAN	include/termx.h	/^	const char *TI_kCAN;	 \/* &0  \/ kCAN      shifted cancel key *\/$/;"	m	struct:my_term
TI_kCMD	include/termx.h	/^	const char *TI_kCMD;	 \/* *1  \/ kCMD      shifted command key *\/$/;"	m	struct:my_term
TI_kCPY	include/termx.h	/^	const char *TI_kCPY;	 \/* *2  \/ kCPY      shifted copy key *\/$/;"	m	struct:my_term
TI_kCRT	include/termx.h	/^	const char *TI_kCRT;	 \/* *3  \/ kCRT      shifted create key *\/$/;"	m	struct:my_term
TI_kDC	include/termx.h	/^	const char *TI_kDC;	 \/* *4  \/ kDC       shifted delete-character key *\/$/;"	m	struct:my_term
TI_kDL	include/termx.h	/^	const char *TI_kDL;	 \/* *5  \/ kDL       shifted delete-line key *\/$/;"	m	struct:my_term
TI_kEND	include/termx.h	/^	const char *TI_kEND;	 \/* *7  \/ kEND      shifted end key *\/$/;"	m	struct:my_term
TI_kEOL	include/termx.h	/^	const char *TI_kEOL;	 \/* *8  \/ kEOL      shifted clear-to-end-of-line key *\/$/;"	m	struct:my_term
TI_kEXT	include/termx.h	/^	const char *TI_kEXT;	 \/* *9  \/ kEXT      shifted exit key *\/$/;"	m	struct:my_term
TI_kFND	include/termx.h	/^	const char *TI_kFND;	 \/* *0  \/ kFND      shifted find key *\/$/;"	m	struct:my_term
TI_kHLP	include/termx.h	/^	const char *TI_kHLP;	 \/* #1  \/ kHLP      shifted help key *\/$/;"	m	struct:my_term
TI_kHOM	include/termx.h	/^	const char *TI_kHOM;	 \/* #2  \/ kHOM      shifted home key *\/$/;"	m	struct:my_term
TI_kIC	include/termx.h	/^	const char *TI_kIC;	 \/* #3  \/ kIC       shifted insert-character key *\/$/;"	m	struct:my_term
TI_kLFT	include/termx.h	/^	const char *TI_kLFT;	 \/* #4  \/ kLFT      shifted left-arrow key *\/$/;"	m	struct:my_term
TI_kMOV	include/termx.h	/^	const char *TI_kMOV;	 \/* %b  \/ kMOV      shifted move key *\/$/;"	m	struct:my_term
TI_kMSG	include/termx.h	/^	const char *TI_kMSG;	 \/* %a  \/ kMSG      shifted message key *\/$/;"	m	struct:my_term
TI_kNXT	include/termx.h	/^	const char *TI_kNXT;	 \/* %c  \/ kNXT      shifted next key *\/$/;"	m	struct:my_term
TI_kOPT	include/termx.h	/^	const char *TI_kOPT;	 \/* %d  \/ kOPT      shifted options key *\/$/;"	m	struct:my_term
TI_kPRT	include/termx.h	/^	const char *TI_kPRT;	 \/* %f  \/ kPRT      shifted print key *\/$/;"	m	struct:my_term
TI_kPRV	include/termx.h	/^	const char *TI_kPRV;	 \/* %e  \/ kPRV      shifted previous key *\/$/;"	m	struct:my_term
TI_kRDO	include/termx.h	/^	const char *TI_kRDO;	 \/* %g  \/ kRDO      shifted redo key *\/$/;"	m	struct:my_term
TI_kRES	include/termx.h	/^	const char *TI_kRES;	 \/* %j  \/ kRES      shifted resume key *\/$/;"	m	struct:my_term
TI_kRIT	include/termx.h	/^	const char *TI_kRIT;	 \/* %i  \/ kRIT      shifted right-arrow key *\/$/;"	m	struct:my_term
TI_kRPL	include/termx.h	/^	const char *TI_kRPL;	 \/* %h  \/ kRPL      shifted replace key *\/$/;"	m	struct:my_term
TI_kSAV	include/termx.h	/^	const char *TI_kSAV;	 \/* !1  \/ kSAV      shifted save key *\/$/;"	m	struct:my_term
TI_kSPD	include/termx.h	/^	const char *TI_kSPD;	 \/* !2  \/ kSPD      shifted suspend key *\/$/;"	m	struct:my_term
TI_kUND	include/termx.h	/^	const char *TI_kUND;	 \/* !3  \/ kUND      shifted undo key *\/$/;"	m	struct:my_term
TI_ka1	include/termx.h	/^	const char *TI_ka1;	 \/* K1  \/ ka1       upper left of keypad *\/$/;"	m	struct:my_term
TI_ka3	include/termx.h	/^	const char *TI_ka3;	 \/* K3  \/ ka3       upper right of keypad *\/$/;"	m	struct:my_term
TI_kb2	include/termx.h	/^	const char *TI_kb2;	 \/* K2  \/ kb2       center of keypad *\/$/;"	m	struct:my_term
TI_kbeg	include/termx.h	/^	const char *TI_kbeg;	 \/* @1  \/ kbeg      begin key *\/$/;"	m	struct:my_term
TI_kbs	include/termx.h	/^	const char *TI_kbs;	 \/* kb  \/ kbs       backspace key *\/$/;"	m	struct:my_term
TI_kc1	include/termx.h	/^	const char *TI_kc1;	 \/* K4  \/ kc1       lower left of keypad *\/$/;"	m	struct:my_term
TI_kc3	include/termx.h	/^	const char *TI_kc3;	 \/* K5  \/ kc3       lower right of keypad *\/$/;"	m	struct:my_term
TI_kcan	include/termx.h	/^	const char *TI_kcan;	 \/* @2  \/ kcan      cancel key *\/$/;"	m	struct:my_term
TI_kcbt	include/termx.h	/^	const char *TI_kcbt;	 \/* kB  \/ kcbt      back-tab key *\/$/;"	m	struct:my_term
TI_kclo	include/termx.h	/^	const char *TI_kclo;	 \/* @3  \/ kclo      close key *\/$/;"	m	struct:my_term
TI_kclr	include/termx.h	/^	const char *TI_kclr;	 \/* kC  \/ kclr      clear-screen or erase key *\/$/;"	m	struct:my_term
TI_kcmd	include/termx.h	/^	const char *TI_kcmd;	 \/* @4  \/ kcmd      command key *\/$/;"	m	struct:my_term
TI_kcpy	include/termx.h	/^	const char *TI_kcpy;	 \/* @5  \/ kcpy      copy key *\/$/;"	m	struct:my_term
TI_kcrt	include/termx.h	/^	const char *TI_kcrt;	 \/* @6  \/ kcrt      create key *\/$/;"	m	struct:my_term
TI_kctab	include/termx.h	/^	const char *TI_kctab;	 \/* kt  \/ kctab     clear-tab key *\/$/;"	m	struct:my_term
TI_kcub1	include/termx.h	/^	const char *TI_kcub1;	 \/* kl  \/ kcub1     left-arrow key *\/$/;"	m	struct:my_term
TI_kcud1	include/termx.h	/^	const char *TI_kcud1;	 \/* kd  \/ kcud1     down-arrow key *\/$/;"	m	struct:my_term
TI_kcuf1	include/termx.h	/^	const char *TI_kcuf1;	 \/* kr  \/ kcuf1     right-arrow key *\/$/;"	m	struct:my_term
TI_kcuu1	include/termx.h	/^	const char *TI_kcuu1;	 \/* ku  \/ kcuu1     up-arrow key *\/$/;"	m	struct:my_term
TI_kdch1	include/termx.h	/^	const char *TI_kdch1;	 \/* kD  \/ kdch1     delete-character key *\/$/;"	m	struct:my_term
TI_kdl1	include/termx.h	/^	const char *TI_kdl1;	 \/* kL  \/ kdl1      delete-line key *\/$/;"	m	struct:my_term
TI_ked	include/termx.h	/^	const char *TI_ked;	 \/* kS  \/ ked       clear-to-end-of-screen key *\/$/;"	m	struct:my_term
TI_kel	include/termx.h	/^	const char *TI_kel;	 \/* kE  \/ kel       clear-to-end-of-line key *\/$/;"	m	struct:my_term
TI_kend	include/termx.h	/^	const char *TI_kend;	 \/* @7  \/ kend      end key *\/$/;"	m	struct:my_term
TI_kent	include/termx.h	/^	const char *TI_kent;	 \/* @8  \/ kent      enter\/send key *\/$/;"	m	struct:my_term
TI_kext	include/termx.h	/^	const char *TI_kext;	 \/* @9  \/ kext      exit key *\/$/;"	m	struct:my_term
TI_kf0	include/termx.h	/^	const char *TI_kf0;	 \/* k0  \/ kf0       F0 function key *\/$/;"	m	struct:my_term
TI_kf1	include/termx.h	/^	const char *TI_kf1;	 \/* k1  \/ kf1       F1 function key *\/$/;"	m	struct:my_term
TI_kf10	include/termx.h	/^	const char *TI_kf10;	 \/* k;  \/ kf10      F10 function key *\/$/;"	m	struct:my_term
TI_kf11	include/termx.h	/^	const char *TI_kf11;	 \/* F1  \/ kf11      F11 function key *\/$/;"	m	struct:my_term
TI_kf12	include/termx.h	/^	const char *TI_kf12;	 \/* F2  \/ kf12      F12 function key *\/$/;"	m	struct:my_term
TI_kf13	include/termx.h	/^	const char *TI_kf13;	 \/* F3  \/ kf13      F13 function key *\/$/;"	m	struct:my_term
TI_kf14	include/termx.h	/^	const char *TI_kf14;	 \/* F4  \/ kf14      F14 function key *\/$/;"	m	struct:my_term
TI_kf15	include/termx.h	/^	const char *TI_kf15;	 \/* F5  \/ kf15      F15 function key *\/$/;"	m	struct:my_term
TI_kf16	include/termx.h	/^	const char *TI_kf16;	 \/* F6  \/ kf16      F16 function key *\/$/;"	m	struct:my_term
TI_kf17	include/termx.h	/^	const char *TI_kf17;	 \/* F7  \/ kf17      F17 function key *\/$/;"	m	struct:my_term
TI_kf18	include/termx.h	/^	const char *TI_kf18;	 \/* F8  \/ kf18      F18 function key *\/$/;"	m	struct:my_term
TI_kf19	include/termx.h	/^	const char *TI_kf19;	 \/* F9  \/ kf19      F19 function key *\/$/;"	m	struct:my_term
TI_kf2	include/termx.h	/^	const char *TI_kf2;	 \/* k2  \/ kf2       F2 function key *\/$/;"	m	struct:my_term
TI_kf20	include/termx.h	/^	const char *TI_kf20;	 \/* FA  \/ kf20      F20 function key *\/$/;"	m	struct:my_term
TI_kf21	include/termx.h	/^	const char *TI_kf21;	 \/* FB  \/ kf21      F21 function key *\/$/;"	m	struct:my_term
TI_kf22	include/termx.h	/^	const char *TI_kf22;	 \/* FC  \/ kf22      F22 function key *\/$/;"	m	struct:my_term
TI_kf23	include/termx.h	/^	const char *TI_kf23;	 \/* FD  \/ kf23      F23 function key *\/$/;"	m	struct:my_term
TI_kf24	include/termx.h	/^	const char *TI_kf24;	 \/* FE  \/ kf24      F24 function key *\/$/;"	m	struct:my_term
TI_kf25	include/termx.h	/^	const char *TI_kf25;	 \/* FF  \/ kf25      F25 function key *\/$/;"	m	struct:my_term
TI_kf26	include/termx.h	/^	const char *TI_kf26;	 \/* FG  \/ kf26      F26 function key *\/$/;"	m	struct:my_term
TI_kf27	include/termx.h	/^	const char *TI_kf27;	 \/* FH  \/ kf27      F27 function key *\/$/;"	m	struct:my_term
TI_kf28	include/termx.h	/^	const char *TI_kf28;	 \/* FI  \/ kf28      F28 function key *\/$/;"	m	struct:my_term
TI_kf29	include/termx.h	/^	const char *TI_kf29;	 \/* FJ  \/ kf29      F29 function key *\/$/;"	m	struct:my_term
TI_kf3	include/termx.h	/^	const char *TI_kf3;	 \/* k3  \/ kf3       F3 function key *\/$/;"	m	struct:my_term
TI_kf30	include/termx.h	/^	const char *TI_kf30;	 \/* FK  \/ kf30      F30 function key *\/$/;"	m	struct:my_term
TI_kf31	include/termx.h	/^	const char *TI_kf31;	 \/* FL  \/ kf31      F31 function key *\/$/;"	m	struct:my_term
TI_kf32	include/termx.h	/^	const char *TI_kf32;	 \/* FM  \/ kf32      F32 function key *\/$/;"	m	struct:my_term
TI_kf33	include/termx.h	/^	const char *TI_kf33;	 \/* FN  \/ kf33      F33 function key *\/$/;"	m	struct:my_term
TI_kf34	include/termx.h	/^	const char *TI_kf34;	 \/* FO  \/ kf34      F34 function key *\/$/;"	m	struct:my_term
TI_kf35	include/termx.h	/^	const char *TI_kf35;	 \/* FP  \/ kf35      F35 function key *\/$/;"	m	struct:my_term
TI_kf36	include/termx.h	/^	const char *TI_kf36;	 \/* FQ  \/ kf36      F36 function key *\/$/;"	m	struct:my_term
TI_kf37	include/termx.h	/^	const char *TI_kf37;	 \/* FR  \/ kf37      F37 function key *\/$/;"	m	struct:my_term
TI_kf38	include/termx.h	/^	const char *TI_kf38;	 \/* FS  \/ kf38      F38 function key *\/$/;"	m	struct:my_term
TI_kf39	include/termx.h	/^	const char *TI_kf39;	 \/* FT  \/ kf39      F39 function key *\/$/;"	m	struct:my_term
TI_kf4	include/termx.h	/^	const char *TI_kf4;	 \/* k4  \/ kf4       F4 function key *\/$/;"	m	struct:my_term
TI_kf40	include/termx.h	/^	const char *TI_kf40;	 \/* FU  \/ kf40      F40 function key *\/$/;"	m	struct:my_term
TI_kf41	include/termx.h	/^	const char *TI_kf41;	 \/* FV  \/ kf41      F41 function key *\/$/;"	m	struct:my_term
TI_kf42	include/termx.h	/^	const char *TI_kf42;	 \/* FW  \/ kf42      F42 function key *\/$/;"	m	struct:my_term
TI_kf43	include/termx.h	/^	const char *TI_kf43;	 \/* FX  \/ kf43      F43 function key *\/$/;"	m	struct:my_term
TI_kf44	include/termx.h	/^	const char *TI_kf44;	 \/* FY  \/ kf44      F44 function key *\/$/;"	m	struct:my_term
TI_kf45	include/termx.h	/^	const char *TI_kf45;	 \/* FZ  \/ kf45      F45 function key *\/$/;"	m	struct:my_term
TI_kf46	include/termx.h	/^	const char *TI_kf46;	 \/* Fa  \/ kf46      F46 function key *\/$/;"	m	struct:my_term
TI_kf47	include/termx.h	/^	const char *TI_kf47;	 \/* Fb  \/ kf47      F47 function key *\/$/;"	m	struct:my_term
TI_kf48	include/termx.h	/^	const char *TI_kf48;	 \/* Fc  \/ kf48      F48 function key *\/$/;"	m	struct:my_term
TI_kf49	include/termx.h	/^	const char *TI_kf49;	 \/* Fd  \/ kf49      F49 function key *\/$/;"	m	struct:my_term
TI_kf5	include/termx.h	/^	const char *TI_kf5;	 \/* k5  \/ kf5       F5 function key *\/$/;"	m	struct:my_term
TI_kf50	include/termx.h	/^	const char *TI_kf50;	 \/* Fe  \/ kf50      F50 function key *\/$/;"	m	struct:my_term
TI_kf51	include/termx.h	/^	const char *TI_kf51;	 \/* Ff  \/ kf51      F51 function key *\/$/;"	m	struct:my_term
TI_kf52	include/termx.h	/^	const char *TI_kf52;	 \/* Fg  \/ kf52      F52 function key *\/$/;"	m	struct:my_term
TI_kf53	include/termx.h	/^	const char *TI_kf53;	 \/* Fh  \/ kf53      F53 function key *\/$/;"	m	struct:my_term
TI_kf54	include/termx.h	/^	const char *TI_kf54;	 \/* Fi  \/ kf54      F54 function key *\/$/;"	m	struct:my_term
TI_kf55	include/termx.h	/^	const char *TI_kf55;	 \/* Fj  \/ kf55      F55 function key *\/$/;"	m	struct:my_term
TI_kf56	include/termx.h	/^	const char *TI_kf56;	 \/* Fk  \/ kf56      F56 function key *\/$/;"	m	struct:my_term
TI_kf57	include/termx.h	/^	const char *TI_kf57;	 \/* Fl  \/ kf57      F57 function key *\/$/;"	m	struct:my_term
TI_kf58	include/termx.h	/^	const char *TI_kf58;	 \/* Fm  \/ kf58      F58 function key *\/$/;"	m	struct:my_term
TI_kf59	include/termx.h	/^	const char *TI_kf59;	 \/* Fn  \/ kf59      F59 function key *\/$/;"	m	struct:my_term
TI_kf6	include/termx.h	/^	const char *TI_kf6;	 \/* k6  \/ kf6       F6 function key *\/$/;"	m	struct:my_term
TI_kf60	include/termx.h	/^	const char *TI_kf60;	 \/* Fo  \/ kf60      F60 function key *\/$/;"	m	struct:my_term
TI_kf61	include/termx.h	/^	const char *TI_kf61;	 \/* Fp  \/ kf61      F61 function key *\/$/;"	m	struct:my_term
TI_kf62	include/termx.h	/^	const char *TI_kf62;	 \/* Fq  \/ kf62      F62 function key *\/$/;"	m	struct:my_term
TI_kf63	include/termx.h	/^	const char *TI_kf63;	 \/* Fr  \/ kf63      F63 function key *\/$/;"	m	struct:my_term
TI_kf7	include/termx.h	/^	const char *TI_kf7;	 \/* k7  \/ kf7       F7 function key *\/$/;"	m	struct:my_term
TI_kf8	include/termx.h	/^	const char *TI_kf8;	 \/* k8  \/ kf8       F8 function key *\/$/;"	m	struct:my_term
TI_kf9	include/termx.h	/^	const char *TI_kf9;	 \/* k9  \/ kf9       F9 function key *\/$/;"	m	struct:my_term
TI_kfnd	include/termx.h	/^	const char *TI_kfnd;	 \/* @0  \/ kfnd      find key *\/$/;"	m	struct:my_term
TI_khlp	include/termx.h	/^	const char *TI_khlp;	 \/* %1  \/ khlp      help key *\/$/;"	m	struct:my_term
TI_khome	include/termx.h	/^	const char *TI_khome;	 \/* kh  \/ khome     home key *\/$/;"	m	struct:my_term
TI_khts	include/termx.h	/^	const char *TI_khts;	 \/* kT  \/ khts      set-tab key *\/$/;"	m	struct:my_term
TI_kich1	include/termx.h	/^	const char *TI_kich1;	 \/* kI  \/ kich1     insert-character key *\/$/;"	m	struct:my_term
TI_kil1	include/termx.h	/^	const char *TI_kil1;	 \/* kA  \/ kil1      insert-line key *\/$/;"	m	struct:my_term
TI_kind	include/termx.h	/^	const char *TI_kind;	 \/* kF  \/ kind      scroll-forward key *\/$/;"	m	struct:my_term
TI_kll	include/termx.h	/^	const char *TI_kll;	 \/* kH  \/ kll       lower-left key (home down) *\/$/;"	m	struct:my_term
TI_km	include/termx.h	/^	int TI_km;	 \/* km  \/ km        Has a meta key (shift, sets parity bit) *\/$/;"	m	struct:my_term
TI_kmous	include/termx.h	/^	const char *TI_kmous;	 \/* Km  \/ kmous     Mouse event has occurred *\/$/;"	m	struct:my_term
TI_kmov	include/termx.h	/^	const char *TI_kmov;	 \/* %4  \/ kmov      move key *\/$/;"	m	struct:my_term
TI_kmrk	include/termx.h	/^	const char *TI_kmrk;	 \/* %2  \/ kmrk      mark key *\/$/;"	m	struct:my_term
TI_kmsg	include/termx.h	/^	const char *TI_kmsg;	 \/* %3  \/ kmsg      message key *\/$/;"	m	struct:my_term
TI_knp	include/termx.h	/^	const char *TI_knp;	 \/* kN  \/ knp       next-page key *\/$/;"	m	struct:my_term
TI_knxt	include/termx.h	/^	const char *TI_knxt;	 \/* %5  \/ knxt      next key *\/$/;"	m	struct:my_term
TI_kopn	include/termx.h	/^	const char *TI_kopn;	 \/* %6  \/ kopn      open key *\/$/;"	m	struct:my_term
TI_kopt	include/termx.h	/^	const char *TI_kopt;	 \/* %7  \/ kopt      options key *\/$/;"	m	struct:my_term
TI_kpp	include/termx.h	/^	const char *TI_kpp;	 \/* kP  \/ kpp       previous-page key *\/$/;"	m	struct:my_term
TI_kprt	include/termx.h	/^	const char *TI_kprt;	 \/* %9  \/ kprt      print key *\/$/;"	m	struct:my_term
TI_kprv	include/termx.h	/^	const char *TI_kprv;	 \/* %8  \/ kprv      previous key *\/$/;"	m	struct:my_term
TI_krdo	include/termx.h	/^	const char *TI_krdo;	 \/* %0  \/ krdo      redo key *\/$/;"	m	struct:my_term
TI_kref	include/termx.h	/^	const char *TI_kref;	 \/* &1  \/ kref      reference key *\/$/;"	m	struct:my_term
TI_kres	include/termx.h	/^	const char *TI_kres;	 \/* &5  \/ kres      resume key *\/$/;"	m	struct:my_term
TI_krfr	include/termx.h	/^	const char *TI_krfr;	 \/* &2  \/ krfr      refresh key *\/$/;"	m	struct:my_term
TI_kri	include/termx.h	/^	const char *TI_kri;	 \/* kR  \/ kri       scroll-backward key *\/$/;"	m	struct:my_term
TI_krmir	include/termx.h	/^	const char *TI_krmir;	 \/* kM  \/ krmir     sent by rmir or smir in insert mode *\/$/;"	m	struct:my_term
TI_krpl	include/termx.h	/^	const char *TI_krpl;	 \/* &3  \/ krpl      replace key *\/$/;"	m	struct:my_term
TI_krst	include/termx.h	/^	const char *TI_krst;	 \/* &4  \/ krst      restart key *\/$/;"	m	struct:my_term
TI_ksav	include/termx.h	/^	const char *TI_ksav;	 \/* &6  \/ ksav      save key *\/$/;"	m	struct:my_term
TI_kslt	include/termx.h	/^	const char *TI_kslt;	 \/* *6  \/ kslt      select key *\/$/;"	m	struct:my_term
TI_kspd	include/termx.h	/^	const char *TI_kspd;	 \/* &7  \/ kspd      suspend key *\/$/;"	m	struct:my_term
TI_ktbc	include/termx.h	/^	const char *TI_ktbc;	 \/* ka  \/ ktbc      clear-all-tabs key *\/$/;"	m	struct:my_term
TI_kund	include/termx.h	/^	const char *TI_kund;	 \/* &8  \/ kund      undo key *\/$/;"	m	struct:my_term
TI_lf0	include/termx.h	/^	const char *TI_lf0;	 \/* l0  \/ lf0       label on function key f0 if not f0 *\/$/;"	m	struct:my_term
TI_lf1	include/termx.h	/^	const char *TI_lf1;	 \/* l1  \/ lf1       label on function key f1 if not f1 *\/$/;"	m	struct:my_term
TI_lf10	include/termx.h	/^	const char *TI_lf10;	 \/* la  \/ lf10      label on function key f10 if not f10 *\/$/;"	m	struct:my_term
TI_lf2	include/termx.h	/^	const char *TI_lf2;	 \/* l2  \/ lf2       label on function key f2 if not f2 *\/$/;"	m	struct:my_term
TI_lf3	include/termx.h	/^	const char *TI_lf3;	 \/* l3  \/ lf3       label on function key f3 if not f3 *\/$/;"	m	struct:my_term
TI_lf4	include/termx.h	/^	const char *TI_lf4;	 \/* l4  \/ lf4       label on function key f4 if not f4 *\/$/;"	m	struct:my_term
TI_lf5	include/termx.h	/^	const char *TI_lf5;	 \/* l5  \/ lf5       label on function key f5 if not f5 *\/$/;"	m	struct:my_term
TI_lf6	include/termx.h	/^	const char *TI_lf6;	 \/* l6  \/ lf6       label on function key f6 if not f6 *\/$/;"	m	struct:my_term
TI_lf7	include/termx.h	/^	const char *TI_lf7;	 \/* l7  \/ lf7       label on function key f7 if not f7 *\/$/;"	m	struct:my_term
TI_lf8	include/termx.h	/^	const char *TI_lf8;	 \/* l8  \/ lf8       label on function key f8 if not f8 *\/$/;"	m	struct:my_term
TI_lf9	include/termx.h	/^	const char *TI_lf9;	 \/* l9  \/ lf9       label on function key f9 if not f9 *\/$/;"	m	struct:my_term
TI_lh	include/termx.h	/^	int TI_lh;	 \/* lh  \/ lh        rows in each label *\/$/;"	m	struct:my_term
TI_lines	include/termx.h	/^	int TI_lines;	 \/* li  \/ lines     number of lines on screen or page *\/$/;"	m	struct:my_term
TI_ll	include/termx.h	/^	const char *TI_ll;	 \/* ll  \/ ll        last line, first column (if no cup) *\/$/;"	m	struct:my_term
TI_lm	include/termx.h	/^	int TI_lm;	 \/* lm  \/ lm        lines of memory if > line. 0 means varies *\/$/;"	m	struct:my_term
TI_lpi	include/termx.h	/^	const char *TI_lpi;	 \/* ZB  \/ lpi       Change number of lines per inch *\/$/;"	m	struct:my_term
TI_lpix	include/termx.h	/^	int TI_lpix;	 \/* YG  \/ lpix      changing line pitch changes resolution *\/$/;"	m	struct:my_term
TI_lw	include/termx.h	/^	int TI_lw;	 \/* lw  \/ lw        columns in each label *\/$/;"	m	struct:my_term
TI_ma	include/termx.h	/^	int TI_ma;	 \/* ma  \/ ma        maximum combined attributes terminal can handle *\/$/;"	m	struct:my_term
TI_maddr	include/termx.h	/^	int TI_maddr;	 \/* Yd  \/ maddr     maximum value in micro_..._address *\/$/;"	m	struct:my_term
TI_mc0	include/termx.h	/^	const char *TI_mc0;	 \/* ps  \/ mc0       print contents of screen *\/$/;"	m	struct:my_term
TI_mc4	include/termx.h	/^	const char *TI_mc4;	 \/* pf  \/ mc4       turn off printer *\/$/;"	m	struct:my_term
TI_mc5	include/termx.h	/^	const char *TI_mc5;	 \/* po  \/ mc5       turn on printer *\/$/;"	m	struct:my_term
TI_mc5i	include/termx.h	/^	int TI_mc5i;	 \/* 5i  \/ mc5i      printer won't echo on screen *\/$/;"	m	struct:my_term
TI_mc5p	include/termx.h	/^	const char *TI_mc5p;	 \/* pO  \/ mc5p      turn on printer for #1 bytes *\/$/;"	m	struct:my_term
TI_mcs	include/termx.h	/^	int TI_mcs;	 \/* Yf  \/ mcs       character step size when in micro mode *\/$/;"	m	struct:my_term
TI_mcub	include/termx.h	/^	const char *TI_mcub;	 \/* Zg  \/ mcub      Like parm_left_cursor in micro mode *\/$/;"	m	struct:my_term
TI_mcub1	include/termx.h	/^	const char *TI_mcub1;	 \/* Za  \/ mcub1     Like cursor_left in micro mode *\/$/;"	m	struct:my_term
TI_mcud	include/termx.h	/^	const char *TI_mcud;	 \/* Zf  \/ mcud      Like parm_down_cursor in micro mode *\/$/;"	m	struct:my_term
TI_mcud1	include/termx.h	/^	const char *TI_mcud1;	 \/* ZZ  \/ mcud1     Like cursor_down in micro mode *\/$/;"	m	struct:my_term
TI_mcuf	include/termx.h	/^	const char *TI_mcuf;	 \/* Zh  \/ mcuf      Like parm_right_cursor in micro mode *\/$/;"	m	struct:my_term
TI_mcuf1	include/termx.h	/^	const char *TI_mcuf1;	 \/* Zb  \/ mcuf1     Like cursor_right in micro mode *\/$/;"	m	struct:my_term
TI_mcuu	include/termx.h	/^	const char *TI_mcuu;	 \/* Zi  \/ mcuu      Like parm_up_cursor in micro mode *\/$/;"	m	struct:my_term
TI_mcuu1	include/termx.h	/^	const char *TI_mcuu1;	 \/* Zd  \/ mcuu1     Like cursor_up in micro mode *\/$/;"	m	struct:my_term
TI_meml	include/termx.h	/^	const char *TI_meml;	 \/* ml  \/ meml      memory lock above *\/$/;"	m	struct:my_term
TI_memu	include/termx.h	/^	const char *TI_memu;	 \/* mu  \/ memu      memory unlock *\/$/;"	m	struct:my_term
TI_meta_mode	include/termx.h	/^	int TI_meta_mode;$/;"	m	struct:my_term
TI_mgc	include/termx.h	/^	const char *TI_mgc;	 \/* MC  \/ mgc       clear right and left soft margins *\/$/;"	m	struct:my_term
TI_mhpa	include/termx.h	/^	const char *TI_mhpa;	 \/* ZY  \/ mhpa      Like column_address in micro mode *\/$/;"	m	struct:my_term
TI_minfo	include/termx.h	/^	const char *TI_minfo;	 \/* Mi  \/ minfo     Mouse status information *\/$/;"	m	struct:my_term
TI_mir	include/termx.h	/^	int TI_mir;	 \/* mi  \/ mir       safe to move while in insert mode *\/$/;"	m	struct:my_term
TI_mjump	include/termx.h	/^	int TI_mjump;	 \/* Ye  \/ mjump     maximum value in parm_..._micro *\/$/;"	m	struct:my_term
TI_mls	include/termx.h	/^	int TI_mls;	 \/* Yg  \/ mls       line step size when in micro mode *\/$/;"	m	struct:my_term
TI_mrcup	include/termx.h	/^	const char *TI_mrcup;	 \/* CM  \/ mrcup     memory relative cursor addressing *\/$/;"	m	struct:my_term
TI_msgr	include/termx.h	/^	int TI_msgr;	 \/* ms  \/ msgr      safe to move while in standout mode *\/$/;"	m	struct:my_term
TI_mvpa	include/termx.h	/^	const char *TI_mvpa;	 \/* Zc  \/ mvpa      Like row_address in micro mode *\/$/;"	m	struct:my_term
TI_ncv	include/termx.h	/^	int TI_ncv;	 \/* NC  \/ ncv       video attributes that can't be used with colors *\/$/;"	m	struct:my_term
TI_ndscr	include/termx.h	/^	int TI_ndscr;	 \/* ND  \/ ndscr     scrolling region is non-destructive *\/$/;"	m	struct:my_term
TI_nel	include/termx.h	/^	const char *TI_nel;	 \/* nw  \/ nel       newline (behave like cr followed by lf) *\/$/;"	m	struct:my_term
TI_nlab	include/termx.h	/^	int TI_nlab;	 \/* Nl  \/ nlab      number of labels on screen *\/$/;"	m	struct:my_term
TI_normal	include/termx.h	/^	char TI_normal[256];$/;"	m	struct:my_term
TI_npc	include/termx.h	/^	int TI_npc;	 \/* NP  \/ npc       pad character does not exist *\/$/;"	m	struct:my_term
TI_npins	include/termx.h	/^	int TI_npins;	 \/* Yh  \/ npins     numbers of pins in print-head *\/$/;"	m	struct:my_term
TI_nrrmc	include/termx.h	/^	int TI_nrrmc;	 \/* NR  \/ nrrmc     smcup does not reverse rmcup *\/$/;"	m	struct:my_term
TI_nxon	include/termx.h	/^	int TI_nxon;	 \/* nx  \/ nxon      padding won't work, xon\/xoff required *\/$/;"	m	struct:my_term
TI_oc	include/termx.h	/^	const char *TI_oc;	 \/* oc  \/ oc        Set all color pairs to the original ones *\/$/;"	m	struct:my_term
TI_op	include/termx.h	/^	const char *TI_op;	 \/* op  \/ op        Set default pair to its original value *\/$/;"	m	struct:my_term
TI_orc	include/termx.h	/^	int TI_orc;	 \/* Yi  \/ orc       horizontal resolution in units per line *\/$/;"	m	struct:my_term
TI_orhi	include/termx.h	/^	int TI_orhi;	 \/* Yk  \/ orhi      horizontal resolution in units per inch *\/$/;"	m	struct:my_term
TI_orl	include/termx.h	/^	int TI_orl;	 \/* Yj  \/ orl       vertical resolution in units per line *\/$/;"	m	struct:my_term
TI_orvi	include/termx.h	/^	int TI_orvi;	 \/* Yl  \/ orvi      vertical resolution in units per inch *\/$/;"	m	struct:my_term
TI_os	include/termx.h	/^	int TI_os;	 \/* os  \/ os        terminal can overstrike *\/$/;"	m	struct:my_term
TI_pad	include/termx.h	/^	const char *TI_pad;	 \/* pc  \/ pad       padding char (instead of null) *\/$/;"	m	struct:my_term
TI_pairs	include/termx.h	/^	int TI_pairs;	 \/* pa  \/ pairs     maximum number of color-pairs on the screen *\/$/;"	m	struct:my_term
TI_pause	include/termx.h	/^	const char *TI_pause;	 \/* PA  \/ pause     pause for 2-3 seconds *\/$/;"	m	struct:my_term
TI_pb	include/termx.h	/^	int TI_pb;	 \/* pb  \/ pb        lowest baud rate where padding needed *\/$/;"	m	struct:my_term
TI_pctrm	include/termx.h	/^	const char *TI_pctrm;	 \/* S6  \/ pctrm     PC terminal options *\/$/;"	m	struct:my_term
TI_pfkey	include/termx.h	/^	const char *TI_pfkey;	 \/* pk  \/ pfkey     program function key #1 to type string #2 *\/$/;"	m	struct:my_term
TI_pfloc	include/termx.h	/^	const char *TI_pfloc;	 \/* pl  \/ pfloc     program function key #1 to execute string #2 *\/$/;"	m	struct:my_term
TI_pfx	include/termx.h	/^	const char *TI_pfx;	 \/* px  \/ pfx       program function key #1 to transmit string #2 *\/$/;"	m	struct:my_term
TI_pfxl	include/termx.h	/^	const char *TI_pfxl;	 \/* xl  \/ pfxl      Program function key #1 to type string #2 and show string #3 *\/$/;"	m	struct:my_term
TI_pln	include/termx.h	/^	const char *TI_pln;	 \/* pn  \/ pln       program label #1 to show string #2 *\/$/;"	m	struct:my_term
TI_porder	include/termx.h	/^	const char *TI_porder; \/* Ze  \/ porder    Match software bits to print-head pins *\/$/;"	m	struct:my_term
TI_prot	include/termx.h	/^	const char *TI_prot;	 \/* mp  \/ prot      turn on protected mode *\/$/;"	m	struct:my_term
TI_pulse	include/termx.h	/^	const char *TI_pulse;	 \/* PU  \/ pulse     select pulse dialing *\/$/;"	m	struct:my_term
TI_qdial	include/termx.h	/^	const char *TI_qdial;	 \/* QD  \/ qdial     dial number #1 without checking *\/$/;"	m	struct:my_term
TI_rbim	include/termx.h	/^	const char *TI_rbim;	 \/* Zs  \/ rbim      Stop printing bit image graphics *\/$/;"	m	struct:my_term
TI_rc	include/termx.h	/^	const char *TI_rc;	 \/* rc  \/ rc        restore cursor to position of last save_cursor *\/$/;"	m	struct:my_term
TI_rcsd	include/termx.h	/^	const char *TI_rcsd;	 \/* Zt  \/ rcsd      End definition of character set *\/$/;"	m	struct:my_term
TI_rep	include/termx.h	/^	const char *TI_rep;	 \/* rp  \/ rep       repeat char #1 #2 times (P*) *\/$/;"	m	struct:my_term
TI_reqmp	include/termx.h	/^	const char *TI_reqmp;	 \/* RQ  \/ reqmp     Request mouse position *\/$/;"	m	struct:my_term
TI_rev	include/termx.h	/^	const char *TI_rev;	 \/* mr  \/ rev       turn on reverse video mode *\/$/;"	m	struct:my_term
TI_rf	include/termx.h	/^	const char *TI_rf;	 \/* rf  \/ rf        name of reset file *\/$/;"	m	struct:my_term
TI_rfi	include/termx.h	/^	const char *TI_rfi;	 \/* RF  \/ rfi       send next input char (for ptys) *\/$/;"	m	struct:my_term
TI_ri	include/termx.h	/^	const char *TI_ri;	 \/* sr  \/ ri        scroll text down (P) *\/$/;"	m	struct:my_term
TI_rin	include/termx.h	/^	const char *TI_rin;	 \/* SR  \/ rin       scroll back #1 lines (P) *\/$/;"	m	struct:my_term
TI_ritm	include/termx.h	/^	const char *TI_ritm;	 \/* ZR  \/ ritm      End italic mode *\/$/;"	m	struct:my_term
TI_rlm	include/termx.h	/^	const char *TI_rlm;	 \/* ZS  \/ rlm       End left-motion mode *\/$/;"	m	struct:my_term
TI_rmacs	include/termx.h	/^	const char *TI_rmacs;	 \/* ae  \/ rmacs     end alternate character set (P) *\/$/;"	m	struct:my_term
TI_rmam	include/termx.h	/^	const char *TI_rmam;	 \/* RA  \/ rmam      turn off automatic margins *\/$/;"	m	struct:my_term
TI_rmclk	include/termx.h	/^	const char *TI_rmclk;	 \/* RC  \/ rmclk     remove clock *\/$/;"	m	struct:my_term
TI_rmcup	include/termx.h	/^	const char *TI_rmcup;	 \/* te  \/ rmcup     strings to end programs using cup *\/$/;"	m	struct:my_term
TI_rmdc	include/termx.h	/^	const char *TI_rmdc;	 \/* ed  \/ rmdc      end delete mode *\/$/;"	m	struct:my_term
TI_rmicm	include/termx.h	/^	const char *TI_rmicm;	 \/* ZT  \/ rmicm     End micro-motion mode *\/$/;"	m	struct:my_term
TI_rmir	include/termx.h	/^	const char *TI_rmir;	 \/* ei  \/ rmir      exit insert mode *\/$/;"	m	struct:my_term
TI_rmkx	include/termx.h	/^	const char *TI_rmkx;	 \/* ke  \/ rmkx      leave 'keyboard_transmit' mode *\/$/;"	m	struct:my_term
TI_rmln	include/termx.h	/^	const char *TI_rmln;	 \/* LF  \/ rmln      turn off soft labels *\/$/;"	m	struct:my_term
TI_rmm	include/termx.h	/^	const char *TI_rmm;	 \/* mo  \/ rmm       turn off meta mode *\/$/;"	m	struct:my_term
TI_rmp	include/termx.h	/^	const char *TI_rmp;	 \/* rP  \/ rmp       like ip but when in insert mode *\/$/;"	m	struct:my_term
TI_rmpch	include/termx.h	/^	const char *TI_rmpch;	 \/* S3  \/ rmpch     Exit PC character display mode *\/$/;"	m	struct:my_term
TI_rmsc	include/termx.h	/^	const char *TI_rmsc;	 \/* S5  \/ rmsc      Exit PC scancode mode *\/$/;"	m	struct:my_term
TI_rmso	include/termx.h	/^	const char *TI_rmso;	 \/* se  \/ rmso      exit standout mode *\/$/;"	m	struct:my_term
TI_rmul	include/termx.h	/^	const char *TI_rmul;	 \/* ue  \/ rmul      exit underline mode *\/$/;"	m	struct:my_term
TI_rmxon	include/termx.h	/^	const char *TI_rmxon;	 \/* RX  \/ rmxon     turn off xon\/xoff handshaking *\/$/;"	m	struct:my_term
TI_rs1	include/termx.h	/^	const char *TI_rs1;	 \/* r1  \/ rs1       reset string *\/$/;"	m	struct:my_term
TI_rs2	include/termx.h	/^	const char *TI_rs2;	 \/* r2  \/ rs2       reset string *\/$/;"	m	struct:my_term
TI_rs3	include/termx.h	/^	const char *TI_rs3;	 \/* r3  \/ rs3       reset string *\/$/;"	m	struct:my_term
TI_rshm	include/termx.h	/^	const char *TI_rshm;	 \/* ZU  \/ rshm      End shadow-print mode *\/$/;"	m	struct:my_term
TI_rsubm	include/termx.h	/^	const char *TI_rsubm;	 \/* ZV  \/ rsubm     End subscript mode *\/$/;"	m	struct:my_term
TI_rsupm	include/termx.h	/^	const char *TI_rsupm;	 \/* ZW  \/ rsupm     End superscript mode *\/$/;"	m	struct:my_term
TI_rum	include/termx.h	/^	const char *TI_rum;	 \/* ZX  \/ rum       End reverse character motion *\/$/;"	m	struct:my_term
TI_rwidm	include/termx.h	/^	const char *TI_rwidm;	 \/* ZQ  \/ rwidm     End double-wide mode *\/$/;"	m	struct:my_term
TI_s0ds	include/termx.h	/^	const char *TI_s0ds;	 \/* s0  \/ s0ds      Shift to code set 0 (EUC set 0, ASCII) *\/$/;"	m	struct:my_term
TI_s1ds	include/termx.h	/^	const char *TI_s1ds;	 \/* s1  \/ s1ds      Shift to code set 1 *\/$/;"	m	struct:my_term
TI_s2ds	include/termx.h	/^	const char *TI_s2ds;	 \/* s2  \/ s2ds      Shift to code set 2 *\/$/;"	m	struct:my_term
TI_s3ds	include/termx.h	/^	const char *TI_s3ds;	 \/* s3  \/ s3ds      Shift to code set 3 *\/$/;"	m	struct:my_term
TI_sam	include/termx.h	/^	int TI_sam;	 \/* YE  \/ sam       printing in last column causes cr *\/$/;"	m	struct:my_term
TI_sbim	include/termx.h	/^	const char *TI_sbim;	 \/* Zq  \/ sbim      Start printing bit image graphics *\/$/;"	m	struct:my_term
TI_sc	include/termx.h	/^	const char *TI_sc;	 \/* sc  \/ sc        save current cursor position (P) *\/$/;"	m	struct:my_term
TI_scesa	include/termx.h	/^	const char *TI_scesa;	 \/* S8  \/ scesa     Alternate escape for scancode emulation *\/$/;"	m	struct:my_term
TI_scesc	include/termx.h	/^	const char *TI_scesc;	 \/* S7  \/ scesc     Escape for scancode emulation *\/$/;"	m	struct:my_term
TI_sclk	include/termx.h	/^	const char *TI_sclk;	 \/* SC  \/ sclk      set clock, #1 hrs #2 mins #3 secs *\/$/;"	m	struct:my_term
TI_scp	include/termx.h	/^	const char *TI_scp;	 \/* sp  \/ scp       Set current color pair to #1 *\/$/;"	m	struct:my_term
TI_scs	include/termx.h	/^	const char *TI_scs;	 \/* Zj  \/ scs       Select character set *\/$/;"	m	struct:my_term
TI_scsd	include/termx.h	/^	const char *TI_scsd;	 \/* Zr  \/ scsd      Start character set definition *\/$/;"	m	struct:my_term
TI_sdrfq	include/termx.h	/^	const char *TI_sdrfq;	 \/* ZG  \/ sdrfq     Enter draft-quality mode *\/$/;"	m	struct:my_term
TI_setab	include/termx.h	/^	const char *TI_setab;	 \/* AB  \/ setab     Set background color using ANSI escape *\/$/;"	m	struct:my_term
TI_setaf	include/termx.h	/^	const char *TI_setaf;	 \/* AF  \/ setaf     Set foreground color using ANSI escape *\/$/;"	m	struct:my_term
TI_setb	include/termx.h	/^	const char *TI_setb;	 \/* Sb  \/ setb      Set background color #1 *\/$/;"	m	struct:my_term
TI_setcolor	include/termx.h	/^	const char *TI_setcolor; \/* Yz  \/ setcolor  Change to ribbon color #1 *\/$/;"	m	struct:my_term
TI_setf	include/termx.h	/^	const char *TI_setf;	 \/* Sf  \/ setf      Set foreground color #1 *\/$/;"	m	struct:my_term
TI_sgr	include/termx.h	/^	const char *TI_sgr;	 \/* sa  \/ sgr       define video attributes #1-#9 (PG9) *\/$/;"	m	struct:my_term
TI_sgr0	include/termx.h	/^	const char *TI_sgr0;	 \/* me  \/ sgr0      turn off all attributes *\/$/;"	m	struct:my_term
TI_sgr1	include/termx.h	/^	const char *TI_sgr1;	 \/* sA  \/ sgr1      Define second set of video attributes #1-#6 *\/$/;"	m	struct:my_term
TI_sgrstrs	include/termx.h	/^	const char *TI_sgrstrs[TERM_SGR_MAXVAL];$/;"	m	struct:my_term
TI_sitm	include/termx.h	/^	const char *TI_sitm;	 \/* ZH  \/ sitm      Enter italic mode *\/$/;"	m	struct:my_term
TI_slength	include/termx.h	/^	const char *TI_slength; \/* sL  \/ slength   YI Set page length to #1 hundredth of an inch *\/$/;"	m	struct:my_term
TI_slines	include/termx.h	/^	const char *TI_slines; \/* YZ  \/ slines    Set page length to #1 lines *\/$/;"	m	struct:my_term
TI_slm	include/termx.h	/^	const char *TI_slm;	 \/* ZI  \/ slm       Start leftward carriage motion *\/$/;"	m	struct:my_term
TI_smacs	include/termx.h	/^	const char *TI_smacs;	 \/* as  \/ smacs     start alternate character set (P) *\/$/;"	m	struct:my_term
TI_smam	include/termx.h	/^	const char *TI_smam;	 \/* SA  \/ smam      turn on automatic margins *\/$/;"	m	struct:my_term
TI_smcup	include/termx.h	/^	const char *TI_smcup;	 \/* ti  \/ smcup     string to start programs using cup *\/$/;"	m	struct:my_term
TI_smdc	include/termx.h	/^	const char *TI_smdc;	 \/* dm  \/ smdc      enter delete mode *\/$/;"	m	struct:my_term
TI_smgb	include/termx.h	/^	const char *TI_smgb;	 \/* Zk  \/ smgb      Set bottom margin at current line *\/$/;"	m	struct:my_term
TI_smgbp	include/termx.h	/^	const char *TI_smgbp;	 \/* Zl  \/ smgbp     Set bottom margin at line #1 or #2 lines from bottom *\/$/;"	m	struct:my_term
TI_smgl	include/termx.h	/^	const char *TI_smgl;	 \/* ML  \/ smgl      set left soft margin at current column *\/$/;"	m	struct:my_term
TI_smglp	include/termx.h	/^	const char *TI_smglp;	 \/* Zm  \/ smglp     Set left (right) margin at column #1 (#2) *\/$/;"	m	struct:my_term
TI_smglr	include/termx.h	/^	const char *TI_smglr;	 \/* ML  \/ smglr     Set both left and right margins to #1, #2 *\/$/;"	m	struct:my_term
TI_smgr	include/termx.h	/^	const char *TI_smgr;	 \/* MR  \/ smgr      set right soft margin at current column *\/$/;"	m	struct:my_term
TI_smgrp	include/termx.h	/^	const char *TI_smgrp;	 \/* Zn  \/ smgrp     Set right margin at column #1 *\/$/;"	m	struct:my_term
TI_smgt	include/termx.h	/^	const char *TI_smgt;	 \/* Zo  \/ smgt      Set top margin at current line *\/$/;"	m	struct:my_term
TI_smgtb	include/termx.h	/^	const char *TI_smgtb;	 \/* MT  \/ smgtb     Sets both top and bottom margins to #1, #2 *\/$/;"	m	struct:my_term
TI_smgtp	include/termx.h	/^	const char *TI_smgtp;	 \/* Zp  \/ smgtp     Set top (bottom) margin at row #1 (#2) *\/$/;"	m	struct:my_term
TI_smicm	include/termx.h	/^	const char *TI_smicm;	 \/* ZJ  \/ smicm     Start micro-motion mode *\/$/;"	m	struct:my_term
TI_smir	include/termx.h	/^	const char *TI_smir;	 \/* im  \/ smir      enter insert mode *\/$/;"	m	struct:my_term
TI_smkx	include/termx.h	/^	const char *TI_smkx;	 \/* ks  \/ smkx      enter 'keyboard_transmit' mode *\/$/;"	m	struct:my_term
TI_smln	include/termx.h	/^	const char *TI_smln;	 \/* LO  \/ smln      turn on soft labels *\/$/;"	m	struct:my_term
TI_smm	include/termx.h	/^	const char *TI_smm;	 \/* mm  \/ smm       turn on meta mode (8th-bit on) *\/$/;"	m	struct:my_term
TI_smpch	include/termx.h	/^	const char *TI_smpch;	 \/* S2  \/ smpch     Enter PC character display mode *\/$/;"	m	struct:my_term
TI_smsc	include/termx.h	/^	const char *TI_smsc;	 \/* S4  \/ smsc      Enter PC scancode mode *\/$/;"	m	struct:my_term
TI_smso	include/termx.h	/^	const char *TI_smso;	 \/* so  \/ smso      begin standout mode *\/$/;"	m	struct:my_term
TI_smul	include/termx.h	/^	const char *TI_smul;	 \/* us  \/ smul      begin underline mode *\/$/;"	m	struct:my_term
TI_smxon	include/termx.h	/^	const char *TI_smxon;	 \/* SX  \/ smxon     turn on xon\/xoff handshaking *\/$/;"	m	struct:my_term
TI_snlq	include/termx.h	/^	const char *TI_snlq;	 \/* ZK  \/ snlq      Enter NLQ mode *\/$/;"	m	struct:my_term
TI_snrmq	include/termx.h	/^	const char *TI_snrmq;	 \/* ZL  \/ snrmq     Enter normal-quality mode *\/$/;"	m	struct:my_term
TI_spinh	include/termx.h	/^	int TI_spinh;	 \/* Yc  \/ spinh     spacing of dots horizontally in dots per inch *\/$/;"	m	struct:my_term
TI_spinv	include/termx.h	/^	int TI_spinv;	 \/* Yb  \/ spinv     spacing of pins vertically in pins per inch *\/$/;"	m	struct:my_term
TI_sshm	include/termx.h	/^	const char *TI_sshm;	 \/* ZM  \/ sshm      Enter shadow-print mode *\/$/;"	m	struct:my_term
TI_ssubm	include/termx.h	/^	const char *TI_ssubm;	 \/* ZN  \/ ssubm     Enter subscript mode *\/$/;"	m	struct:my_term
TI_ssupm	include/termx.h	/^	const char *TI_ssupm;	 \/* ZO  \/ ssupm     Enter superscript mode *\/$/;"	m	struct:my_term
TI_subcs	include/termx.h	/^	const char *TI_subcs;	 \/* Zu  \/ subcs     List of subscriptable characters *\/$/;"	m	struct:my_term
TI_sum	include/termx.h	/^	const char *TI_sum;	 \/* ZP  \/ sum       Start upward carriage motion *\/$/;"	m	struct:my_term
TI_supcs	include/termx.h	/^	const char *TI_supcs;	 \/* Zv  \/ supcs     List of superscriptable characters *\/$/;"	m	struct:my_term
TI_swidm	include/termx.h	/^	const char *TI_swidm;	 \/* ZF  \/ swidm     Enter double-wide mode *\/$/;"	m	struct:my_term
TI_tbc	include/termx.h	/^	const char *TI_tbc;	 \/* ct  \/ tbc       clear all tab stops (P) *\/$/;"	m	struct:my_term
TI_tone	include/termx.h	/^	const char *TI_tone;	 \/* TO  \/ tone      select touch tone dialing *\/$/;"	m	struct:my_term
TI_tsl	include/termx.h	/^	const char *TI_tsl;	 \/* ts  \/ tsl       move to status line *\/$/;"	m	struct:my_term
TI_u0	include/termx.h	/^	const char *TI_u0;	 \/* u0  \/ u0        User string #0 *\/$/;"	m	struct:my_term
TI_u1	include/termx.h	/^	const char *TI_u1;	 \/* u1  \/ u1        User string #1 *\/$/;"	m	struct:my_term
TI_u2	include/termx.h	/^	const char *TI_u2;	 \/* u2  \/ u2        User string #2 *\/$/;"	m	struct:my_term
TI_u3	include/termx.h	/^	const char *TI_u3;	 \/* u3  \/ u3        User string #3 *\/$/;"	m	struct:my_term
TI_u4	include/termx.h	/^	const char *TI_u4;	 \/* u4  \/ u4        User string #4 *\/$/;"	m	struct:my_term
TI_u5	include/termx.h	/^	const char *TI_u5;	 \/* u5  \/ u5        User string #5 *\/$/;"	m	struct:my_term
TI_u6	include/termx.h	/^	const char *TI_u6;	 \/* u6  \/ u6        User string #6 *\/$/;"	m	struct:my_term
TI_u7	include/termx.h	/^	const char *TI_u7;	 \/* u7  \/ u7        User string #7 *\/$/;"	m	struct:my_term
TI_u8	include/termx.h	/^	const char *TI_u8;	 \/* u8  \/ u8        User string #8 *\/$/;"	m	struct:my_term
TI_u9	include/termx.h	/^	const char *TI_u9;	 \/* u9  \/ u9        User string #9 *\/$/;"	m	struct:my_term
TI_uc	include/termx.h	/^	const char *TI_uc;	 \/* uc  \/ uc        underline char and move past it *\/$/;"	m	struct:my_term
TI_ul	include/termx.h	/^	int TI_ul;	 \/* ul  \/ ul        underline character overstrikes *\/$/;"	m	struct:my_term
TI_vpa	include/termx.h	/^	const char *TI_vpa;	 \/* cv  \/ vpa       vertical position #1 absolute (P) *\/$/;"	m	struct:my_term
TI_vt	include/termx.h	/^	int TI_vt;	 \/* vt  \/ vt        virtual terminal number (CB\/unix) *\/$/;"	m	struct:my_term
TI_wait	include/termx.h	/^	const char *TI_wait;	 \/* WA  \/ wait      wait for dial-tone *\/$/;"	m	struct:my_term
TI_widcs	include/termx.h	/^	int TI_widcs;	 \/* Yn  \/ widcs     character step size when in double wide mode *\/$/;"	m	struct:my_term
TI_wind	include/termx.h	/^	const char *TI_wind;	 \/* wi  \/ wind      current window is lines #1-#2 cols #3-#4 *\/$/;"	m	struct:my_term
TI_wingo	include/termx.h	/^	const char *TI_wingo;	 \/* WG  \/ wingo     go to window #1 *\/$/;"	m	struct:my_term
TI_wnum	include/termx.h	/^	int TI_wnum;	 \/* MW  \/ wnum      maximum number of defineable windows *\/$/;"	m	struct:my_term
TI_wsl	include/termx.h	/^	int TI_wsl;	 \/* ws  \/ wsl       number of columns in status line *\/$/;"	m	struct:my_term
TI_xenl	include/termx.h	/^	int TI_xenl;	 \/* xn  \/ xenl      newline ignored after 80 cols (concept) *\/$/;"	m	struct:my_term
TI_xhp	include/termx.h	/^	int TI_xhp;	 \/* xs  \/ xhp       standout not erased by overwriting (hp) *\/$/;"	m	struct:my_term
TI_xhpa	include/termx.h	/^	int TI_xhpa;	 \/* YA  \/ xhpa      only positive motion for hpa\/mhpa caps *\/$/;"	m	struct:my_term
TI_xmc	include/termx.h	/^	int TI_xmc;	 \/* sg  \/ xmc       number of blank characters left by smso or rmso *\/$/;"	m	struct:my_term
TI_xoffc	include/termx.h	/^	const char *TI_xoffc;	 \/* XF  \/ xoffc     XOFF character *\/$/;"	m	struct:my_term
TI_xon	include/termx.h	/^	int TI_xon;	 \/* xo  \/ xon       terminal uses xon\/xoff handshaking *\/$/;"	m	struct:my_term
TI_xonc	include/termx.h	/^	const char *TI_xonc;	 \/* XN  \/ xonc      XON character *\/$/;"	m	struct:my_term
TI_xsb	include/termx.h	/^	int TI_xsb;	 \/* xb  \/ xsb       beehive (f1=escape, f2=ctrl C) *\/$/;"	m	struct:my_term
TI_xt	include/termx.h	/^	int TI_xt;	 \/* xt  \/ xt        tabs destructive, magic so char (t1061) *\/$/;"	m	struct:my_term
TI_xvpa	include/termx.h	/^	int TI_xvpa;	 \/* YD  \/ xvpa      only positive motion for vpa\/mvpa caps *\/$/;"	m	struct:my_term
TI_zerom	include/termx.h	/^	const char *TI_zerom;	 \/* Zx  \/ zerom     No motion for subsequent character *\/$/;"	m	struct:my_term
TOGGLE	include/vars.h	196;"	d
TOGGLE	include/window.h	28;"	d
TOK	source/expr2.c	232;"	d	file:
TOKCOUNT	source/expr2.c	/^	TOKCOUNT$/;"	e	enum:LEX	file:
TOKEN	source/expr2.c	/^typedef 	int		TOKEN;$/;"	t	file:
TOKENCOUNT	source/expr2.c	47;"	d	file:
TOKEN_type	source/expr2.c	/^typedef struct TOKEN_type $/;"	s	file:
TOPIC_LIST	include/hook.h	/^	TOPIC_LIST,$/;"	e	enum:HOOK_TYPES
TOPPREC	source/expr2.c	404;"	d	file:
TRUE	include/irc_std.h	219;"	d
TYPE	source/server.c	/^enum serverinfo_fields { HOST, PORT, PASS, NICK, GROUP, TYPE, PROTO, VHOST, ENCODING, LASTFIELD };$/;"	e	enum:serverinfo_fields	file:
Tcl_echoCmd	source/tcl.c	/^static int	Tcl_echoCmd (ClientData clientData, Tcl_Interp *interp, int objc, const char **objv)$/;"	f	file:
Tcl_epicCmd	source/tcl.c	/^static int	Tcl_epicCmd (ClientData clientData, Tcl_Interp *interp, int objc, const char **objv)$/;"	f	file:
Tcl_tkonCmd	source/tcl.c	/^static int	Tcl_tkonCmd (ClientData clientData, Tcl_Interp *interp, int objc, char **objv)$/;"	f	file:
Tgetflag	source/term.c	121;"	d	file:
Tgetflag	source/term.c	125;"	d	file:
Tgetnum	source/term.c	120;"	d	file:
Tgetnum	source/term.c	124;"	d	file:
Tgetstr	source/term.c	119;"	d	file:
Tgetstr	source/term.c	123;"	d	file:
Timer	source/timer.c	/^}       Timer;$/;"	t	typeref:struct:timerlist_stru	file:
TimerDomain	include/timer.h	/^} TimerDomain;$/;"	t	typeref:enum:__anon9
TimerTimeout	source/timer.c	/^Timeval	TimerTimeout (void)$/;"	f
Timeval	include/irc_std.h	/^typedef struct timeval		Timeval;$/;"	t	typeref:struct:timeval
TocEntry	contrib/cdrom.c	/^static struct cdrom_etocentry TocEntry[101];$/;"	v	typeref:struct:cdrom_etocentry	file:
Transformer	source/ircaux.c	/^struct Transformer$/;"	s	file:
TruncateAndQuote	source/expr.c	/^static	void	TruncateAndQuote (char **buff, const char *add, ssize_t length, const char *quote_em)$/;"	f	file:
UINTMAX_FORMAT	include/irc_std.h	304;"	d
UINTMAX_FORMAT	include/irc_std.h	307;"	d
UINTMAX_FORMAT	include/irc_std.h	316;"	d
UINTMAX_FORMAT	include/irc_std.h	324;"	d
UINTMAX_FORMAT	include/irc_std.h	332;"	d
ULONG_MAX	source/compat.c	849;"	d	file:
UMINUS	source/expr2.c	/^			UPLUS,		UMINUS,		STRLEN,$/;"	e	enum:LEX	file:
UNAME_HACK	include/config.h	212;"	d
UNARY	source/expr2.c	1737;"	d	file:
UNDERSCORE	source/glob.c	106;"	d	file:
UND_TOG	include/irc.h	48;"	d
UND_TOG_STR	include/irc.h	49;"	d
UNIX_MAIL	acconfig.h	158;"	d
UNKNOWN_32INT	acconfig.h	152;"	d
UNKNOWN_COMMAND_LIST	include/hook.h	/^	UNKNOWN_COMMAND_LIST,$/;"	e	enum:HOOK_TYPES
UNKNOWN_SET_LIST	include/hook.h	/^	UNKNOWN_SET_LIST,$/;"	e	enum:HOOK_TYPES
UNLOAD_LIST	include/hook.h	/^	UNLOAD_LIST,$/;"	e	enum:HOOK_TYPES
UNOP	test.c	/^	UNOP,$/;"	e	enum:token_types	file:
UNOT	test.c	/^	UNOT,$/;"	e	enum:token	file:
UNSIGNED_INT32	acconfig.h	149;"	d
UNSIGNED_INT32	include/defs.h	139;"	d
UNSIGNED_LONG32	acconfig.h	146;"	d
UPDATE_ALL	include/input.h	65;"	d
UPDATE_FROM_CURSOR	include/input.h	66;"	d
UPDATE_JUST_CURSOR	include/input.h	67;"	d
UPDATE_STATUS	source/window.c	72;"	d	file:
UPLUS	source/expr2.c	/^			UPLUS,		UMINUS,		STRLEN,$/;"	e	enum:LEX	file:
URL_xform	source/ircaux.c	/^int	NONE_xform, URL_xform, ENC_xform, B64_xform, FISH64_xform;$/;"	v
USA	source/network.c	/^typedef struct sockaddr_un USA;$/;"	t	typeref:struct:sockaddr_un	file:
USED_BOOLEAN	source/expr2.c	137;"	d	file:
USED_EXPANDED	source/expr2.c	134;"	d	file:
USED_FLOAT	source/expr2.c	136;"	d	file:
USED_INTEGER	source/expr2.c	135;"	d	file:
USED_LVAL	source/expr2.c	132;"	d	file:
USED_NONE	source/expr2.c	131;"	d	file:
USED_RAW	source/expr2.c	133;"	d	file:
USE_FREEBSD_KQUEUE	acconfig.h	333;"	d
USE_POLL	acconfig.h	330;"	d
USE_PTHREAD	acconfig.h	336;"	d
USE_SELECT	acconfig.h	327;"	d
USE_SELECT	include/defs.h	269;"	d
USE_SOCKS	acconfig.h	170;"	d
USE_SOCKS5	acconfig.h	171;"	d
USE_SOLARIS_PORTS	acconfig.h	342;"	d
USE_WILDCARDS	include/list.h	25;"	d
USING_TERMCAP	acconfig.h	117;"	d
USING_TERMLIB	acconfig.h	123;"	d
USING_XTERMCAP	acconfig.h	120;"	d
UWORD	include/alias.h	/^	UWORD,$/;"	e	enum:ARG_TYPES
UserhostEntry	include/who.h	/^} UserhostEntry;$/;"	t	typeref:struct:UserhostEntryT
UserhostEntryT	include/who.h	/^typedef struct UserhostEntryT$/;"	s
UserhostItem	include/who.h	/^} UserhostItem;$/;"	t	typeref:struct:UserhostItemT
UserhostItemT	include/who.h	/^typedef struct UserhostItemT$/;"	s
V0	include/network.h	39;"	d
V4	include/network.h	42;"	d
V4ADDR	include/network.h	44;"	d
V4FAM	include/network.h	43;"	d
V4PORT	include/network.h	45;"	d
V6	include/network.h	47;"	d
V6ADDR	include/network.h	49;"	d
V6FAM	include/network.h	48;"	d
V6PORT	include/network.h	50;"	d
VALGRIND_CREATE_MEMPOOL	include/irc_std.h	484;"	d
VALGRIND_DESTROY_MEMPOOL	include/irc_std.h	488;"	d
VALGRIND_MEMPOOL_ALLOC	include/irc_std.h	485;"	d
VALGRIND_MEMPOOL_FREE	include/irc_std.h	487;"	d
VALGRIND_MEMPOOL_TRIM	include/irc_std.h	486;"	d
VALID_UIDS	include/config.h	144;"	d
VALID_UIDS	include/config.h	472;"	d
VALID_UID_FILE	include/config.h	159;"	d
VALID_UID_FILE	include/config.h	484;"	d
VAR	source/vars.c	263;"	d	file:
VARIABLE	include/vars.h	/^} VARIABLE;$/;"	t	typeref:union:builtin_variable
VARS_C	source/vars.c	37;"	d	file:
VAR_ALIAS	include/alias.h	17;"	d
VAR_ALIAS_LOCAL	include/alias.h	18;"	d
VERSION	Makefile	/^VERSION  = 1.1.10$/;"	m
VFD	source/newio.c	121;"	d	file:
VFD	source/newio.c	144;"	d	file:
VHOST	source/server.c	/^enum serverinfo_fields { HOST, PORT, PASS, NICK, GROUP, TYPE, PROTO, VHOST, ENCODING, LASTFIELD };$/;"	e	enum:serverinfo_fields	file:
VIF_PENDING	source/vars.c	70;"	d	file:
WAIT_PROMPT_DUMMY	include/screen.h	18;"	d
WAIT_PROMPT_KEY	include/screen.h	17;"	d
WAIT_PROMPT_LINE	include/screen.h	16;"	d
WALLOP_LIST	include/hook.h	/^	WALLOP_LIST,$/;"	e	enum:HOOK_TYPES
WALL_LIST	include/hook.h	/^	WALL_LIST,$/;"	e	enum:HOOK_TYPES
WANT_SSL2	acconfig.h	246;"	d
WHITESPACE	source/input.c	1081;"	d	file:
WHO_AWAY	source/who.c	119;"	d	file:
WHO_CHOPS	source/who.c	114;"	d	file:
WHO_DEBUG	source/who.c	/^static void	WHO_DEBUG (const char *format, ...)$/;"	f	file:
WHO_FILE	source/who.c	115;"	d	file:
WHO_HERE	source/who.c	118;"	d	file:
WHO_HOST	source/who.c	116;"	d	file:
WHO_INVISIBLE	source/who.c	132;"	d	file:
WHO_LIST	include/hook.h	/^	WHO_LIST,$/;"	e	enum:HOOK_TYPES
WHO_LUSERS	source/who.c	121;"	d	file:
WHO_NAME	source/who.c	112;"	d	file:
WHO_NICK	source/who.c	120;"	d	file:
WHO_NOCHOPS	source/who.c	123;"	d	file:
WHO_OPERSPY	source/who.c	133;"	d	file:
WHO_OPS	source/who.c	111;"	d	file:
WHO_REAL	source/who.c	122;"	d	file:
WHO_SERVER	source/who.c	117;"	d	file:
WHO_ZERO	source/who.c	113;"	d	file:
WIDTH	source/input.c	/^	const int	WIDTH = 10;$/;"	v
WINDOW_BEFOREKILL_LIST	include/hook.h	/^	WINDOW_BEFOREKILL_LIST,$/;"	e	enum:HOOK_TYPES
WINDOW_COMMAND_LIST	include/hook.h	/^	WINDOW_COMMAND_LIST,$/;"	e	enum:HOOK_TYPES
WINDOW_CREATE	include/config.h	84;"	d
WINDOW_CREATE_LIST	include/hook.h	/^	WINDOW_CREATE_LIST,$/;"	e	enum:HOOK_TYPES
WINDOW_KILL_LIST	include/hook.h	/^	WINDOW_KILL_LIST,$/;"	e	enum:HOOK_TYPES
WINDOW_LIST	include/hook.h	/^	WINDOW_LIST,$/;"	e	enum:HOOK_TYPES
WINDOW_NOTIFIED_LIST	include/hook.h	/^	WINDOW_NOTIFIED_LIST,$/;"	e	enum:HOOK_TYPES
WINDOW_SERVER_LIST	include/hook.h	/^	WINDOW_SERVER_LIST,$/;"	e	enum:HOOK_TYPES
WINDOW_TIMER	include/timer.h	/^	WINDOW_TIMER,$/;"	e	enum:__anon9
WIN_FORM	source/window.c	3401;"	d	file:
WITH_THREADED_STDOUT	acconfig.h	393;"	d
WNickList	include/window.h	/^} WNickList;$/;"	t	typeref:struct:WNickListStru
WNickListStru	include/window.h	/^typedef struct	WNickListStru$/;"	s
WORD	include/alias.h	/^	WORD,$/;"	e	enum:ARG_TYPES
WORDC	source/expr2.c	/^			WORDC,		DEREF,		REEXP,$/;"	e	enum:LEX	file:
WSERV	Makefile	/^WSERV	 = $(wserv_exe)$/;"	m
WSERV_C	source/wserv.c	41;"	d	file:
WSERV_SUPPORT	acconfig.h	423;"	d
WaitCmd	include/server.h	/^} WaitCmd;$/;"	t	typeref:struct:WaitCmdstru
WaitCmdstru	include/server.h	/^typedef struct WaitCmdstru$/;"	s
WaitPrompt	include/screen.h	/^}	WaitPrompt;$/;"	t	typeref:struct:PromptStru
WhoEntry	include/who.h	/^} WhoEntry;$/;"	t	typeref:struct:WhoEntryT
WhoEntryT	include/who.h	/^typedef struct WhoEntryT$/;"	s
Window	include/window.h	/^}	Window;$/;"	t	typeref:struct:WindowStru
WindowStack	include/window.h	/^}	WindowStack;$/;"	t	typeref:struct:window_stack_stru
WindowStru	include/window.h	/^typedef	struct	WindowStru$/;"	s
XFORM_DECODE	include/ircaux.h	290;"	d
XFORM_ENCODE	include/ircaux.h	289;"	d
XOR	source/expr2.c	/^	XOR,$/;"	e	enum:LEX	file:
XOREQ	source/expr2.c	/^			MODEQ,		ANDEQ,		XOREQ,		OREQ,$/;"	e	enum:LEX	file:
XS	source/perl.c	/^static XS (XS_call) {$/;"	f	file:
XS	source/perl.c	/^static XS (XS_cmd) {$/;"	f	file:
XS	source/perl.c	/^static XS (XS_eval) {$/;"	f	file:
XS	source/perl.c	/^static XS (XS_expr) {$/;"	f	file:
XS	source/perl.c	/^static XS (XS_yell) {$/;"	f	file:
XTOI	source/ircaux.c	5428;"	d	file:
YELL_LIST	include/hook.h	/^	YELL_LIST,$/;"	e	enum:HOOK_TYPES
YES	source/gailib.c	41;"	d	file:
YES	source/gailib.c	505;"	d	file:
ZZZZ_THIS_ALWAYS_COMES_LAST_ZZZZ	include/hook.h	/^	ZZZZ_THIS_ALWAYS_COMES_LAST_ZZZZ$/;"	e	enum:HOOK_TYPES
_CONFIG_H_	include/config.h	11;"	d
_CtcpEntry	source/ctcp.c	/^typedef	struct _CtcpEntry$/;"	s	file:
_ELF_H_	include/elf.h	13;"	d
_GLOB_H_	include/glob.h	41;"	d
_IRCAUX_H_	include/ircaux.h	14;"	d
_POSIX_SOURCE	source/mail.c	47;"	d	file:
_POSIX_VDISABLE	source/term.c	1139;"	d	file:
_POSIX_VDISABLE	source/wserv.c	240;"	d	file:
_SHA256_CTX	source/sha2.c	/^typedef struct _SHA256_CTX {$/;"	s	file:
__A	include/irc_std.h	145;"	d
__A	include/irc_std.h	149;"	d
__A	include/irc_std.h	152;"	d
__COMPAT_H__	include/compat.h	7;"	d
__EXTLANG_H__	include/extlang.h	32;"	d
__FROMSERV	include/server.h	180;"	d
__N	include/irc_std.h	146;"	d
__N	include/irc_std.h	150;"	d
__N	include/irc_std.h	153;"	d
__NETWORK_H__	include/network.h	32;"	d
__WORDS_H__	include/words.h	32;"	d
__alias_h__	include/alias.h	8;"	d
__alist_h__	include/alist.h	7;"	d
__array_h__	include/array.h	10;"	d
__bits	include/levels.h	/^	unsigned int	__bits[BIT_WORDS];$/;"	m	struct:Mask
__clock_h__	include/clock.h	37;"	d
__commands_h__	include/commands.h	11;"	d
__crypt_h__	include/sedcrypt.h	10;"	d
__ctcp_h__	include/ctcp.h	10;"	d
__dcc_h__	include/dcc.h	10;"	d
__debug_h__	include/debug.h	7;"	d
__exec_h__	include/exec.h	10;"	d
__files_h__	include/files.h	10;"	d
__flood_h__	include/flood.h	10;"	d
__functions_h__	include/functions.h	9;"	d
__gailib_h__	include/gailib.h	31;"	d
__hook_h__	include/hook.h	10;"	d
__if_h__	include/ifcmd.h	10;"	d
__ignore_h__	include/ignore.h	10;"	d
__inline	include/irc_std.h	144;"	d
__inline	source/expr2.c	153;"	d	file:
__inline__	include/irc_std.h	143;"	d
__input_h__	include/input.h	10;"	d
__irc_h__	include/irc.h	12;"	d
__irc_std_h	include/irc_std.h	10;"	d
__keys_h__	include/keys.h	9;"	d
__lastlog_h__	include/lastlog.h	10;"	d
__levels_h__	include/levels.h	10;"	d
__list_h__	include/list.h	10;"	d
__log_h__	include/log.h	10;"	d
__mail_h__	include/mail.h	10;"	d
__names_h__	include/names.h	9;"	d
__need_ArgList_t__	source/alias.c	39;"	d	file:
__need_ArgList_t__	source/commands.c	40;"	d	file:
__need_ArgList_t__	source/functions.c	46;"	d	file:
__need_ArgList_t__	source/hook.c	40;"	d	file:
__need_ci_alist_hash__	source/alist.c	44;"	d	file:
__need_cs_alist_hash__	source/alias.c	37;"	d	file:
__need_cs_alist_hash__	source/alist.c	43;"	d	file:
__need_putchar_x__	source/commands.c	37;"	d	file:
__need_putchar_x__	source/irc.c	65;"	d	file:
__need_putchar_x__	source/screen.c	42;"	d	file:
__need_putchar_x__	source/status.c	38;"	d	file:
__need_putchar_x__	source/term.c	41;"	d	file:
__need_putchar_x__	source/window.c	40;"	d	file:
__need_term_flush__	source/commands.c	38;"	d	file:
__need_term_flush__	source/input.c	46;"	d	file:
__need_term_flush__	source/term.c	42;"	d	file:
__newio_h__	include/newio.h	63;"	d
__no_timeval_stuff__	source/perl.c	37;"	d	file:
__notify_h__	include/notify.h	10;"	d
__numbers_h__	include/numbers.h	10;"	d
__output_h__	include/output.h	14;"	d
__parse_h__	include/parse.h	10;"	d
__queue_h__	include/queue.h	9;"	d
__reg_h__	include/reg.h	35;"	d
__screen_h__	include/screen.h	10;"	d
__server_h__	include/server.h	10;"	d
__socks5p_h__	include/socks5p.h	11;"	d
__ssl_h__	include/ssl.h	12;"	d
__stack_h__	include/stack.h	10;"	d
__status_h__	include/status.h	10;"	d
__term_h__	include/termx.h	11;"	d
__timer_h__	include/timer.h	9;"	d
__vars_h__	include/vars.h	9;"	d
__who_h__	include/who.h	7;"	d
__window_h__	include/window.h	11;"	d
_mo_money	source/ircaux.c	/^typedef struct _mo_money$/;"	s	file:
a	include/elf.h	/^    struct archive *a;$/;"	m	struct:epic_loadfile	typeref:struct:epic_loadfile::archive
a005	include/server.h	/^	A005	a005;			\/* 005 settings kept kere. *\/$/;"	m	struct:__anon8
a_addrany	source/gailib.c	/^	const char *a_addrany;$/;"	m	struct:afd	file:
a_addrlen	source/gailib.c	/^	int a_addrlen;$/;"	m	struct:afd	file:
a_af	source/gailib.c	/^	int a_af;$/;"	m	struct:afd	file:
a_loopback	source/gailib.c	/^	const char *a_loopback;	$/;"	m	struct:afd	file:
a_off	source/gailib.c	/^	int a_off;$/;"	m	struct:afd	file:
a_socklen	source/gailib.c	/^	int a_socklen;$/;"	m	struct:afd	file:
accept	acconfig.h	175;"	d
accept_server_nickname	source/server.c	/^void	accept_server_nickname (int refnum, const char *nick)$/;"	f
active	source/logfiles.c	/^	int	active;$/;"	m	struct:Logfile	file:
active	source/newio.c	/^	int		active;$/;"	m	struct:pthread_stuff	file:
active	source/ssl.c	/^	int	active;$/;"	m	struct:ssl_info_T	file:
activity	source/logfiles.c	/^	time_t	activity;$/;"	m	struct:Logfile	file:
activity_data	include/window.h	/^	char *	activity_data[11];$/;"	m	struct:WindowStru
activity_format	include/window.h	/^	char *	activity_format[11];$/;"	m	struct:WindowStru
add	script/history.rb	/^  def History.add(str)$/;"	F	class:History
add_binding	source/keys.c	/^static Binding *add_binding (const char *name, BindFunction func, char *alias) $/;"	f	file:
add_biv	source/vars.c	/^static int	add_biv (const char *name, int bucket, int type, void (*func) (void *), const char *script, ...)$/;"	f	file:
add_builtin_cmd_alias	source/alias.c	/^void	add_builtin_cmd_alias	(const char *name, void (*func) (const char *, char *, const char *))$/;"	f
add_builtin_expando	source/alias.c	/^void	add_builtin_expando	(const char *name, char *(*func) (void))$/;"	f
add_builtin_func_alias	source/alias.c	/^void	add_builtin_func_alias	(const char *name, char * (*func) (char *))$/;"	f
add_builtin_variable_alias	source/alias.c	/^void	add_builtin_variable_alias (const char *name, IrcVariable *var)$/;"	f
add_channel	source/names.c	/^void 	add_channel (const char *name, int server)$/;"	f
add_cmd_alias	source/alias.c	/^void	add_cmd_alias	(const char *orig_name, ArgList *arglist, const char *stuff)$/;"	f
add_cmd_stub_alias	source/alias.c	/^void	add_cmd_stub_alias  (const char *orig_name, const char *stuff)$/;"	f
add_hook	source/hook.c	/^static int	add_hook (int which, char *nick, ArgList *arglist, char *stuff, int noisy, int not, int sernum, int flexible)$/;"	f	file:
add_list_strcmp	source/list.c	/^static __inline__ int	add_list_strcmp (List *item1, List *item2)$/;"	f	file:
add_local_alias	source/alias.c	/^void	add_local_alias	(const char *orig_name, const char *stuff, int noisy)$/;"	f
add_mode_to_str	source/ircaux.c	/^void	add_mode_to_str (char *modes, size_t len, int mode)$/;"	f
add_new_level	source/levels.c	/^int	add_new_level (const char *name)$/;"	f
add_new_level_alias	source/levels.c	/^int	add_new_level_alias (int level, const char *name)$/;"	f
add_process_wait	source/exec.c	/^void	add_process_wait (int x, const char *y)		{ return; }$/;"	f
add_process_wait	source/exec.c	/^void 		add_process_wait (int proc_index, const char *cmd)$/;"	f
add_queue	source/queue.c	/^static void	add_queue (Queue **list, const char *name)$/;"	f	file:
add_server_altname	source/server.c	/^static void	add_server_altname (int refnum, char *altname)$/;"	f	file:
add_servers	source/server.c	/^void	add_servers (char *servers, const char *group)$/;"	f
add_timer	source/timer.c	/^char *add_timer (int update, const char *refnum_want, double interval, long events, int (callback) (void *), void *commands, const char *subargs, TimerDomain domain, int domref, int cancelable)$/;"	f
add_to_array	source/alist.c	/^array_item *add_to_array (array *a, array_item *item)$/;"	f
add_to_bucket	source/ircaux.c	/^void	add_to_bucket (Bucket *b, const char *name, void *stuff)$/;"	f
add_to_channel	source/names.c	/^void 	add_to_channel (const char *channel, const char *nick, int server, int suspicious, int oper, int voice, int ha)$/;"	f
add_to_crypt	source/crypt.c	/^static void	add_to_crypt (Char *nick, Char *serv, Char *key, Char *prog, int sed_type)$/;"	f	file:
add_to_display	source/window.c	/^static int	add_to_display (Window *window, const unsigned char *str, intmax_t refnum)$/;"	f	file:
add_to_invisible_list	source/window.c	/^void 	add_to_invisible_list (Window *window)$/;"	f
add_to_lastlog	source/lastlog.c	/^intmax_t	add_to_lastlog (Window *window, const char *line)$/;"	f
add_to_list	source/hook.c	/^static void 	add_to_list (Hook **list, Hook *item)$/;"	f	file:
add_to_list	source/list.c	/^void 	add_to_list (List **list, List *add)$/;"	f
add_to_log	source/log.c	/^void 	add_to_log (int logref, FILE *fp, long winref, const unsigned char *line, int mangler, const char *rewriter)$/;"	f
add_to_logs	source/logfiles.c	/^void	add_to_logs (long winref, int servref, const char *target, int level, const char *orig_str)$/;"	f
add_to_queue	source/queue.c	/^static int	add_to_queue (Queue **list, const char *name, const char *what, const char *subargs)$/;"	f	file:
add_to_screen	source/screen.c	/^void 	add_to_screen (const unsigned char *buffer)$/;"	f
add_to_scrollback	source/window.c	/^int 	add_to_scrollback (Window *window, const unsigned char *str, intmax_t refnum)$/;"	f
add_to_window	source/screen.c	/^static void 	add_to_window (Window *window, const unsigned char *str)$/;"	f	file:
add_to_window_list	source/window.c	/^Window *add_to_window_list (Screen *screen, Window *new_w)$/;"	f
add_to_window_scrollback	source/screen.c	/^void 	add_to_window_scrollback (Window *window, const unsigned char *str, intmax_t refnum)$/;"	f
add_user_end	source/numbers.c	/^static void	add_user_end (int refnum, const char *from, const char *comm, const char **ArgList)$/;"	f	file:
add_user_mode	source/server.c	/^static void	add_user_mode (int refnum, int mode)$/;"	f	file:
add_user_who	source/numbers.c	/^static void	add_user_who (int refnum, const char *from, const char *comm, const char **ArgList)$/;"	f	file:
add_userhost_to_channel	source/names.c	/^void 	add_userhost_to_channel (const char *channel, const char *nick, int server, const char *uh)$/;"	f
add_var_alias	source/alias.c	/^void	add_var_alias	(const char *orig_name, const char *stuff, int noisy)$/;"	f
add_var_stub_alias	source/alias.c	/^void	add_var_stub_alias  (const char *orig_name, const char *stuff)$/;"	f
add_wait_prompt	source/screen.c	/^void 	add_wait_prompt (const char *prompt, void (*func)(char *data, const char *utf8str), const char *data, int type, int echo)$/;"	f
add_waiting_channel	source/window.c	/^static	int	add_waiting_channel (Window *win, const char *chan)$/;"	f	file:
addr_counter	include/server.h	/^	int	addr_counter;		\/* How far we're into "addrs" *\/$/;"	m	struct:__anon8
addr_len	include/server.h	/^	ssize_t	addr_len;$/;"	m	struct:__anon8
addr_offset	include/server.h	/^	ssize_t	addr_offset;$/;"	m	struct:__anon8
addrinfo	include/irc_std.h	431;"	d
addrinfo__compat	include/irc_std.h	/^   struct addrinfo__compat {$/;"	s
addrs	include/server.h	/^	AI 	*addrs;			\/* Returned by getaddrinfo *\/$/;"	m	struct:__anon8
adjust_context_windows	source/window.c	/^static void	adjust_context_windows (unsigned old_win, unsigned new_win)$/;"	f	file:
aexpr	test.c	/^aexpr(n)$/;"	f	file:
afd	source/gailib.c	/^static struct afd {$/;"	s	file:
afdl	source/gailib.c	/^} afdl [] = {$/;"	v	typeref:struct:afd	file:
after_expando	source/ircaux.c	/^char *	after_expando (char *start, int lvalue, int *call)$/;"	f
after_expando_special	source/expr2.c	/^static  char *	after_expando_special (expr_info *c)$/;"	f	file:
ai_addr	include/irc_std.h	/^        struct sockaddr *ai_addr;       \/* binary address *\/$/;"	m	struct:addrinfo__compat	typeref:struct:addrinfo__compat::sockaddr
ai_addrlen	include/irc_std.h	/^        size_t  ai_addrlen;     \/* length of ai_addr *\/$/;"	m	struct:addrinfo__compat
ai_canonname	include/irc_std.h	/^        char    *ai_canonname;  \/* canonical name for hostname *\/$/;"	m	struct:addrinfo__compat
ai_errlist	source/gailib.c	/^static const char *ai_errlist[] = {$/;"	v	file:
ai_family	include/irc_std.h	/^        int     ai_family;      \/* PF_xxx *\/$/;"	m	struct:addrinfo__compat
ai_flags	include/irc_std.h	/^        int     ai_flags;       \/* AI_PASSIVE, AI_CANONNAME *\/$/;"	m	struct:addrinfo__compat
ai_next	include/irc_std.h	/^        struct addrinfo__compat *ai_next;    \/* next structure in linked list *\/$/;"	m	struct:addrinfo__compat	typeref:struct:addrinfo__compat::addrinfo__compat
ai_protocol	include/irc_std.h	/^        int     ai_protocol;    \/* 0 or IPPROTO_xxx for IPv4 and IPv6 *\/$/;"	m	struct:addrinfo__compat
ai_socktype	include/irc_std.h	/^        int     ai_socktype;    \/* SOCK_xxx *\/$/;"	m	struct:addrinfo__compat
alert	source/hook.c	/^	int	alert;		\/*  1 = "ON MSG hooked", 0 = shut up *\/$/;"	m	struct:NoiseInfo	file:
alias	source/alias.c	/^	SymbolSet alias;	\/* Local variables *\/$/;"	m	struct:RuntimeStackStru	file:
alias	source/keys.c	/^    char *	alias;		\/* OR alias to call.  one or the other. *\/$/;"	m	struct:Binding	file:
alias_away	source/functions.c	/^static	char	*alias_away 		(void) { return malloc_strdup(get_server_away(from_server)); }$/;"	f	file:
alias_banner	source/functions.c	/^static	char	*alias_banner		(void) { return malloc_strdup(banner()); }$/;"	f	file:
alias_buffer	source/functions.c	/^static	char	*alias_buffer 		(void) { return malloc_strdup(cut_buffer); }$/;"	f	file:
alias_channel	source/functions.c	/^static	char	*alias_channel 		(void) $/;"	f	file:
alias_chanop	source/functions.c	/^static	char	*alias_chanop 		(void)$/;"	f	file:
alias_cmdchar	source/functions.c	/^static	char	*alias_cmdchar 		(void)$/;"	f	file:
alias_currdir	source/functions.c	/^static	char	*alias_currdir  	(void)$/;"	f	file:
alias_current_numeric	source/functions.c	/^static	char	*alias_current_numeric	(void) { return malloc_sprintf(NULL, "%03d", current_numeric); }$/;"	f	file:
alias_detected	source/functions.c	/^static	char	*alias_detected 	(void) { return malloc_strdup(last_notify_nick); }$/;"	f	file:
alias_dollar	source/functions.c	/^static	char	*alias_dollar 		(void) { return malloc_strdup("$"); }$/;"	f	file:
alias_idle	source/functions.c	/^static  char    *alias_idle 		(void) { return malloc_sprintf(NULL, INTMAX_FORMAT, (intmax_t)time(NULL) - idle_time.tv_sec); }$/;"	f	file:
alias_invite	source/functions.c	/^static  char    *alias_invite           (void) { return malloc_strdup((get_server_invite_channel(from_server)) ? get_server_invite_channel(from_server) : empty_string); }$/;"	f	file:
alias_joined_nick	source/functions.c	/^static  char    *alias_joined_nick      (void) { return malloc_strdup((get_server_joined_nick(from_server)) ? get_server_joined_nick(from_server) : empty_string); }$/;"	f	file:
alias_line	source/functions.c	/^static	char	*alias_line 		(void) { return malloc_strdup(get_input()); }$/;"	f	file:
alias_modes	source/functions.c	/^static	char	*alias_modes 		(void)$/;"	f	file:
alias_msg_body	source/functions.c	/^static  char    *alias_msg_body         (void) { return malloc_strdup((get_server_sent_body(from_server)) ? get_server_sent_body(from_server) : empty_string); }$/;"	f	file:
alias_nick	source/functions.c	/^static	char	*alias_nick 		(void) { return malloc_strdup((current_window->server != NOSERV) ? get_server_nickname(current_window->server) : empty_string); }$/;"	f	file:
alias_online	source/functions.c	/^static  char    *alias_online 		(void) { return malloc_sprintf(NULL, INTMAX_FORMAT, (intmax_t)start_time.tv_sec); }$/;"	f	file:
alias_oper	source/functions.c	/^static	char	*alias_oper 		(void) { return malloc_strdup((from_server != -1) ? get_server_operator(from_server) ?  get_string_var(STATUS_OPER_VAR) : empty_string : empty_string); }$/;"	f	file:
alias_public_nick	source/functions.c	/^static  char    *alias_public_nick      (void) { return malloc_strdup((get_server_public_nick(from_server)) ? get_server_public_nick(from_server) : empty_string); }$/;"	f	file:
alias_query_nick	source/functions.c	/^static	char	*alias_query_nick 	(void)$/;"	f	file:
alias_recv_nick	source/functions.c	/^static  char    *alias_recv_nick        (void) { return malloc_strdup((get_server_recv_nick(from_server)) ? get_server_recv_nick(from_server) : empty_string); }$/;"	f	file:
alias_sent_nick	source/functions.c	/^static  char    *alias_sent_nick        (void) { return malloc_strdup((get_server_sent_nick(from_server)) ? get_server_sent_nick(from_server) : empty_string); }$/;"	f	file:
alias_server	source/functions.c	/^static	char	*alias_server 		(void)$/;"	f	file:
alias_server_version	source/functions.c	/^static	char	*alias_server_version  (void)$/;"	f	file:
alias_show_realname	source/functions.c	/^static  char    *alias_show_realname 	(void) { $/;"	f	file:
alias_show_userhost	source/functions.c	/^static  char    *alias_show_userhost 	(void) { return malloc_strdup(get_server_userhost(from_server)); }$/;"	f	file:
alias_special_char	source/expr.c	/^static	char	*alias_special_char (char **buffer, char *ptr, const char *args, char *quote_em)$/;"	f	file:
alias_string	source/expr.c	/^char *alias_string = NULL;$/;"	v
alias_target	source/functions.c	/^static	char	*alias_target 		(void)$/;"	f	file:
alias_time	source/functions.c	/^static	char	*alias_time 		(void) { return malloc_strdup(get_clock()); }$/;"	f	file:
alias_version	source/functions.c	/^static	char	*alias_version 		(void) { return malloc_strdup(internal_version); }$/;"	f	file:
alias_version_str	source/functions.c	/^static	char	*alias_version_str 	(void) { return malloc_strdup(irc_version); }$/;"	f	file:
aliascmd	include/alias.h	/^	BUILT_IN_COMMAND(aliascmd);$/;"	v
aliasctl	source/alias.c	/^char 	*aliasctl 	(char *input)$/;"	f
align	source/alloca.c	/^	char align[ALIGN_SIZE];	\/* To force sizeof(header).  *\/$/;"	m	union:hdr	file:
alist_func	include/alist.h	/^typedef int       (*alist_func) (const char *, const char *, size_t);$/;"	t
alist_searches	source/alist.c	/^u_32int_t	alist_searches;$/;"	v
alive	include/screen.h	/^	int	alive;$/;"	m	struct:ScreenStru
all_encoder	source/ircaux.c	/^static ssize_t	all_encoder (const char *orig, size_t orig_len, const void *meta, size_t meta_len, char *dest, size_t dest_len)$/;"	f	file:
all_keys_for_dbm	source/files.c	/^static char *	all_keys_for_dbm (int refnum)$/;"	f	file:
all_off	source/screen.c	/^const unsigned char *all_off (void)$/;"	f
allciphers	source/crypt.c	/^const char *allciphers = "SED or SEDSHA (sorry, no SSL support)";$/;"	v
allciphers	source/crypt.c	/^const char *allciphers = "SED, SEDSHA, CAST, BLOWFISH, AES or AESSHA";$/;"	v
alloc_size	source/ircaux.c	86;"	d	file:
alloc_table	source/ircaux.c	/^} alloc_table = { 0, NULL };$/;"	v	typeref:struct:__anon21
alloca	include/irc_std.h	163;"	d
alloca	source/alloca.c	/^pointer alloca (unsigned size)$/;"	f
altchar	source/screen.c	/^	unsigned char	altchar;$/;"	m	struct:attributes	file:
altnames	include/server.h	/^	Bucket	*altnames;		\/* Alternate handles for the server *\/$/;"	m	struct:__anon8
an_array	include/array.h	/^} an_array;$/;"	t	typeref:struct:an_array_struct
an_array_struct	include/array.h	/^typedef struct an_array_struct {$/;"	s
ansi_state	source/screen.c	/^static	unsigned char	ansi_state[128] = {$/;"	v	file:
anyptr	source/compat.c	/^typedef void* anyptr;$/;"	t	file:
arc4random	configure	/^arc4random();$/;"	f
arc4random	include/compat.h	28;"	d
archive_fgets	source/elf.c	/^static char *	archive_fgets(char *s, int n, struct archive *a)$/;"	f	file:
archive_fopen	source/elf.c	/^static int	archive_fopen(struct epic_loadfile *elf, char *filename, const char *ext, int do_error)$/;"	f	file:
archive_read_new	configure	/^archive_read_new()$/;"	f
arg_list	source/compat.c	/^} arg_list[10];$/;"	v	typeref:struct:arg_str	file:
arg_str	source/compat.c	/^static struct arg_str {$/;"	s	file:
argcnt	source/compat.c	/^static int argcnt;$/;"	v	file:
arglist	source/alias.c	/^	ArgList *arglist;		\/* List of arguments to alias *\/$/;"	m	struct:SymbolStru	file:
arglist	source/hook.c	/^	ArgList *arglist;	\/* \/on #type sernum nick (ARGLIST) stuff *\/$/;"	m	struct:hook_stru	file:
argnum	source/compat.c	/^	int	argnum;$/;"	m	struct:stack_str	file:
args	source/expr2.c	/^	const char	*args;$/;"	m	struct:__anon15	file:
array	include/alist.h	/^} array;$/;"	t	typeref:struct:__anon3
array_array	source/array.c	/^static an_array *array_array = (an_array *) 0;$/;"	v	file:
array_info	source/array.c	/^static an_array array_info = {$/;"	v	file:
array_item	include/alist.h	/^} array_item;$/;"	t	typeref:struct:__anon1
array_lookup	source/alist.c	/^array_item *array_lookup (array *a, const char *name, int wild, int rem)$/;"	f
array_pop	source/alist.c	/^array_item *array_pop (array *a, int which)$/;"	f
ascii_stricmp	source/ircaux.c	/^int	ascii_stricmp (const unsigned char *str1, const unsigned char *str2)$/;"	f
ascii_stricmp_table	source/ircaux.c	/^unsigned char ascii_stricmp_table [] = $/;"	v
ascii_strnicmp	source/ircaux.c	/^int	ascii_strnicmp (const unsigned char *str1, const unsigned char *str2, size_t n)$/;"	f
assigncmd	include/alias.h	/^	BUILT_IN_COMMAND(assigncmd);$/;"	v
assoc	source/expr2.c	/^static 	int 	assoc[TOKCOUNT] =$/;"	v	file:
async_getaddrinfo	source/network.c	/^pid_t	async_getaddrinfo (const char *nodename, const char *servname, const AI *hints, int fd)$/;"	f
attributes	source/screen.c	/^struct 	attributes {$/;"	s	file:
autoclose	include/server.h	/^	int	autoclose;		\/* Whether the server is closed when$/;"	m	struct:__anon8
away	include/server.h	/^	char	*away;			\/* away message for this server *\/$/;"	m	struct:__anon8
away	include/who.h	/^	int   	away;$/;"	m	struct:UserhostItemT
b64_decoder	source/ircaux.c	/^static ssize_t	b64_decoder (const char *orig, size_t orig_len, const void *meta, size_t meta_len, char *dest, size_t dest_len)$/;"	f	file:
b64_encoder	source/ircaux.c	/^static ssize_t	b64_encoder (const char *orig, size_t orig_len, const void *meta, size_t meta_len, char *dest, size_t dest_len)$/;"	f	file:
b64_general_decoder	source/ircaux.c	/^static ssize_t	b64_general_decoder (const char *orig, size_t orig_len, const void *meta, size_t meta_len, char *dest, size_t dest_len, const char *base)$/;"	f	file:
b64_general_encoder	source/ircaux.c	/^static ssize_t	b64_general_encoder (const char *orig, size_t orig_len, const void *meta, size_t meta_len, char *dest, size_t dest_len, const char *base)$/;"	f	file:
background	source/irc.c	/^int		background = 0;$/;"	v
backward_character	include/input.h	/^	BUILT_IN_KEYBINDING(backward_character);$/;"	v
backward_history	include/input.h	/^	BUILT_IN_KEYBINDING(backward_history);$/;"	v
bad	source/sdbm.c	75;"	d	file:
banghandler	script/history.rb	/^  def History.banghandler(str)$/;"	F	class:History
banner	source/numbers.c	/^const char *	banner (void)$/;"	f
base64_chars	source/ircaux.c	/^static char base64_chars[] =$/;"	v	file:
base_modes	source/names.c	/^	char 		base_modes[54];	\/* Just the modes w\/o args *\/$/;"	m	struct:channel_stru	file:
batch_notify_userhost	source/notify.c	/^void 	batch_notify_userhost (const char *nick)$/;"	f
batched_notifies	source/notify.c	/^static int 	batched_notifies = 0;$/;"	v	file:
batched_notify_userhosts	source/notify.c	/^static char *	batched_notify_userhosts = NULL;$/;"	v	file:
beep_always	include/window.h	/^	short	beep_always;		\/* True if a beep to win always beeps *\/$/;"	m	struct:WindowStru
beep_em	source/ircaux.c	/^void	beep_em (int beeps)$/;"	f
bf	source/functions.c	/^typedef char *(bf) (char *);$/;"	t	file:
bg_color	source/screen.c	/^	unsigned char	bg_color;$/;"	m	struct:attributes	file:
bin_chars	source/alist.c	/^u_32int_t	bin_chars;$/;"	v
bin_ints	source/alist.c	/^u_32int_t	bin_ints;$/;"	v
bind	acconfig.h	174;"	d
bind_compressed_string	source/keys.c	/^static int	bind_compressed_string (char *keyseq, int slen, const char *bindstr, char *args) $/;"	f	file:
bind_post_init	source/keys.c	/^	static	int	bind_post_init = 0;$/;"	v	file:
bind_stack	source/keys.c	/^static BindStack *bind_stack = NULL;$/;"	v	file:
bind_string	source/keys.c	/^static	int	bind_string (const char *sequence, const char *bindstr, char *args) $/;"	f	file:
bind_string_compress	source/keys.c	/^static char *	bind_string_compress (const char *str, int *len) $/;"	f	file:
bind_string_decompress	source/keys.c	/^static char *	bind_string_decompress (char *dst, const char *src, int srclen) $/;"	f	file:
bindcmd	include/keys.h	/^BUILT_IN_COMMAND(bindcmd);$/;"	v
bindctl	source/keys.c	/^char *	bindctl (char *input)$/;"	f
bindctl_getmap	source/keys.c	/^static void	bindctl_getmap (Key *map, const char *str, int len, char **ret) $/;"	f	file:
binding_list	source/keys.c	/^	static	Binding *binding_list; $/;"	v	file:
bindir	Makefile	/^bindir      = ${exec_prefix}\/bin$/;"	m
binop	test.c	/^binop()$/;"	f	file:
bisearch	source/wcwidth.c	/^static int bisearch (int ucs, const struct interval *table, int max) {$/;"	f	file:
bitcount	source/sha2.c	/^        u_int64_t       bitcount;$/;"	m	struct:_SHA256_CTX	file:
bitcount	source/sha2.c	/^        uint64_t        bitcount;$/;"	m	struct:_SHA256_CTX	file:
bless_local_stack	source/alias.c	/^void	bless_local_stack	(void)$/;"	f
blink	source/screen.c	/^	unsigned char	blink;$/;"	m	struct:attributes	file:
blkno	source/sdbm.c	/^	long blkno;		       \/* current page to read\/write *\/$/;"	m	struct:SDBM	file:
blkptr	source/sdbm.c	/^	long blkptr;		       \/* current block for nextkey *\/$/;"	m	struct:SDBM	file:
block_signal	source/ircsig.c	/^int	block_signal (int sig_no)$/;"	f
bold	source/screen.c	/^	unsigned char	bold;$/;"	m	struct:attributes	file:
boolean_value	source/expr2.c	/^	short	boolean_value;		\/* Cached boolean value *\/$/;"	m	struct:TOKEN_type	file:
bottom	include/window.h	/^	short	bottom;			\/* SCREEN line for bottom of window *\/$/;"	m	struct:WindowStru
bound	source/keys.c	/^    Binding *	bound; 		\/* the function we're bound to. *\/$/;"	m	struct:Key	file:
break_exception	source/commands.c	/^	int	break_exception = 0;$/;"	v
bsd_arc4_addrandom	source/compat.c	/^static void	bsd_arc4_addrandom (ARC4 *as, unsigned char *dat, int datlen)$/;"	f	file:
bsd_arc4_getbyte	source/compat.c	/^static unsigned char		bsd_arc4_getbyte (ARC4 *as)$/;"	f	file:
bsd_arc4_getword	source/compat.c	/^static u_32int_t	bsd_arc4_getword (ARC4 *as)$/;"	f	file:
bsd_arc4_init	source/compat.c	/^static void	bsd_arc4_init (ARC4 *as)$/;"	f	file:
bsd_arc4_stir	source/compat.c	/^static void	bsd_arc4_stir (ARC4 *as)$/;"	f	file:
bsd_arc4_stream	source/compat.c	/^struct bsd_arc4_stream {$/;"	s	file:
bsd_arc4random	source/compat.c	/^u_32int_t	bsd_arc4random (void)$/;"	f
bsd_arc4random_addrandom	source/compat.c	/^void	bsd_arc4random_addrandom (unsigned char *dat, int datlen)$/;"	f
bsd_arc4random_stir	source/compat.c	/^void	bsd_arc4random_stir (void)$/;"	f
bsd_glob	source/glob.c	/^int bsd_glob		(	const char *pattern,$/;"	f
bsd_globfree	source/glob.c	/^void bsd_globfree 		(	glob_t *pglob			)$/;"	f
bucket_local_alias	source/alias.c	/^static void	bucket_local_alias (Bucket *b, const char *name)$/;"	f	file:
buf	source/term.c	/^	char 		 buf[TIOBUFSZ];$/;"	m	struct:tio_qentry_stru	file:
buf	source/term.c	/^	tio_qentry	*buf;$/;"	m	struct:tio_file_stru	file:
buffer	source/hook.c	/^	char *buffer;$/;"	m	struct:Current_hook	file:
buffer	source/newio.c	/^	char 		buffer[8192];$/;"	m	struct:pthread_stuff	file:
buffer	source/newio.c	/^	char *	buffer;$/;"	m	struct:myio_struct	file:
buffer	source/sha2.c	/^        u_int8_t        buffer[SHA256_BLOCK_LENGTH];$/;"	m	struct:_SHA256_CTX	file:
buffer	source/sha2.c	/^        uint8_t buffer[SHA256_BLOCK_LENGTH];$/;"	m	struct:_SHA256_CTX	file:
buffer	source/wserv.c	/^static	char	buffer[256];$/;"	v	file:
buffer_changed	source/hook.c	/^	int buffer_changed;$/;"	m	struct:Current_hook	file:
buffer_size	source/newio.c	/^	size_t	buffer_size,$/;"	m	struct:myio_struct	file:
build_status	source/status.c	/^void	build_status	(void *stuff)$/;"	f
build_status_format	source/status.c	/^static void	build_status_format (Status *s, int k)$/;"	f	file:
built_in	source/functions.c	/^static	BuiltIns built_in[] =$/;"	v	file:
built_in_functions	source/functions.c	/^static BuiltInFunctions	built_in_functions[] =$/;"	v	file:
builtin_command	source/alias.c	/^        void    (*builtin_command) (const char *, char *, const char *);$/;"	m	struct:SymbolStru	file:
builtin_expando	source/alias.c	/^	char *	(*builtin_expando) (void);$/;"	m	struct:SymbolStru	file:
builtin_function	source/alias.c	/^	char *	(*builtin_function) (char *);$/;"	m	struct:SymbolStru	file:
builtin_variable	include/vars.h	/^typedef union builtin_variable {$/;"	u
builtin_variable	source/alias.c	/^	IrcVariable *	builtin_variable;$/;"	m	struct:SymbolStru	file:
bytes_acked	source/dcc.c	/^	intmax_t	bytes_acked;		\/* IM *\/$/;"	m	struct:DCC_struct	file:
bytes_read	source/dcc.c	/^	intmax_t	bytes_read;		\/* INTMAX *\/$/;"	m	struct:DCC_struct	file:
bytes_sent	source/dcc.c	/^	intmax_t	bytes_sent;		\/* IM *\/$/;"	m	struct:DCC_struct	file:
calc_size	source/dcc.c	/^static char *	calc_size (intmax_t fsize, char *retval, size_t retsize)$/;"	f	file:
calc_speed	source/dcc.c	/^static char *	calc_speed (intmax_t sofar, Timeval sta, Timeval cur)$/;"	f	file:
call_function	source/functions.c	/^char	*call_function (char *name, const char *args)$/;"	f
call_lambda_command	source/commands.c	/^void	call_lambda_command (const char *name, const char *what, const char *args)$/;"	f
call_lambda_function	source/commands.c	/^char *  call_lambda_function (const char *name, const char *what, const char *args)$/;"	f
call_stack	source/alias.c	/^static 	RuntimeStack *call_stack = NULL;$/;"	v	file:
call_user_command	source/commands.c	/^void	call_user_command (const char *alias_name, const char *alias_stuff, char *args, void *arglist)$/;"	f
call_user_function	source/commands.c	/^char 	*call_user_function	(const char *alias_name, const char *alias_stuff, char *args, void *arglist)$/;"	f
callback	source/clock.c	/^	void	(*callback) (void);$/;"	m	struct:system_timer	file:
callback	source/newio.c	/^	void	(*callback) (int vfd);$/;"	m	struct:myio_struct	file:
callback	source/timer.c	/^	int	(*callback) (void *);$/;"	m	struct:timerlist_stru	file:
callback_data	source/timer.c	/^	void *	callback_data;$/;"	m	struct:timerlist_stru	file:
callback_function	source/status.c	/^	Char	*(*callback_function)(Window *, short, char);$/;"	m	struct:status_formats	file:
cancelable	source/timer.c	/^	int	cancelable;$/;"	m	struct:timerlist_stru	file:
canon_number	source/expr.c	/^char *canon_number (char *input)$/;"	f
cant_join_channel	source/names.c	/^void	cant_join_channel (const char *channel, int server)$/;"	f
cap2info	source/term.c	/^typedef struct cap2info$/;"	s	file:
cap2info	source/term.c	/^} cap2info;$/;"	t	typeref:struct:cap2info	file:
capstr	include/termx.h	603;"	d
ccspan	source/ircaux.c	/^size_t 	ccspan (const char *string, int s)$/;"	f
cd_device	contrib/cdrom.c	/^static char *cd_device = NULL;$/;"	v	file:
cd_eject	contrib/cdrom.c	/^void cd_eject(IrcCommandDll *interp, char *command, char *args, char *subargs)$/;"	f
cd_help	contrib/cdrom.c	/^void cd_help(IrcCommandDll *interp, char *command, char *args, char *subargs)$/;"	f
cd_init	contrib/cdrom.c	/^int cd_init(char *dev)$/;"	f
cd_list	contrib/cdrom.c	/^void cd_list(IrcCommandDll *interp, char *command, char *args, char *subargs)$/;"	f
cd_pause	contrib/cdrom.c	/^void cd_pause(IrcCommandDll *interp, char *command, char *args, char *subargs)$/;"	f
cd_play	contrib/cdrom.c	/^void cd_play(IrcCommandDll *interp, char *command, char *args, char *subargs)$/;"	f
cd_stop	contrib/cdrom.c	/^void cd_stop(IrcCommandDll *interp, char *command, char *args, char *subargs)$/;"	f
cd_volume	contrib/cdrom.c	/^void cd_volume(IrcCommandDll *interp, char *command, char *args, char *subargs)$/;"	f
cdrom_prompt	contrib/cdrom.c	/^static char cdrom_prompt[]="%gC%Gd%gROM%w";$/;"	v	file:
change_ignore_mask_by_desc	source/ignore.c	/^static int	change_ignore_mask_by_desc (const char *type, Mask *do_mask, Mask *dont_mask, char **reason, Timeval *expire)$/;"	f	file:
change_line	include/window.h	/^	short	change_line;		\/* True if this is a scratch window *\/$/;"	m	struct:WindowStru
change_line	source/window.c	/^static int	change_line (Window *window, const unsigned char *str)$/;"	f	file:
change_server_nickname	source/server.c	/^void	change_server_nickname (int refnum, const char *nick)$/;"	f
change_window_server	source/window.c	/^void	change_window_server (int old_server, int new_server)$/;"	f
changed	source/keys.c	/^    char   	changed; 	\/* 1 if this binding was changed post-startup *\/$/;"	m	struct:Key	file:
chanmodetype	source/names.c	/^int	chanmodetype (char mode)$/;"	f
channel	source/flood.c	/^	char		*channel;$/;"	m	struct:flood_stru	file:
channel	source/names.c	/^	char *		channel;	\/* channel name *\/$/;"	m	struct:channel_stru	file:
channel	source/newio.c	/^	int	channel;		\/* XXX Future expansion XXX *\/$/;"	m	struct:myio_struct	file:
channel	source/ssl.c	/^	int	channel;$/;"	m	struct:ssl_info_T	file:
channel_check_windows	source/names.c	/^void	channel_check_windows (void)$/;"	f
channel_format	source/status.c	/^static	char	*channel_format 	= (char *) 0;$/;"	v	file:
channel_hold_election	source/names.c	/^static void	channel_hold_election (int winref)$/;"	f	file:
channel_is_syncing	source/names.c	/^int	channel_is_syncing (const char *channel, int server)$/;"	f
channel_list	source/names.c	/^static	Channel *	channel_list = NULL;$/;"	v	file:
channel_not_waiting	source/names.c	/^void	channel_not_waiting (const char *channel, int server)$/;"	f
channel_stru	source/names.c	/^typedef	struct	channel_stru$/;"	s	file:
channels_merge_winrefs	source/names.c	/^void	channels_merge_winrefs (int oldref, int newref)$/;"	f
channels_swap_winrefs	source/names.c	/^void	channels_swap_winrefs (int oldref, int newref)$/;"	f
chanop	source/names.c	/^	short	chanop;		\/* True if they are a channel operator *\/$/;"	m	struct:nick_stru	file:
char_searches	source/alist.c	/^u_32int_t	char_searches;$/;"	v
charcount	source/ircaux.c	/^int	charcount (const char *string, char what)$/;"	f
check_array_size	source/alist.c	/^static void check_array_size (array *a)$/;"	f	file:
check_cdrom_str	contrib/cdrom.c	/^static int check_cdrom_str(void)$/;"	f	file:
check_channel_type	source/names.c	/^const char *	check_channel_type (const char *channel)$/;"	f
check_flooding	source/flood.c	/^int	check_flooding (const char *nick, const char *nuh, int mask, const char *line)$/;"	f
check_ignore	source/ignore.c	/^int	check_ignore (const char *nick, const char *uh, int mask)$/;"	f
check_ignore_channel	source/ignore.c	/^int	check_ignore_channel (const char *nick, const char *uh, const char *channel, int level)$/;"	f
check_implied_arg	source/expr2.c	/^static __inline int	check_implied_arg (expr_info *c)$/;"	f	file:
check_invalid_host	source/irc.c	/^static void check_invalid_host (void)$/;"	f	file:
check_mail	source/mail.c	/^const char *	check_mail (void)$/;"	f
check_message_from_queue	source/window.c	/^void	check_message_from_queue (void)$/;"	f
check_mount	contrib/cdrom.c	/^static int check_mount(char *device)$/;"	f	file:
check_nickname	source/ircaux.c	/^char *	check_nickname (char *nick, int unused)$/;"	f
check_password	source/irc.c	/^static void check_password (void)$/;"	f	file:
check_recoding_iconv	source/recode.c	/^static const char *	check_recoding_iconv (RecodeRule *r, iconv_t *inbound, iconv_t *outbound)$/;"	f	file:
check_server_redirect	source/server.c	/^int	check_server_redirect (int refnum, const char *who)$/;"	f
check_server_wait	source/server.c	/^int	check_server_wait (int refnum, const char *nick)$/;"	f
check_val	source/ircaux.c	/^int 	check_val (const char *sub)$/;"	f
check_valid_user	source/irc.c	/^static void check_valid_user (void)$/;"	f	file:
check_window_cursor	source/window.c	/^void	check_window_cursor (Window *window)$/;"	f
check_xdigit	source/ircaux.c	/^int	check_xdigit (unsigned char digit)$/;"	f
checkmail	source/mail.c	/^struct mail_checker *checkmail = NULL;$/;"	v	typeref:struct:mail_checker
chomp	source/ircaux.c	/^char *	chomp (char *s)$/;"	f
chop	source/ircaux.c	/^char *	chop	(char *stuff, size_t nchar)$/;"	f
chop	source/names.c	/^	char		chop;		\/* true if i'm a channel operator *\/$/;"	m	struct:channel_stru	file:
chop_columns	source/screen.c	/^void	chop_columns (unsigned char **str, size_t num)$/;"	f
chop_final_columns	source/screen.c	/^void	chop_final_columns (unsigned char **str, size_t num)$/;"	f
chop_word	source/ircaux.c	/^char *	chop_word (char *str)$/;"	f
ci_alist_hash	include/alist.h	/^static __inline u_32int_t  ci_alist_hash (const char *s, u_32int_t *mask)$/;"	f
cipher_evp	source/crypto.c	/^static char *	cipher_evp (const unsigned char *key, int keylen, const unsigned char *plaintext, int plaintextlen, const EVP_CIPHER *type, int *retsize, int ivsize)$/;"	f	file:
cipher_message	source/crypto.c	/^unsigned char *	cipher_message (const unsigned char *orig_message, size_t len, Crypt *key, int *retlen)$/;"	f
ciphers	source/crypt.c	/^struct ciphertypes ciphers[] = {$/;"	v	typeref:struct:ciphertypes
ciphertypes	source/crypt.c	/^struct ciphertypes {$/;"	s	file:
claim_waiting_channel	source/window.c	/^int	claim_waiting_channel (const char *chan, int servref)$/;"	f
clean	include/server.h	/^	int	clean;$/;"	m	struct:ServerInfo
clean	source/newio.c	/^		clean,$/;"	m	struct:myio_struct	file:
clean_keymap	source/keys.c	/^static int	clean_keymap (Key *map) $/;"	f	file:
clean_log_targets	source/logfiles.c	/^static void	clean_log_targets (Logfile *log)$/;"	f	file:
clean_server_queues	source/who.c	/^void	clean_server_queues (int i)$/;"	f
clean_up_processes	source/exec.c	/^void	clean_up_processes (void)			{ return; }$/;"	f
clean_up_processes	source/exec.c	/^void 		clean_up_processes (void)$/;"	f
cleanse_crypto_item	source/crypt.c	/^static void	cleanse_crypto_item (Crypt *item)$/;"	f	file:
cleanse_indicator	source/window.c	/^static void	cleanse_indicator (Window *w)$/;"	f	file:
cleanup_dead_processes	source/exec.c	/^static void 	cleanup_dead_processes (void)$/;"	f	file:
clear_all_windows	source/window.c	/^void 	clear_all_windows (int visible, int hidden, int unhold)$/;"	f
clear_channel	source/names.c	/^static void 	clear_channel (Channel *chan)$/;"	f	file:
clear_crypto_list	source/crypt.c	/^static	void	clear_crypto_list (void)$/;"	f	file:
clear_modes	source/ircaux.c	/^void 	clear_modes (char *modes)$/;"	f
clear_serverinfo	source/server.c	/^int	clear_serverinfo (ServerInfo *s)$/;"	f
clear_user_modes	source/server.c	/^void 	clear_user_modes (int refnum)$/;"	f
clear_window	source/window.c	/^static void 	clear_window (Window *window)$/;"	f	file:
clear_window_by_refnum	source/window.c	/^void 	clear_window_by_refnum (unsigned refnum, int unhold)$/;"	f
client_bind	source/network.c	/^int	client_bind (SA *local, socklen_t local_len)$/;"	f
client_connect	source/network.c	/^int	client_connect (SA *l, socklen_t ll, SA *r, socklen_t rl)$/;"	f
client_ssl_enabled	source/ssl.c	/^int	client_ssl_enabled (void)$/;"	f
clock_format	source/status.c	/^static	char	*clock_format 		= (char *) 0;$/;"	v	file:
clock_gettime	configure	/^clock_gettime()$/;"	f
clock_gettime	configure	/^clock_gettime();$/;"	f
clock_systimer	source/clock.c	/^void	clock_systimer (void)$/;"	f
clock_timeref	source/clock.c	/^	char		clock_timeref[] = "CLKTIM";$/;"	v
clone_arglist	source/alias.c	/^ArgList *clone_arglist (ArgList *orig)$/;"	f
clone_biv	source/vars.c	/^IrcVariable *	clone_biv (IrcVariable *old)$/;"	f
clone_timer	source/timer.c	/^static Timer *clone_timer (Timer *otimer)$/;"	f	file:
close	source/term.c	/^	int		 len, flush, close;$/;"	m	struct:tio_qentry_stru	file:
close_all_dbms	source/files.c	/^void	close_all_dbms (void)$/;"	f
close_all_dcc	source/dcc.c	/^void 	close_all_dcc (void)$/;"	f
close_all_servers	source/server.c	/^int 	close_all_servers (const char *message)$/;"	f
close_dbm	source/files.c	/^static int	close_dbm (int refnum)$/;"	f	file:
close_log	source/log.c	/^static FILE *	close_log (FILE **fp)$/;"	f	file:
close_server	source/server.c	/^void	close_server (int refnum, const char *message)$/;"	f
closing	include/server.h	/^	int	closing;		\/* True if close_server called *\/$/;"	m	struct:__anon8
cmd	script/history.rb	/^  def History.cmd(args)$/;"	F	class:History
cmd	source/wserv.c	/^static	int	cmd = -1;$/;"	v	file:
cmds	source/commands.c	/^	char *	cmds;$/;"	m	struct:defer	file:
cnt	source/flood.c	/^	long		cnt;$/;"	m	struct:flood_stru	file:
cntl_c_hit	source/irc.c	/^volatile int	cntl_c_hit = 0;$/;"	v
co	include/screen.h	/^	int	co;$/;"	m	struct:ScreenStru
co	source/term.c	/^static	int	co;$/;"	v	file:
codepoint_numcolumns	source/wcwidth.c	/^int	codepoint_numcolumns (int ucs)$/;"	f
color_bg	source/screen.c	/^	unsigned char	color_bg;$/;"	m	struct:attributes	file:
color_fg	source/screen.c	/^	unsigned char	color_fg;$/;"	m	struct:attributes	file:
comma	source/irc.c	/^		comma[] = ",";$/;"	v
command	include/parse.h	/^	const char	*command;$/;"	m	struct:__anon5
command	source/commands.c	/^	const char *command;$/;"	m	struct:target_type	file:
command	source/debug.c	/^	const char *	command;$/;"	m	struct:debug_opts	file:
command	source/logfiles.c	/^	const char *	command;$/;"	m	struct:logfile_ops_T	file:
command	source/timer.c	/^        char *	command;$/;"	m	struct:timerlist_stru	file:
command	source/window.c	/^	const char 	*command;$/;"	m	struct:window_ops_T	file:
command_completion	include/input.h	/^	BUILT_IN_KEYBINDING(command_completion);$/;"	v
command_exist	source/commands.c	/^int	command_exist (char *command)$/;"	f
commit_id	source/irc.c	/^const unsigned long	commit_id = 1794;$/;"	v
comp_func	include/ircaux.h	/^typedef int 	comp_func 		(char *, char *);$/;"	t
comp_len_func	include/ircaux.h	/^typedef int 	comp_len_func 		(char *, char *, int);$/;"	t
compare	source/glob.c	/^static int compare		(	const void *p,$/;"	f	file:
compare_indices	source/array.c	/^static int compare_indices (const void *a1, const void *a2)$/;"	f	file:
compile_status	source/status.c	/^void	compile_status (Window *w, Status *s)$/;"	f
compile_time_options	include/options.h	/^const char compile_time_options[] = {$/;"	v
cond	source/newio.c	/^pthread_cond_t		cond;$/;"	v
connect	acconfig.h	172;"	d
connect_next_server_address	source/server.c	/^static int	connect_next_server_address (int server)$/;"	f	file:
connect_to_server	source/server.c	/^int 	connect_to_server (int new_server)$/;"	f
connected	include/who.h	/^	int	connected;$/;"	m	struct:UserhostItemT
connected_to_server	source/server.c	/^	int	connected_to_server = 0;	\/* How many active server $/;"	v
connectory	source/wserv.c	/^static int	connectory (const char *host, const char *port)$/;"	f	file:
construct_keymap	source/keys.c	/^static Key *	construct_keymap (Key *owner) $/;"	f	file:
context_counter	source/window.c	/^int 			context_counter = -1;$/;"	v
context_max	source/window.c	/^int			context_max = -1;$/;"	v
contexts	source/window.c	/^struct output_context *	contexts = NULL;$/;"	v	typeref:struct:output_context
continue_exception	source/commands.c	/^	int	continue_exception = 0;$/;"	v
control	include/screen.h	/^	int	control;		\/* The control FD (to wserv) *\/$/;"	m	struct:ScreenStru
control_mangle	source/term.c	/^static char *	control_mangle (unsigned char *text)$/;"	f	file:
convert_sub_format	source/status.c	/^char	*convert_sub_format (const char *format, char c)$/;"	f
cookie	include/server.h	/^	char 	*cookie;		\/* Erf\/TS4 "cookie" value *\/$/;"	m	struct:__anon8
copy_key	source/crypto.c	/^static void	copy_key (const char *orig, size_t orig_len, char **key, size_t *keylen)$/;"	f	file:
count	include/status.h	/^        int   		count;$/;"	m	struct:status_line
count	include/window.h	/^	size_t			count;$/;"	m	struct:DisplayStru
count_char	source/ircaux.c	/^int 	count_char (const unsigned char *src, const unsigned char look)$/;"	f
count_fixed_windows	source/window.c	/^static int	count_fixed_windows (Screen *s)$/;"	f	file:
count_words	source/words.c	/^int	count_words (const char *str, int extended, const char *quotes)$/;"	f
counter	include/window.h	/^	int		counter;$/;"	m	struct:WNickListStru
counter	source/debuglog.c	/^static	int	counter = 0;$/;"	v	file:
counter	source/exec.c	/^	int	counter;		\/* output line counter for process *\/$/;"	m	struct:__anon14	file:
counter	source/ignore.c	/^	int	counter;		\/* How many times it has triggered *\/$/;"	m	struct:IgnoreStru	file:
cparse	contrib/cdrom.c	19;"	d	file:
cpindex	source/ircaux.c	/^const unsigned char *	cpindex (const unsigned char *string, const unsigned char *search, int howmany, size_t *cpoffset)$/;"	f
cpu_saver	source/clock.c	/^	int	cpu_saver = 0;$/;"	v
cpu_saver_format	source/status.c	/^static	char	*cpu_saver_format 	= (char *) 0;$/;"	v	file:
cpu_saver_on	include/clock.h	/^	BUILT_IN_KEYBINDING(cpu_saver_on);$/;"	v
cpu_saver_on	include/input.h	/^	BUILT_IN_KEYBINDING(cpu_saver_on);$/;"	v
cpu_saver_timer	source/clock.c	/^int	cpu_saver_timer (void *schedule_only)$/;"	f
cpu_saver_timeref	source/clock.c	/^static const char cpu_saver_timeref[] = "CPUTIM";$/;"	v	file:
create_additional_screen	source/screen.c	/^Window	*create_additional_screen (void)$/;"	f
create_channel	source/names.c	/^static Channel *create_channel (const char *name, int server)$/;"	f	file:
create_channel_list	source/names.c	/^char *	create_channel_list (int server)$/;"	f
create_chops_list	source/names.c	/^char	*create_chops_list (const char *name, int server)$/;"	f
create_new_screen	source/screen.c	/^void	create_new_screen (void)$/;"	f
create_nick_list	source/names.c	/^char	*create_nick_list (const char *name, int server)$/;"	f
create_nochops_list	source/names.c	/^char	*create_nochops_list (const char *name, int server)$/;"	f
create_recoding_rule	source/recode.c	/^static RecodeRule *	create_recoding_rule (const char *target, const char *encoding, int magic, int source)$/;"	f	file:
create_server_list	source/server.c	/^char *	create_server_list (void)$/;"	f
create_timer_ref	source/timer.c	/^static	int	create_timer_ref (const char *refnum_wanted, char **refnum_gets)$/;"	f	file:
create_utf8_locale	source/recode.c	/^void	create_utf8_locale (void)$/;"	f
created	source/lastlog.c	/^	time_t	created;$/;"	m	struct:lastlog_stru	file:
creation	source/ignore.c	/^	Timeval	creation;		\/* When it was created *\/$/;"	m	struct:IgnoreStru	file:
crypt	configure	/^crypt()$/;"	f
crypt_decoder	source/ircaux.c	/^static ssize_t	crypt_decoder (const char *orig, size_t orig_len, const void *meta, size_t meta_len, char *dest, size_t dest_len)$/;"	f	file:
crypt_encoder	source/ircaux.c	/^static ssize_t	crypt_encoder (const char *orig, size_t orig_len, const void *meta, size_t meta_len, char *dest, size_t dest_len)$/;"	f	file:
crypt_list	source/crypt.c	/^static	Crypt	*crypt_list = (Crypt *) 0;$/;"	v	file:
crypt_msg	source/crypt.c	/^char *	crypt_msg (const unsigned char *str, Crypt *key)$/;"	f
cs_alist_hash	include/alist.h	/^static __inline u_32int_t  cs_alist_hash (const char *s, u_32int_t *mask)$/;"	f
ctcp_cmd	source/ctcp.c	/^static CtcpEntry ctcp_cmd[] =$/;"	v	file:
ctcp_decoder	source/ircaux.c	/^static ssize_t	ctcp_decoder (const char *orig, size_t orig_len, const void *meta, size_t meta_len, char *dest, size_t dest_len)$/;"	f	file:
ctcp_encoder	source/ircaux.c	/^static ssize_t	ctcp_encoder (const char *orig, size_t orig_len, const void *meta, size_t meta_len, char *dest, size_t dest_len)$/;"	f	file:
ctcp_type	source/crypt.c	/^	int	ctcp_type;$/;"	m	struct:ciphertypes	file:
ctcp_type	source/ctcp.c	/^static const char	*ctcp_type[] =$/;"	v	file:
ctcpname	source/crypt.c	/^	const char *ctcpname;$/;"	m	struct:ciphertypes	file:
ctx	source/ssl.c	/^	SSL_CTX	*ctx;$/;"	m	struct:ssl_info_T	file:
curbit	source/sdbm.c	/^	long curbit;		       \/* current bit number *\/$/;"	m	struct:SDBM	file:
curr_count	source/names.c	/^	int		curr_count;	\/* Current channel precedence *\/$/;"	m	struct:channel_stru	file:
current	source/alias.c	/^	char 	*current;	\/* Current cmd being executed *\/$/;"	m	struct:RuntimeStackStru	file:
current_activity	include/window.h	/^	short	current_activity;$/;"	m	struct:WindowStru
current_address	source/alloca.c	/^    long current_address;	\/* Current stack segment address.  *\/$/;"	m	struct:stk_stat	file:
current_channel_counter	source/names.c	/^static	int	current_channel_counter = 0;$/;"	v	file:
current_clock	source/clock.c	/^static	char		current_clock[256];$/;"	v	file:
current_command	source/commands.c	/^const char *current_command = NULL;$/;"	v
current_display_counter	source/window.c	/^static	int	current_display_counter = 1;$/;"	v	file:
current_filename	source/commands.c	/^const char *current_filename (void) $/;"	f
current_ftarget	include/termx.h	30;"	d
current_hook	source/hook.c	/^static struct Current_hook *current_hook = NULL;$/;"	v	typeref:struct:Current_hook	file:
current_implied_on_hook	source/hook.c	/^static	const char *		current_implied_on_hook = NULL;$/;"	v	file:
current_line	source/commands.c	/^int	current_line (void)$/;"	f
current_loader	source/commands.c	/^const char *current_loader (void) $/;"	f
current_log_refnum	source/log.c	/^	int	current_log_refnum = -1;$/;"	v
current_numeric	source/irc.c	/^int		current_numeric = -1;$/;"	v
current_package	source/commands.c	/^const char *current_package (void)$/;"	f
current_query_counter	source/window.c	/^static  int     current_query_counter = 0;$/;"	v	file:
current_refnum	source/window.c	/^unsigned	current_refnum (void)$/;"	f
current_screen	source/input.c	117;"	d	file:
current_size	source/alloca.c	/^    long current_size;		\/* Current stack segment size.  This$/;"	m	struct:stk_stat	file:
current_term	source/term.c	/^struct my_term *current_term = &TI;$/;"	v	typeref:struct:my_term
current_window	include/screen.h	/^	Window	*current_window;	\/* Current primary window target *\/$/;"	m	struct:ScreenStru
current_window	source/window.c	/^	Window	*current_window = NULL;$/;"	v
current_window_mask	source/lastlog.c	/^	Mask 	current_window_mask;$/;"	v
current_window_priority	source/window.c	/^	unsigned current_window_priority = 1;$/;"	v
cursor	include/window.h	/^	short	cursor;			\/* WINDOW line where the cursor is *\/$/;"	m	struct:WindowStru
cursor_in_display	source/screen.c	/^void 	cursor_in_display (Window *w)$/;"	f
cursor_not_in_display	source/screen.c	/^void 	cursor_not_in_display (Screen *s)$/;"	f
cursor_position	source/input.c	/^int	cursor_position (void *vp)$/;"	f
cursor_to_input	source/input.c	/^void 	cursor_to_input (void)$/;"	f
cursor_window	include/screen.h	/^	Window	*cursor_window;		\/* The window that has my cursor *\/$/;"	m	struct:ScreenStru
custom	source/hook.c	/^	int	custom;$/;"	m	struct:NoiseInfo	file:
cut_buffer	source/irc.c	/^unsigned char	*cut_buffer = (unsigned char *) 0;	\/* global cut_buffer *\/$/;"	v
cut_input	source/input.c	/^static void	cut_input (int start, int end)$/;"	f	file:
cvtchar	source/compat.c	/^static int cvtchar (const char *sp, char *c)$/;"	f	file:
d_nickname	include/server.h	/^	char	*d_nickname;		\/* Default nickname to use *\/$/;"	m	struct:__anon8
dalnet_extended	include/who.h	/^	int  dalnet_extended;$/;"	m	struct:WhoEntryT
dalnet_extended_args	include/who.h	/^	char *dalnet_extended_args;$/;"	m	struct:WhoEntryT
data	include/screen.h	/^	char *		data;$/;"	m	struct:PromptStru
data	include/vars.h	/^        VARIABLE *      data;           \/* The value of the variable *\/$/;"	m	struct:__anon10
data	source/wserv.c	/^static 	int 	data = -1;$/;"	v	file:
db	source/files.c	/^	SDBM *	db;$/;"	m	struct:DBM___	file:
db_refnum	source/files.c	/^static int	db_refnum = 0;$/;"	v	file:
dbmctl	source/files.c	/^char *	dbmctl (char *input)$/;"	f
dcc_chat	source/dcc.c	/^static void dcc_chat (char *args)$/;"	f	file:
dcc_chat_active	source/dcc.c	/^int	dcc_chat_active (const char *user)$/;"	f
dcc_chat_subcmd	source/dcc.c	/^DCC_SUBCOMMAND(dcc_chat_subcmd);$/;"	v
dcc_chat_transmit	source/dcc.c	/^void	dcc_chat_transmit (char *user, char *text, const char *orig, const char *type, int noisy)$/;"	f
dcc_close	source/dcc.c	/^static void dcc_close (char *args)$/;"	f	file:
dcc_close_subcmd	source/dcc.c	/^DCC_SUBCOMMAND(dcc_close_subcmd);$/;"	v
dcc_closeall	source/dcc.c	/^static void dcc_closeall (char *args)$/;"	f	file:
dcc_closeall_subcmd	source/dcc.c	/^DCC_SUBCOMMAND(dcc_closeall_subcmd);$/;"	v
dcc_cmd	include/dcc.h	/^	BUILT_IN_COMMAND(dcc_cmd);$/;"	v
dcc_commands	source/dcc.c	/^}	dcc_commands[] =$/;"	v	typeref:struct:__anon13
dcc_connect	source/dcc.c	/^static	int	dcc_connect (DCC_list *dcc)$/;"	f	file:
dcc_connected	source/dcc.c	/^static int	dcc_connected (int fd)$/;"	f	file:
dcc_create	source/dcc.c	/^static	DCC_list *dcc_create ($/;"	f	file:
dcc_erase	source/dcc.c	/^static 	void		dcc_erase (DCC_list *erased)$/;"	f	file:
dcc_filesend	source/dcc.c	/^static	void	dcc_filesend (char *args)$/;"	f	file:
dcc_function	source/dcc.c	/^typedef void (*dcc_function) (char *);$/;"	t	file:
dcc_garbage_collect	source/dcc.c	/^static void 	dcc_garbage_collect (void)$/;"	f	file:
dcc_get	source/dcc.c	/^static void dcc_get (char *args)$/;"	f	file:
dcc_get_bucket	source/dcc.c	/^static	int	dcc_get_bucket (Bucket *b, const char *user, const char *fname)$/;"	f	file:
dcc_get_connect_addrs	source/dcc.c	/^static	int	dcc_get_connect_addrs (DCC_list *dcc)$/;"	f	file:
dcc_get_subcmd	source/dcc.c	/^DCC_SUBCOMMAND(dcc_get_subcmd);$/;"	v
dcc_getfile_resume_demanded	source/dcc.c	/^static void	dcc_getfile_resume_demanded (const char *user, char *filename, char *port, char *offset)$/;"	f	file:
dcc_getfile_resume_start	source/dcc.c	/^static	void	dcc_getfile_resume_start (const char *nick, char *filename, char *port, char *offset)$/;"	f	file:
dcc_global_lock	source/dcc.c	/^static	int		dcc_global_lock = 0;$/;"	v	file:
dcc_hold	source/dcc.c	/^static int	dcc_hold (DCC_list *dcc)$/;"	f	file:
dcc_list	source/dcc.c	/^static void	dcc_list (char *args)$/;"	f	file:
dcc_listen	source/dcc.c	/^static	int	dcc_listen (DCC_list *dcc)$/;"	f	file:
dcc_message_transmit	source/dcc.c	/^static void	dcc_message_transmit ($/;"	f	file:
dcc_raw_connect	source/dcc.c	/^char	*dcc_raw_connect (const char *host, const char *port, int family)$/;"	f
dcc_raw_listen	source/dcc.c	/^char	*dcc_raw_listen (int family, unsigned short port)$/;"	f
dcc_refnum	source/dcc.c	/^static	int		dcc_refnum = 0;$/;"	v	file:
dcc_reject	source/dcc.c	/^void 	dcc_reject (const char *from, char *type, char *args)$/;"	f
dcc_remove_from_list	source/dcc.c	/^static void	dcc_remove_from_list (DCC_list *erased)$/;"	f	file:
dcc_rename	source/dcc.c	/^static	void	dcc_rename (char *args)$/;"	f	file:
dcc_resume	source/dcc.c	/^static void dcc_resume (char *args)$/;"	f	file:
dcc_searchlist	source/dcc.c	/^static	DCC_list *dcc_searchlist ($/;"	f	file:
dcc_send_booster_ctcp	source/dcc.c	/^static void	dcc_send_booster_ctcp (DCC_list *dcc)$/;"	f	file:
dcc_send_raw	source/dcc.c	/^static	void	dcc_send_raw (char *args)$/;"	f	file:
dcc_target	source/dcc.c	/^static char *dcc_target(const char *name) {$/;"	f	file:
dcc_types	source/dcc.c	/^static const char	*dcc_types[] =$/;"	v	file:
dcc_unhold	source/dcc.c	/^static int	dcc_unhold (DCC_list *dcc)$/;"	f	file:
dcc_updates_status	source/dcc.c	/^static	int		dcc_updates_status = 1;$/;"	v	file:
dcc_urldecode	source/dcc.c	/^static	char *	dcc_urldecode (const char *s)$/;"	f	file:
dcc_urlencode	source/dcc.c	/^static	char *	dcc_urlencode (const char *s)$/;"	f	file:
dccctl	source/dcc.c	/^char *	dccctl (char *input)$/;"	f
dccs_rejected	source/dcc.c	/^static	int		dccs_rejected = 0;$/;"	v	file:
dead	source/irc.c	/^int		dead = 0;$/;"	v
dead	source/lastlog.c	/^	int	dead;$/;"	m	struct:lastlog_stru	file:
dead_children_processes	source/irc.c	/^volatile int	dead_children_processes;$/;"	v
debug_input_line	include/input.h	/^	BUILT_IN_KEYBINDING(debug_input_line);$/;"	v
debug_opts	source/debug.c	/^struct debug_opts$/;"	s	file:
debuglog	source/debuglog.c	/^int	debuglog (const char *format, ...)$/;"	f
debuglogf	source/debuglog.c	/^static	FILE *	debuglogf = NULL;$/;"	v	file:
dec_hooklist	source/hook.c	/^static int	dec_hooklist (int n)$/;"	f	file:
deceased	include/window.h	/^	short		deceased;	\/* Set when the window is killed *\/$/;"	m	struct:WindowStru
decide_encoding	source/recode.c	/^static const char *	decide_encoding (const unsigned char *from, const unsigned char *target, int server, iconv_t *code)$/;"	f	file:
decifer_mode	source/names.c	/^static void	decifer_mode (const char *modes, Channel *chan)$/;"	f	file:
decipher_evp	source/crypto.c	/^static char *	decipher_evp (const unsigned char *key, int keylen, const unsigned char *ciphertext, int cipherlen, const EVP_CIPHER *type, int *outlen, int ivsize)$/;"	f	file:
decipher_message	source/crypto.c	/^unsigned char *	decipher_message (const unsigned char *ciphertext, size_t len, Crypt *key, int *retlen)$/;"	f
decoder	source/ircaux.c	/^	ssize_t	(*decoder) (const char *, size_t, const void *, size_t, char *, size_t);$/;"	m	struct:Transformer	file:
decrypt_by_prog	source/crypto.c	/^static char *	decrypt_by_prog (const unsigned char *str, size_t *len, Crypt *key)$/;"	f	file:
decrypt_msg	source/crypt.c	/^char *	decrypt_msg (const unsigned char *str, Crypt *key)$/;"	f
decrypt_sed	source/crypto.c	/^void     decrypt_sed (unsigned char *str, int len, const unsigned char *key, int key_len)$/;"	f
deep	source/alloca.c	/^		char *deep;		\/* For stack depth measure.  *\/$/;"	m	struct:hdr::__anon11	file:
default_channel	source/irc.c	/^		*default_channel = NULL,	\/* Channel to join on connect *\/$/;"	v
default_dcc_port	source/dcc.c	/^static	char *		default_dcc_port = NULL;$/;"	v	file:
default_encoding	include/server.h	/^	char *	default_encoding;	\/* What string encoding we should $/;"	m	struct:__anon8
default_noise	source/hook.c	/^static	int 			default_noise;$/;"	v	file:
default_realname	include/server.h	/^	char *	default_realname;	\/* The default realname. *\/$/;"	m	struct:__anon8
default_transformers	source/ircaux.c	/^struct Transformer default_transformers[] = {$/;"	v	typeref:struct:Transformer
defaults	include/alias.h	/^	char *	defaults[32];$/;"	m	struct:ArgListT
defer	source/commands.c	/^struct defer {$/;"	s	file:
defer_list	source/commands.c	/^static	Defer *	defer_list = NULL;$/;"	v	file:
defer_list_size	source/commands.c	/^static	int	defer_list_size = -1;$/;"	v	file:
defered_status_updates	source/status.c	/^static	int	defered_status_updates = 0;$/;"	v	file:
deinit	source/mail.c	/^	int	(*deinit) (void);$/;"	m	struct:mail_checker	file:
deinit_maildir_checking	source/mail.c	/^static int	deinit_maildir_checking (void)$/;"	f	file:
deinit_mbox_checking	source/mail.c	/^static int	deinit_mbox_checking (void)$/;"	f	file:
delay_free	source/ircaux.c	/^static void	delay_free (void *ptr)$/;"	f	file:
delayed_free_table	source/ircaux.c	/^static	void **	delayed_free_table;$/;"	v	file:
delayed_free_table_size	source/ircaux.c	/^static	int	delayed_free_table_size = 0;$/;"	v	file:
delayed_frees	source/ircaux.c	/^static	int	delayed_frees = 0;$/;"	v	file:
delete_all_windows	source/window.c	/^void 	delete_all_windows (void)$/;"	f
delete_array	source/array.c	/^static void		delete_array (char *name)$/;"	f	file:
delete_builtin_command	source/alias.c	/^void	delete_builtin_command (const char *orig_name)$/;"	f
delete_builtin_expando	source/alias.c	/^void	delete_builtin_expando (const char *orig_name)$/;"	f
delete_builtin_function	source/alias.c	/^void	delete_builtin_function (const char *orig_name)$/;"	f
delete_builtin_variable	source/alias.c	/^void	delete_builtin_variable (const char *orig_name)$/;"	f
delete_cmd_alias	source/alias.c	/^static void	delete_cmd_alias (const char *orig_name, int noisy)$/;"	f	file:
delete_display_line	source/window.c	/^static void 	delete_display_line (Display *stuff)$/;"	f	file:
delete_from_dbm	source/files.c	/^static int	delete_from_dbm (int refnum, char *key)$/;"	f	file:
delete_from_queue	source/queue.c	/^static void	delete_from_queue (Queue **list, const char *name, int which)$/;"	f	file:
delete_logfile	source/logfiles.c	/^static void	delete_logfile (Logfile *log)$/;"	f	file:
delete_queue	source/queue.c	/^static void	delete_queue (Queue **list, const char *name)$/;"	f	file:
delete_timer	source/timer.c	/^static void delete_timer (Timer *otimer)$/;"	f	file:
delete_var_alias	source/alias.c	/^static void	delete_var_alias (const char *orig_name, int noisy)$/;"	f	file:
delete_who_item	source/who.c	/^static void delete_who_item (WhoEntry *save)$/;"	f	file:
delete_window	source/window.c	/^void 	delete_window (Window *window)$/;"	f
denormalize_string	source/screen.c	/^unsigned char *	denormalize_string (const unsigned char *str)$/;"	f
deny_all_hooks	source/hook.c	/^int deny_all_hooks = 0;$/;"	v
dequoter	source/ircaux.c	/^void	dequoter (char **str, size_t *clue, int full, int extended, const char *delims)$/;"	f
des	include/server.h	/^	int	des;			\/* file descriptor to server *\/$/;"	m	struct:__anon8
desc	source/ctcp.c	/^	const char	*desc;  \/* description returned by ctcp clientinfo *\/$/;"	m	struct:_CtcpEntry	file:
description	source/dcc.c	/^	char *		description;$/;"	m	struct:DCC_struct	file:
destroy_005	source/server.c	/^void	destroy_005 (int refnum)$/;"	f
destroy_a_005	source/server.c	/^static void	destroy_a_005 (A005_item *item)$/;"	f	file:
destroy_arglist	source/alias.c	/^void	destroy_arglist (ArgList **arglist)$/;"	f
destroy_builtin_commands	source/alias.c	/^static	void	destroy_builtin_commands (SymbolSet *my_array)$/;"	f	file:
destroy_builtin_expandos	source/alias.c	/^static	void	destroy_builtin_expandos (SymbolSet *my_array)$/;"	f	file:
destroy_builtin_functions	source/alias.c	/^static	void	destroy_builtin_functions (SymbolSet *my_array)$/;"	f	file:
destroy_builtin_variables	source/alias.c	/^static	void	destroy_builtin_variables (SymbolSet *my_array)$/;"	f	file:
destroy_call_stack	source/alias.c	/^void 	destroy_call_stack 	(void)$/;"	f
destroy_channel	source/names.c	/^static void 	destroy_channel (Channel *chan)$/;"	f	file:
destroy_cmd_aliases	source/alias.c	/^static	void	destroy_cmd_aliases (SymbolSet *my_array)$/;"	f	file:
destroy_expr_info	source/expr2.c	/^static void 	destroy_expr_info (expr_info *c)$/;"	f	file:
destroy_local_stack	source/alias.c	/^void 	destroy_local_stack 	(void)$/;"	f
destroy_notify_list	source/notify.c	/^void	destroy_notify_list (int refnum)$/;"	f
destroy_prompt	source/screen.c	/^static void	destroy_prompt (Screen *s, WaitPrompt **oldprompt)$/;"	f	file:
destroy_server_channels	source/names.c	/^void 	destroy_server_channels (int server)$/;"	f
destroy_server_list	source/server.c	/^void	destroy_server_list (void)$/;"	f
destroy_status	source/status.c	/^void	destroy_status (Status **s)$/;"	f
destroy_var_aliases	source/alias.c	/^static	void	destroy_var_aliases (SymbolSet *my_array)$/;"	f	file:
destroy_waiting_channels	source/window.c	/^void    destroy_waiting_channels (int server)$/;"	f
destroy_window_waiting_channels	source/window.c	/^static void    destroy_window_waiting_channels (int refnum)$/;"	f	file:
dgets	source/newio.c	/^ssize_t	dgets (int vfd, char *buf, size_t buflen, int buffer)$/;"	f
dgets_buffer	source/newio.c	/^int	dgets_buffer (int channel, void *data, ssize_t len)$/;"	f
dirbno	source/sdbm.c	/^	long dirbno;		       \/* current block in dirbuf *\/$/;"	m	struct:SDBM	file:
dirbuf	source/sdbm.c	/^	char dirbuf[DBLKSIZ];	       \/* directory file block buffer *\/$/;"	m	struct:SDBM	file:
dirent	include/irc_std.h	123;"	d
dirf	source/sdbm.c	/^	int dirf;		       \/* directory file descriptor *\/$/;"	m	struct:SDBM	file:
dirty	include/who.h	/^	int  dirty;$/;"	m	struct:WhoEntryT
dirty_time	include/who.h	/^	Timeval	dirty_time;$/;"	m	struct:WhoEntryT
disconnectcmd	include/server.h	/^	BUILT_IN_COMMAND(disconnectcmd);$/;"	v
disowned	source/exec.c	/^	int	disowned;		\/* 1 if we let it loose *\/$/;"	m	struct:__anon14	file:
dispatch_notify_userhosts	source/notify.c	/^void 	dispatch_notify_userhosts (int refnum)$/;"	f
display	source/hook.c	/^	int	display;	\/*  0 = suppress display, 1 = don't *\/$/;"	m	struct:NoiseInfo	file:
display_all_queues	source/queue.c	/^static void    display_all_queues (Queue **list)$/;"	f	file:
display_attributes	source/screen.c	/^static size_t	display_attributes (unsigned char *output, Attribute *old_a, Attribute *a)$/;"	f	file:
display_buffer_max	include/window.h	/^	int	display_buffer_max;	\/* How big its supposed to be *\/$/;"	m	struct:WindowStru
display_buffer_size	include/window.h	/^	int	display_buffer_size;	\/* How big the scrollback buffer is *\/$/;"	m	struct:WindowStru
display_counter	include/window.h	/^	int	display_counter;$/;"	m	struct:WindowStru
display_ip	include/window.h	/^	Display *display_ip;		\/* End of the scrollback buffer *\/$/;"	m	struct:WindowStru
display_line_mangler	source/screen.c	/^	int	display_line_mangler = 0;$/;"	v
display_lines	include/window.h	/^	short	display_lines;		\/* How many lines window size is *\/$/;"	m	struct:WindowStru
display_msg	source/numbers.c	/^static void 	display_msg (const char *from, const char *comm, const char **ArgList)$/;"	f	file:
display_server_list	source/server.c	/^void 	display_server_list (void)$/;"	f
do_alias_string	source/expr.c	/^static void	do_alias_string (char *unused, const char *input)$/;"	f	file:
do_atmosphere	source/ctcp.c	/^CTCP_HANDLER(do_atmosphere);$/;"	v
do_boolean	source/vars.c	/^int 	do_boolean (char *str, int *value)$/;"	f
do_clientinfo	source/ctcp.c	/^CTCP_HANDLER(do_clientinfo);$/;"	v
do_crypto	source/ctcp.c	/^CTCP_HANDLER(do_crypto);$/;"	v
do_ctcp	source/ctcp.c	/^char *	do_ctcp (const char *from, const char *to, char *str)$/;"	f
do_dcc	source/ctcp.c	/^CTCP_HANDLER(do_dcc);$/;"	v
do_dcc	source/dcc.c	/^void	do_dcc (int fd)$/;"	f
do_dcc_reply	source/ctcp.c	/^CTCP_HANDLER(do_dcc_reply);$/;"	v
do_defered_commands	source/commands.c	/^void	do_defered_commands (void)$/;"	f
do_delayed_frees	source/ircaux.c	/^void	do_delayed_frees (void)$/;"	f
do_echo	source/ctcp.c	/^CTCP_HANDLER(do_echo);$/;"	v
do_exec	source/exec.c	/^void 		do_exec (int fd)$/;"	f
do_expire_dcc_connects	source/dcc.c	/^static int	do_expire_dcc_connects (void *stuff)$/;"	f	file:
do_expire_ignores	source/ignore.c	/^int	do_expire_ignores (void *ignored)$/;"	f
do_expire_lastlog_entries	source/lastlog.c	/^int	do_expire_lastlog_entries (void *ignored)$/;"	f
do_filedesc	source/newio.c	/^void	do_filedesc (void)$/;"	f
do_finger	source/ctcp.c	/^CTCP_HANDLER(do_finger);$/;"	v
do_hook	source/hook.c	/^int	do_hook (int which, const char *format, ...)$/;"	f
do_hook_internal	source/hook.c	/^static int 	do_hook_internal (int which, char **result, const char *format, va_list args)$/;"	f	file:
do_hook_with_result	source/hook.c	/^int	do_hook_with_result (int which, char **result, const char *format, ...)$/;"	f
do_input_timeouts	source/keys.c	/^static int	do_input_timeouts (void *ignored)$/;"	f	file:
do_log	source/log.c	/^FILE *	do_log (int flag, const char *logfile, FILE **fp)$/;"	f
do_notice_ctcp	source/ctcp.c	/^char *	do_notice_ctcp (const char *from, const char *to, char *str)$/;"	f
do_notify	source/notify.c	/^void 	do_notify (void)$/;"	f
do_ping	source/ctcp.c	/^CTCP_HANDLER(do_ping);$/;"	v
do_ping_reply	source/ctcp.c	/^CTCP_HANDLER(do_ping_reply);$/;"	v
do_screens	source/screen.c	/^static void 	do_screens (int fd)$/;"	f	file:
do_server	source/server.c	/^void	do_server (int fd)$/;"	f
do_signals	source/irc.c	/^static void	do_signals(void)$/;"	f	file:
do_stack_bind	source/keys.c	/^void	do_stack_bind (int type, char *arg) $/;"	f
do_stack_on	source/hook.c	/^void	do_stack_on (int type, char *args)$/;"	f
do_time	source/ctcp.c	/^CTCP_HANDLER(do_time);$/;"	v
do_userinfo	source/ctcp.c	/^CTCP_HANDLER(do_userinfo);$/;"	v
do_utc	source/ctcp.c	/^CTCP_HANDLER(do_utc);$/;"	v
do_version	source/ctcp.c	/^CTCP_HANDLER(do_version);$/;"	v
do_wait	source/newio.c	/^int 	do_wait (Timeval *timeout)$/;"	f
do_window_notifies	source/irc.c	/^int		do_window_notifies = 1;$/;"	v
docmd	include/ifcmd.h	/^	BUILT_IN_COMMAND(docmd);$/;"	v
doing_ctcp	include/server.h	/^        int             doing_ctcp;$/;"	m	struct:__anon8
doing_notice	include/server.h	/^        int             doing_notice;$/;"	m	struct:__anon8
doing_privmsg	include/server.h	/^        int             doing_privmsg;$/;"	m	struct:__anon8
domain	source/timer.c	/^	int	domain;$/;"	m	struct:timerlist_stru	file:
domref	source/timer.c	/^	int	domref;$/;"	m	struct:timerlist_stru	file:
dont	source/ignore.c	/^	Mask	dont;			\/* Exceptional ignores *\/$/;"	m	struct:IgnoreStru	file:
dont_connect	source/irc.c	/^int		dont_connect = 0;$/;"	v
dot	source/irc.c	/^		dot[] = ".",$/;"	v
dot_flag	include/alias.h	/^	int	dot_flag;$/;"	m	struct:ArgListT
double_quote	source/ircaux.c	/^char *	double_quote (const char *str, const char *stuff, char *buffer)$/;"	f
double_status	include/status.h	/^        short           double_status;$/;"	m	struct:status_stuff
double_to_timeval	source/ircaux.c	/^Timeval double_to_timeval (double x)$/;"	f
dptr	include/sdbm.h	/^	const char *dptr;$/;"	m	struct:__anon6
dpushn	source/expr2.c	1296;"	d	file:
drive	contrib/cdrom.c	/^static int drive = 0;$/;"	v	file:
dsize	include/sdbm.h	/^	int dsize;$/;"	m	struct:__anon6
dumb	source/exec.c	/^	int	dumb;			\/* 0 if input still going, 1 if not *\/$/;"	m	struct:__anon14	file:
dumb_mode	source/irc.c	/^int		dumb_mode = 0;$/;"	v
dummy	source/expr2.c	/^static	int	dummy = 1;$/;"	v	file:
dump_call_stack	source/alias.c	/^void 	dump_call_stack 	(void)$/;"	f
dump_load_stack	source/commands.c	/^void	dump_load_stack (int onelevel)$/;"	f
dump_timers	source/timer.c	/^void    dump_timers (void)$/;"	f
dumpcmd	include/alias.h	/^	BUILT_IN_COMMAND(dumpcmd);$/;"	v
dup	acconfig.h	178;"	d
dup2	acconfig.h	179;"	d
e_channel	include/commands.h	/^	BUILT_IN_COMMAND(e_channel);$/;"	v
e_pause_cb	source/commands.c	/^static	void	e_pause_cb (char *u1, const char *u2) { e_pause_cb_throw--; }$/;"	f	file:
e_pause_cb_throw	source/commands.c	/^static	int	e_pause_cb_throw = 0;$/;"	v	file:
echo	include/screen.h	/^	int	echo;$/;"	m	struct:InputLine
edit_codepoint	source/screen.c	/^static	void	edit_codepoint (u_32int_t key)$/;"	f	file:
eight_bytes_to_fish64	source/ircaux.c	/^static int	eight_bytes_to_fish64 (const unsigned char *input, size_t inputlen, unsigned char *output, size_t outputlen)$/;"	f	file:
elf	source/files.c	/^        struct epic_loadfile *elf;$/;"	m	struct:FILE___	typeref:struct:FILE___::epic_loadfile	file:
empty	source/ircaux.c	/^int 	empty (const char *str)$/;"	f
empty_string	source/irc.c	/^const char	empty_string[] = "",		\/* just an empty string *\/$/;"	v
enabled	source/ignore.c	/^	int	enabled;$/;"	m	struct:IgnoreStru	file:
enc_decoder	source/ircaux.c	/^static ssize_t	enc_decoder (const char *orig, size_t orig_len, const void *meta, size_t meta_len, char *dest, size_t dest_len)$/;"	f	file:
enc_encoder	source/ircaux.c	/^static ssize_t	enc_encoder (const char *orig, size_t orig_len, const void *meta, size_t meta_len, char *dest, size_t dest_len)$/;"	f	file:
encoder	source/ircaux.c	/^	ssize_t	(*encoder) (const char *, size_t, const void *, size_t, char *, size_t);$/;"	m	struct:Transformer	file:
encoding	include/ircaux.h	/^BUILT_IN_COMMAND(encoding);$/;"	v
encoding	source/recode.c	/^	char *	encoding;$/;"	m	struct:RecodeRule	file:
encrypt_by_prog	source/crypto.c	/^static char *	encrypt_by_prog (const unsigned char *str, size_t *len, Crypt *key)$/;"	f	file:
encrypt_cmd	include/sedcrypt.h	/^	BUILT_IN_COMMAND(encrypt_cmd);$/;"	v
encrypt_sed	source/crypto.c	/^void     encrypt_sed (unsigned char *str, int len, const unsigned char *key, int key_len)$/;"	f
end	include/who.h	/^	void (*end) (int, const char *, const char *, const char **);$/;"	m	struct:WhoEntryT
end_strcmp	source/ircaux.c	/^int 	end_strcmp (const char *val1, const char *val2, size_t bytes)$/;"	f
end_wait_list	include/server.h	/^        WaitCmd *       end_wait_list;$/;"	m	struct:__anon8
endcmd	include/who.h	/^	char *endcmd;$/;"	m	struct:IsonEntryT
endstr	source/ircaux.c	/^char *	endstr (char *src)$/;"	f
entries	source/ircaux.c	/^	void** entries;$/;"	m	struct:__anon21	file:
entry	include/elf.h	/^    struct archive_entry *entry;$/;"	m	struct:epic_loadfile	typeref:struct:epic_loadfile::archive_entry
entry	source/ircaux.c	/^	unsigned entry;$/;"	m	struct:_mo_money	file:
eof	include/elf.h	/^    int eof;$/;"	m	struct:epic_loadfile
epic5	Makefile	/^epic5       = epic5$/;"	m
epic5_exe	Makefile	/^epic5_exe   = $(bindir)\/$(epic5)$/;"	m
epic5dir	Makefile	/^epic5dir    = $(sharedir)\/$(epic5)$/;"	m
epic_call	source/ruby.c	/^static VALUE epic_call (VALUE module, VALUE string)$/;"	f	file:
epic_cmd	source/ruby.c	/^static VALUE epic_cmd (VALUE module, VALUE string)$/;"	f	file:
epic_echo	source/ruby.c	/^static VALUE epic_echo (VALUE module, VALUE string)$/;"	f	file:
epic_eval	source/ruby.c	/^static VALUE epic_eval (VALUE module, VALUE string)$/;"	f	file:
epic_expr	source/ruby.c	/^static VALUE epic_expr (VALUE module, VALUE string)$/;"	f	file:
epic_fclose	source/elf.c	/^int	epic_fclose(struct epic_loadfile *elf)$/;"	f
epic_feof	source/elf.c	/^int	epic_feof(struct epic_loadfile *elf)$/;"	f
epic_fgetc	source/elf.c	/^int	epic_fgetc(struct epic_loadfile *elf)$/;"	f
epic_fgets	source/elf.c	/^char *	epic_fgets(char *s, int n, struct epic_loadfile *elf)$/;"	f
epic_fopen	source/elf.c	/^struct epic_loadfile * epic_fopen(char *filename, const char *mode, int do_error)$/;"	f
epic_loadfile	include/elf.h	/^struct epic_loadfile {$/;"	s
epic_say	source/ruby.c	/^static VALUE epic_say (VALUE module, VALUE string)$/;"	f	file:
epic_stat	source/elf.c	/^off_t	epic_stat(const char *filename, struct stat *buf)$/;"	f
epicrc_file	source/irc.c	/^static char	*epicrc_file = NULL,		\/* full path .epicrc file *\/$/;"	v	file:
equalf	test.c	/^equalf (f1, f2)$/;"	f	file:
erase	script/history.rb	/^  def History.erase$/;"	F	class:History
errflag	source/expr2.c	/^	int	errflag;$/;"	m	struct:__anon15	file:
error	source/newio.c	/^		error,$/;"	m	struct:myio_struct	file:
error	source/sdbm.c	/^	int  error;			\/* Errno value *\/$/;"	m	struct:SDBM	file:
error_from_dbm	source/files.c	/^static int	error_from_dbm (int refnum)$/;"	f	file:
eval_failed	source/ruby.c	/^static	VALUE	eval_failed (VALUE args, VALUE error_info)$/;"	f	file:
eval_inputlist	source/commands.c	/^static void	eval_inputlist (char *args, const char *line)$/;"	f	file:
events	source/newio.c	/^static int *	events;$/;"	v	file:
events	source/timer.c	/^	long	events;$/;"	m	struct:timerlist_stru	file:
ew_next_arg	source/alias.c	981;"	d	file:
exec_close_in	source/exec.c	/^static void 	exec_close_in (int idx)$/;"	f	file:
exec_close_out	source/exec.c	/^static void 	exec_close_out (int idx)$/;"	f	file:
exec_pipe	source/ircaux.c	/^char *	exec_pipe (const char *executable, char *input, size_t *len, char * const *args)$/;"	f
exec_prefix	Makefile	/^exec_prefix = ${prefix}$/;"	m
exec_server_delete	source/exec.c	/^void	exec_server_delete (int x)			{ return; }$/;"	f
execcmd	include/exec.h	/^	BUILT_IN_COMMAND(execcmd);$/;"	v
exhash	source/sdbm.c	76;"	d	file:
exited	source/exec.c	/^	int	exited;			\/* true if process has exited *\/$/;"	m	struct:__anon14	file:
expand_alias	source/expr.c	/^char	*expand_alias	(const char *string, const char *args)$/;"	f
expand_twiddle	source/ircaux.c	/^int	expand_twiddle (const char *str, Filename result)$/;"	f
expanded_value	source/expr2.c	/^	char *	expanded_value;		\/* Cached full expanded string *\/$/;"	m	struct:TOKEN_type	file:
expiration	source/ignore.c	/^	Timeval	expiration;		\/* When this ignore expires *\/$/;"	m	struct:IgnoreStru	file:
expire_ignores	source/ignore.c	/^static void	expire_ignores (void)$/;"	f	file:
expire_lastlog_entries	source/lastlog.c	/^static void	expire_lastlog_entries (void)$/;"	f	file:
expires	source/lastlog.c	/^	time_t	expires;$/;"	m	struct:lastlog_stru	file:
expr_info	source/expr2.c	/^} expr_info;$/;"	t	typeref:struct:__anon15	file:
ext256_key	source/crypto.c	/^static void	ext256_key (const char *orig, size_t orig_len, char **key, size_t *keylen)$/;"	f	file:
extends	source/alloca.c	/^    long extends;		\/* Number of block extensions.  *\/$/;"	m	struct:stk_stat	file:
extern_write	include/output.h	/^	BUILT_IN_COMMAND(extern_write);$/;"	v
extra	include/who.h	/^	char *		extra;$/;"	m	struct:UserhostEntryT
extra	include/who.h	/^	const char *	extra;$/;"	m	struct:UserhostItemT
extract	include/words.h	76;"	d
extract2	include/words.h	77;"	d
extractdw	include/words.h	84;"	d
extractdw2	include/words.h	85;"	d
extractew	include/words.h	92;"	d
extractew2	include/words.h	93;"	d
extractfw	include/words.h	99;"	d
extractfw2	include/words.h	100;"	d
fake_who_end	source/who.c	/^int	fake_who_end (int refnum, const char *from, const char *comm, const char *who_target)$/;"	f
family	source/dcc.c	/^	int		family;$/;"	m	struct:DCC_struct	file:
fatal_malloc_check	source/ircaux.c	/^void	fatal_malloc_check (void *ptr, const char *special, const char *fn, int line)$/;"	f
fchdir	configure	/^fchdir();$/;"	f
fclose	acconfig.h	180;"	d
fdin	include/screen.h	/^	int	fdin;			\/* The input FD (eg, 0) *\/$/;"	m	struct:ScreenStru
fdout	include/screen.h	/^	int	fdout;			\/* The output FD (eg, 1) *\/$/;"	m	struct:ScreenStru
fe	include/ifcmd.h	/^	BUILT_IN_COMMAND(fe);$/;"	v
fec	include/ifcmd.h	/^	BUILT_IN_COMMAND(fec);$/;"	v
fetch_userhost	source/names.c	/^const char *	fetch_userhost (int server, const char *chan, const char *nick)$/;"	f
fg_color	source/screen.c	/^	unsigned char	fg_color;$/;"	m	struct:attributes	file:
figure_out_address	source/ircaux.c	/^int	figure_out_address (const char *nuh, char **nick, char **user, char **host)$/;"	f
figure_out_domain	source/ircaux.c	/^int	figure_out_domain (char *fqdn, char **host, char **domain, int *ip)$/;"	f
file	source/dcc.c	/^	int		file;$/;"	m	struct:DCC_struct	file:
file	source/term.c	/^	tio_file	*file;$/;"	m	struct:tio_qentry_stru	file:
file_close	source/files.c	/^int	file_close (int fd)$/;"	f
file_eof	source/files.c	/^int	file_eof (int fd)$/;"	f
file_error	source/files.c	/^int	file_error (int fd)$/;"	f
file_exists	source/ircaux.c	/^int	file_exists (const char *filename)$/;"	f
file_put_it	source/output.c	/^void	file_put_it (FILE *fp, const char *format, ...)$/;"	f
file_read	source/files.c	/^char *	file_read (int fd)$/;"	f
file_readb	source/files.c	/^char *	file_readb (int fd, int numb)$/;"	f
file_rewind	source/files.c	/^int	file_rewind (int fd)$/;"	f
file_seek	source/files.c	/^int	file_seek (int fd, off_t offset, const char *whence)$/;"	f
file_size	source/ircaux.c	/^off_t 	file_size (const char *filename)$/;"	f
file_skip	source/files.c	/^int	file_skip (int fd, int num_lines)$/;"	f
file_tell	source/files.c	/^intmax_t	file_tell (int fd)$/;"	f
file_valid	source/files.c	/^int	file_valid (int fd)$/;"	f
file_write	source/files.c	/^int	file_write (int logtype, int fd, const char *stuff)$/;"	f
file_writeb	source/files.c	/^int	file_writeb (int logtype, int fd, char *text)$/;"	f
filename	source/commands.c	/^	char 	*filename;$/;"	m	struct:load_info	file:
filename	source/hook.c	/^	char *	filename;	\/* Where it was loaded *\/$/;"	m	struct:hook_stru	file:
filename	source/keys.c	/^    char *	filename;	\/* the package which added this binding *\/$/;"	m	struct:Binding	file:
filename	source/keys.c	/^    char *	filename;  	\/* the package which added this binding *\/$/;"	m	struct:Key	file:
filename	source/logfiles.c	/^	char *	filename;$/;"	m	struct:Logfile	file:
filesize	source/dcc.c	/^	intmax_t	filesize;$/;"	m	struct:DCC_struct	file:
fill_in_default_port	source/dcc.c	/^static void	fill_in_default_port (DCC_list *dcc)$/;"	f	file:
filstat	test.c	/^filstat(nm, mode)$/;"	f	file:
find_array_item	source/alist.c	/^find_array_item (array *set, const char *name, int *cnt, int *loc)$/;"	f
find_backward_quote	source/words.c	/^static const char *	find_backward_quote (const char *input, const char *start, const char *whats)$/;"	f	file:
find_binding	source/keys.c	/^static Binding *	find_binding (const char *name) $/;"	f	file:
find_channel	source/names.c	/^static Channel *find_channel (const char *channel, int server)$/;"	f	file:
find_forward_character	source/words.c	/^static const char *	find_forward_character (const char *input, const char *start, const char *whats)$/;"	f	file:
find_hook	source/hook.c	/^static int 	find_hook (char *name, int *first, int quiet)$/;"	f	file:
find_in_archive	source/elf.c	/^static int	find_in_archive(struct archive *a, struct archive_entry **entry, const char *str, int do_error)$/;"	f	file:
find_in_list	source/list.c	/^List	*find_in_list (List **list, const char *name, int wild)$/;"	f
find_index	source/array.c	/^static long		find_index (an_array *array, long item)$/;"	f	file:
find_local_alias	source/alias.c	/^static Symbol *	find_local_alias (const char *orig_name, SymbolSet **list)$/;"	f	file:
find_locked_stack_frame	source/alias.c	/^static int	find_locked_stack_frame	(void)$/;"	f	file:
find_nick	source/names.c	/^static Nick *	find_nick (int server, const char *channel, const char *nick)$/;"	f	file:
find_nick_on_channel	source/names.c	/^static Nick *	find_nick_on_channel (Channel *ch, const char *nick)$/;"	f	file:
find_recoding	source/recode.c	/^const char *	find_recoding (const char *target, iconv_t *inbound, iconv_t *outbound)$/;"	f
find_sequence	source/keys.c	/^static Key *	find_sequence (Key *top, const char *seq, int slen)$/;"	f	file:
find_ssl	source/ssl.c	/^static ssl_info *	find_ssl (int vfd)$/;"	f	file:
find_stack_direction	configure	/^find_stack_direction ()$/;"	f
find_stack_direction	source/alloca.c	/^static void find_stack_direction (void)$/;"	f	file:
find_suspicious_on_channel	source/names.c	/^static Nick *	find_suspicious_on_channel (Channel *ch, const char *nick)$/;"	f	file:
findchar_quoted	source/ircaux.c	/^ssize_t	findchar_quoted (const char *source, int delim)$/;"	f
finite	configure	/^finite();$/;"	f
fire_normal_prompt	source/screen.c	/^void	fire_normal_prompt (const char *utf8str)$/;"	f
fire_wait_prompt	source/screen.c	/^void	fire_wait_prompt (u_32int_t key)$/;"	f
fires	source/timer.c	/^	long	fires;$/;"	m	struct:timerlist_stru	file:
first	source/queue.c	/^        struct CmdListT *first;$/;"	m	struct:QueueT	typeref:struct:QueueT::CmdListT	file:
first	source/wcwidth.c	/^  int first;$/;"	m	struct:interval	file:
first_display_char	include/screen.h	/^	int	first_display_char;$/;"	m	struct:InputLine
firsttime	source/ssl.c	/^static	int	firsttime = 1;$/;"	v	file:
fish64_chars	source/ircaux.c	/^static char fish64_chars[] =$/;"	v	file:
fish64_decoder	source/ircaux.c	/^static ssize_t	fish64_decoder (const char *orig, size_t orig_len, const void *meta, size_t meta_len, char *dest, size_t dest_len)$/;"	f	file:
fish64_encoder	source/ircaux.c	/^static ssize_t	fish64_encoder (const char *orig, size_t orig_len, const void *meta, size_t meta_len, char *dest, size_t dest_len)$/;"	f	file:
fish64_to_eight_bytes	source/ircaux.c	/^static int	fish64_to_eight_bytes (const char *input, size_t inputlen, char *output, size_t outputlen)$/;"	f	file:
fish64_to_four_bytes	source/ircaux.c	/^static int	fish64_to_four_bytes (const char *input, size_t inputlen, char *output, size_t outputlen)$/;"	f	file:
fishbyte	source/ircaux.c	/^static	int	fishbyte (int	character)$/;"	f	file:
fix_string_width	source/ircaux.c	/^char *	fix_string_width (const char *orig_str, int justify, int fillchar, size_t newlen)$/;"	f
fixed_size	include/window.h	/^	short	fixed_size;		\/* True if window doesnt rebalance *\/$/;"	m	struct:WindowStru
flag	source/ctcp.c	/^	int		flag;	\/* Action modifiers *\/$/;"	m	struct:_CtcpEntry	file:
flag	source/debug.c	/^	int		flag;$/;"	m	struct:debug_opts	file:
flag	source/notify.c	/^	int	flag;			\/* Is the person on irc? *\/$/;"	m	struct:notify_stru	file:
flagname	source/crypt.c	/^	const char *flagname;$/;"	m	struct:ciphertypes	file:
flags	include/parse.h	/^	int		flags;$/;"	m	struct:__anon5
flags	include/vars.h	/^        unsigned short  flags;          \/* flags for this variable *\/$/;"	m	struct:__anon10
flags	source/dcc.c	/^	unsigned	flags;$/;"	m	struct:DCC_struct	file:
flags	source/hook.c	/^	unsigned flags;			\/* Anything else needed *\/$/;"	m	struct:Hookables	file:
flags	source/sdbm.c	/^	int flags;		       \/* status\/error flags, see below *\/$/;"	m	struct:SDBM	file:
flexible	source/hook.c	/^	int	flexible;	\/* \/on #type sernum 'NICK' (arglist) stuff *\/$/;"	m	struct:hook_stru	file:
float_value	source/expr2.c	/^	double	float_value;		\/* Cached floating point value *\/$/;"	m	struct:TOKEN_type	file:
flood	source/flood.c	/^static	Flooding *flood = (Flooding *) 0;$/;"	v	file:
flood_stru	source/flood.c	/^typedef struct flood_stru$/;"	s	file:
floods	source/flood.c	/^	int		floods;$/;"	m	struct:flood_stru	file:
flush	source/term.c	/^	int		 len, flush, close;$/;"	m	struct:tio_qentry_stru	file:
flush_all_symbols	source/alias.c	/^void	flush_all_symbols (void)$/;"	f
flush_on_hooks	source/hook.c	/^void    flush_on_hooks (void)$/;"	f
flush_scrollback	source/window.c	/^static int	flush_scrollback (Window *w)$/;"	f	file:
flush_scrollback_after	source/window.c	/^static int	flush_scrollback_after (Window *window)$/;"	f	file:
flush_server	source/server.c	/^void	flush_server (int servnum)$/;"	f
fn	source/ircaux.c	/^	char* fn;$/;"	m	struct:_mo_money	file:
for_fe_cmd	source/if.c	/^static void	for_fe_cmd (int argc, char **argv, const char *subargs)$/;"	f	file:
for_next_cmd	source/if.c	/^static void	for_next_cmd (int argc, char **argv, const char *subargs)$/;"	f	file:
for_pattern_cmd	source/if.c	/^static void	for_pattern_cmd (int argc, char **argv, const char *subargs)$/;"	f	file:
forcibly_remove_trailing_spaces	source/ircaux.c	/^char *	forcibly_remove_trailing_spaces (char *foo, size_t *cluep)$/;"	f
forcmd	include/ifcmd.h	/^	BUILT_IN_COMMAND(forcmd);$/;"	v
foreach	include/ifcmd.h	/^	BUILT_IN_COMMAND(foreach);$/;"	v
foreach_ignore	source/ignore.c	/^static int	foreach_ignore (const char *nicklist, int create, int (*callback) (Ignore *, int, void *), int data1, void *data2)$/;"	f	file:
foreground	source/irc.c	/^int		foreground = 1;$/;"	v
format	include/status.h	/^        char *		format;$/;"	m	struct:status_line
format	include/who.h	/^        const char *    format;$/;"	m	struct:UserhostEntryT
format	source/commands.c	/^	const char *format;$/;"	m	struct:target_type	file:
format_set	source/status.c	/^	int	*format_set;$/;"	m	struct:status_formats	file:
format_var	source/status.c	/^	char	**format_var;$/;"	m	struct:status_formats	file:
forward	include/ircaux.h	/^	iconv_t forward; \/* I dunno  *\/$/;"	m	struct:Iconv_stuff
forward_character	include/input.h	/^	BUILT_IN_KEYBINDING(forward_character);$/;"	v
forward_history	include/input.h	/^	BUILT_IN_KEYBINDING(forward_history);$/;"	v
four_bytes_to_fish64	source/ircaux.c	/^static int	four_bytes_to_fish64 (const char *input, size_t inputlen, unsigned char *output, size_t outputlen)$/;"	f	file:
fp	include/elf.h	/^    FILE * fp;$/;"	m	struct:epic_loadfile
fpathconf	configure	/^fpathconf();$/;"	f
fpin	include/screen.h	/^	FILE	*fpin;			\/* The input FILE (eg, stdin) *\/$/;"	m	struct:ScreenStru
fpout	include/screen.h	/^	FILE	*fpout;			\/* The output FILE (eg, stdout) *\/$/;"	m	struct:ScreenStru
free_bucket	source/ircaux.c	/^void	free_bucket (Bucket **b)$/;"	f
free_serverinfo	source/server.c	/^static	void	free_serverinfo (ServerInfo *si)$/;"	f	file:
freeaddrinfo	include/irc_std.h	419;"	d
freeaddrinfo__compat	source/gailib.c	/^void freeaddrinfo__compat (AI *ai)$/;"	f
freestr	include/server.h	/^        char *  freestr;$/;"	m	struct:ServerInfo
from_server	source/server.c	/^	int	from_server = NOSERV;$/;"	v
ftoa	source/ircaux.c	/^const char *	ftoa (double foo)$/;"	f
full_line_buffer	source/dcc.c	/^	int		full_line_buffer;$/;"	m	struct:DCC_struct	file:
fulldesc	include/server.h	/^	char *	fulldesc;$/;"	m	struct:ServerInfo
func	include/alist.h	/^	alist_func func;$/;"	m	struct:__anon3
func	include/notify.h	/^	alist_func 		func;$/;"	m	struct:notify_alist
func	include/screen.h	/^	void		(*func) (char *, const char *);$/;"	m	struct:PromptStru
func	include/status.h	/^        const char *	(*func[MAX_FUNCTIONS]) (struct WindowStru *, short, char);$/;"	m	struct:status_line
func	include/vars.h	/^        void    (*func) (void *); 	\/* func called when var is set *\/$/;"	m	struct:__anon10
func	include/who.h	/^        void            (*func) (int, UserhostItem *, const char *, const char *); $/;"	m	struct:UserhostEntryT
func	source/alias.c	/^	alist_func 	func;$/;"	m	struct:SymbolSetStru	file:
func	source/commands.c	/^	CmdFunc 	func;		\/* function that is the command *\/$/;"	m	struct:__anon12	file:
func	source/ctcp.c	/^	CTCP_Handler 	func;	\/* function that does the dirty deed *\/$/;"	m	struct:_CtcpEntry	file:
func	source/functions.c	/^	bf 		*func;$/;"	m	struct:__anon17	file:
func	source/functions.c	/^	char *		(*func) (void);$/;"	m	struct:__anon16	file:
func	source/keys.c	/^    BindFunction func;		\/* function to use ... *\/$/;"	m	struct:Binding	file:
func	source/logfiles.c	/^	logfile_func	func;$/;"	m	struct:logfile_ops_T	file:
func	source/names.c	/^	alist_func func;$/;"	m	struct:nick_list_stru	file:
func	source/window.c	/^	window_func 	func;$/;"	m	struct:window_ops_T	file:
func_exist	source/functions.c	/^static int	func_exist (char *command)$/;"	f	file:
function	source/dcc.c	/^	dcc_function 	function;$/;"	m	struct:__anon13	file:
function_cparse	source/functions.c	/^char *	function_cparse (char *input)$/;"	f
function_encodingctl	source/recode.c	/^char *	function_encodingctl (char *input)$/;"	f
function_floodinfo	source/flood.c	/^char *	function_floodinfo (char *args)$/;"	f
function_iconvctl	source/functions.c	/^char *function_iconvctl (char *input)$/;"	f
function_pop	source/functions.c	/^char *function_pop (char *word)$/;"	f
function_push	source/functions.c	/^char *function_push (char *word)$/;"	f
function_shift	source/functions.c	/^char *function_shift (char *word)$/;"	f
function_shiftbrace	source/functions.c	/^char *function_shiftbrace (char *word)$/;"	f
function_unshift	source/functions.c	/^char *function_unshift (char *word)$/;"	f
function_xdebug	source/debug.c	/^char *	function_xdebug (char *word)$/;"	f
funny_flags	include/server.h	/^	int	funny_flags;$/;"	m	struct:__anon8
funny_match	include/server.h	/^	char *	funny_match;$/;"	m	struct:__anon8
funny_max	include/server.h	/^	int	funny_max;$/;"	m	struct:__anon8
funny_min	include/server.h	/^	int	funny_min;		\/* Funny stuff *\/$/;"	m	struct:__anon8
fw_strcmp	source/ircaux.c	/^int 	fw_strcmp (comp_len_func *compar, char *v1, char *v2)$/;"	f
g_Ctoc	source/glob.c	/^static void g_Ctoc		(	register const Char *str,$/;"	f	file:
g_lstat	source/glob.c	/^static int g_lstat		(	register Char *fn,$/;"	f	file:
g_opendir	source/glob.c	/^static DIR *g_opendir		(	register Char *str,$/;"	f	file:
g_stat	source/glob.c	/^static int g_stat		(	register Char *fn,$/;"	f	file:
g_strchr	source/glob.c	/^static ssize_t	g_strchr	(	const Char *str, $/;"	f	file:
gai_strerror	include/irc_std.h	420;"	d
gai_strerror__compat	source/gailib.c	/^const char * gai_strerror__compat (int ecode)$/;"	f
get_addr	source/gailib.c	/^static int get_addr (const char *hostname, int af, AI **res, AI *pai, int port0)$/;"	f	file:
get_all_levels	source/levels.c	/^char *	get_all_levels (void)$/;"	f
get_all_server_groups	source/server.c	/^static char *	get_all_server_groups (void)$/;"	f	file:
get_array	source/array.c	/^an_array *	get_array (char *name)$/;"	f
get_backward	script/history.rb	/^  def History.get_backward$/;"	F	class:History
get_boolean	source/window.c	/^static int 	get_boolean (const char *name, char **args, short *var)$/;"	f	file:
get_channel_by_vfd	source/newio.c	/^static int	get_channel_by_vfd (int vfd)$/;"	f	file:
get_channel_halfop	source/names.c	/^int	get_channel_halfop (const char *channel, int server)$/;"	f
get_channel_key	source/names.c	/^const char 	*get_channel_key (const char *channel, int server)$/;"	f
get_channel_limit	source/names.c	/^int	get_channel_limit (const char *channel, int server)$/;"	f
get_channel_mode	source/names.c	/^const char	*get_channel_mode (const char *channel, int server)$/;"	f
get_channel_oper	source/names.c	/^int 	get_channel_oper (const char *channel, int server)$/;"	f
get_channel_voice	source/names.c	/^int 	get_channel_voice (const char *channel, int server)$/;"	f
get_channel_winref	source/names.c	/^int	get_channel_winref (const char *channel, int server)$/;"	f
get_child_exit	source/exec.c	/^int	get_child_exit (pid_t x)			{ return -1; }$/;"	f
get_child_exit	source/exec.c	/^int 		get_child_exit (pid_t wanted)$/;"	f
get_clock	source/clock.c	/^const char *	get_clock (void)$/;"	f
get_cmd_alias	source/alias.c	/^const char *	get_cmd_alias (const char *name, void **args, void (**func) (const char *, char *, const char *))$/;"	f
get_cmode	source/names.c	/^static const char *	get_cmode (Channel *chan)$/;"	f	file:
get_ctcp_val	source/ctcp.c	/^int 	get_ctcp_val (char *str)$/;"	f
get_dcc_by_filedesc	source/dcc.c	/^static DCC_list *	get_dcc_by_filedesc (int fd)$/;"	f	file:
get_dcc_by_refnum	source/dcc.c	/^static DCC_list *	get_dcc_by_refnum (int refnum)$/;"	f	file:
get_echannel_by_refnum	source/window.c	/^const char 	*get_echannel_by_refnum (unsigned refnum)$/;"	f
get_equery_by_refnum	source/window.c	/^const char *	get_equery_by_refnum (int refnum)$/;"	f
get_forward	script/history.rb	/^  def History.get_forward$/;"	F	class:History
get_func_alias	source/alias.c	/^const char *	get_func_alias (const char *name, void **args, char * (**func) (char *))$/;"	f
get_geom_by_winref	source/window.c	/^int     get_geom_by_winref (const char *desc, int *co, int *li)$/;"	f
get_ignore_by_refnum	source/ignore.c	/^static Ignore *get_ignore_by_refnum (int refnum)$/;"	f	file:
get_ignore_patterns_by_type	source/ignore.c	/^char	*get_ignore_patterns_by_type (char *ctype)$/;"	f
get_ignore_types	source/ignore.c	/^static const char *	get_ignore_types (Ignore *item, int output_type)$/;"	f	file:
get_ignore_types_by_pattern	source/ignore.c	/^const char	*get_ignore_types_by_pattern (char *pattern)$/;"	f
get_ignores_by_pattern	source/ignore.c	/^char 	*get_ignores_by_pattern (char *patterns, int covered)$/;"	f
get_indent_by_winref	source/window.c	/^int	get_indent_by_winref (int winref)$/;"	f
get_input	source/input.c	/^char *	get_input (void)$/;"	f
get_int_var	source/vars.c	/^int 	get_int_var (int var)$/;"	f
get_invisible_window	source/window.c	/^static Window *get_invisible_window (const char *name, char **args)$/;"	f	file:
get_log_by_desc	source/logfiles.c	/^static Logfile *	get_log_by_desc (const char *desc)$/;"	f	file:
get_metric_time	source/ircaux.c	/^struct metric_time	get_metric_time (double *timer)$/;"	f
get_name	source/gailib.c	/^static int get_name (const char *addr, struct afd *afd, AI **res, char *numaddr, AI *pai, int port0)$/;"	f	file:
get_new_ison_entry	source/who.c	/^static IsonEntry *get_new_ison_entry (int refnum, int next)$/;"	f	file:
get_new_userhost_entry	source/who.c	/^static UserhostEntry *get_new_userhost_entry (int refnum)$/;"	f	file:
get_new_vfd	source/newio.c	/^static	int	get_new_vfd (int channel)$/;"	f	file:
get_new_vfd	source/newio.c	146;"	d	file:
get_new_who_entry	source/who.c	/^static WhoEntry *get_new_who_entry (void)$/;"	f	file:
get_next_window	source/window.c	/^static	Window	*get_next_window  (Window *w)$/;"	f	file:
get_nicklist_by_window	source/window.c	/^char	*get_nicklist_by_window (Window *win)$/;"	f
get_noise_id	source/hook.c	/^static int	get_noise_id (char *chr)$/;"	f	file:
get_notify_nicks	source/notify.c	/^char *	get_notify_nicks (int refnum, int showon)$/;"	f
get_number	source/window.c	/^static int 	get_number (const char *name, char **args)$/;"	f	file:
get_pending_bytes	source/newio.c	/^size_t 	get_pending_bytes (int vfd)$/;"	f
get_pending_nickname	source/server.c	/^const char *	get_pending_nickname (int refnum)$/;"	f
get_previous_window	source/window.c	/^static	Window	*get_previous_window (Window *w)$/;"	f	file:
get_process_index	source/exec.c	/^int	get_process_index (char **x)			{ return -1; }$/;"	f
get_process_index	source/exec.c	/^int 		get_process_index (char **args)$/;"	f
get_prompt_by_refnum	source/window.c	/^const char 	*get_prompt_by_refnum (unsigned refnum)$/;"	f
get_server	include/server.h	/^static __inline__ Server *	get_server (int server)$/;"	f
get_server_005	source/server.c	/^const char *	get_server_005 (int refnum, const char *setting)$/;"	f
get_server_005s	source/server.c	/^static char *	get_server_005s (int refnum, const char *str)$/;"	f	file:
get_server_altname	source/server.c	/^const char *	get_server_altname (int refnum, int which)$/;"	f
get_server_altnames	source/server.c	/^static char *	get_server_altnames (int refnum)$/;"	f	file:
get_server_away	source/server.c	/^const char *	get_server_away (int refnum)$/;"	f
get_server_by_vfd	source/newio.c	/^int	get_server_by_vfd (int vfd)$/;"	f
get_server_cipher	source/server.c	/^const char	*get_server_cipher (int refnum)$/;"	f
get_server_fulldesc	source/server.c	/^static const char *	get_server_fulldesc (int servref)$/;"	f	file:
get_server_group	source/server.c	/^const char *	get_server_group (int servref)$/;"	f
get_server_isssl	source/server.c	/^int	get_server_isssl (int refnum)$/;"	f
get_server_local_addr	source/server.c	/^SS	get_server_local_addr (int refnum)$/;"	f
get_server_local_port	source/server.c	/^int	get_server_local_port (int refnum)$/;"	f
get_server_name	source/server.c	/^const char *	get_server_name (int servref )$/;"	f
get_server_nickname	source/server.c	/^const char	*get_server_nickname (int refnum)$/;"	f
get_server_password	source/server.c	/^static const char *	get_server_password (int refnum)$/;"	f	file:
get_server_port	source/server.c	/^int	get_server_port (int refnum)$/;"	f
get_server_protocol_state	source/server.c	/^int	get_server_protocol_state (int refnum)$/;"	f
get_server_remote_addr	source/server.c	/^static SS	get_server_remote_addr (int refnum)$/;"	f	file:
get_server_type	source/server.c	/^const char *	get_server_type (int servref )$/;"	f
get_server_uh_addr	source/server.c	/^SS	get_server_uh_addr (int refnum)$/;"	f
get_server_userhost	source/server.c	/^const char	*get_server_userhost (int refnum)$/;"	f
get_server_vhost	source/server.c	/^const char *	get_server_vhost (int servref )$/;"	f
get_ssl_cipher	source/ssl.c	/^const char *	get_ssl_cipher (int vfd)$/;"	f
get_ssl_cipher	source/ssl.c	/^const char *get_ssl_cipher (int vfd)$/;"	f
get_status_by_refnum	source/window.c	/^char *	get_status_by_refnum (unsigned refnum, int line)$/;"	f
get_string_var	source/vars.c	/^char *	get_string_var (int var)$/;"	f
get_target_by_refnum	source/window.c	/^const char 	*get_target_by_refnum (unsigned refnum)$/;"	f
get_term_capability	source/term.c	/^const char *	get_term_capability (const char *name, int querytype, int mangle)$/;"	f
get_time	source/ircaux.c	/^Timeval get_time (Timeval *timer)$/;"	f
get_timer	source/timer.c	/^static	Timer *get_timer (const char *ref)$/;"	f	file:
get_token_boolean	source/expr2.c	/^__inline static	BooL	get_token_boolean (expr_info *c, TOKEN v)$/;"	f	file:
get_token_expanded	source/expr2.c	/^__inline static	const char *	get_token_expanded (expr_info *c, TOKEN v)$/;"	f	file:
get_token_float	source/expr2.c	/^__inline static	double	get_token_float (expr_info *c, TOKEN v)$/;"	f	file:
get_token_fname	source/expr2.c	/^__inline static const char *	get_token_fname (expr_info *c, TOKEN v)$/;"	f	file:
get_token_integer	source/expr2.c	/^__inline static	intmax_t	get_token_integer (expr_info *c, TOKEN v)$/;"	f	file:
get_token_lval	source/expr2.c	/^__inline static const char *	get_token_lval (expr_info *c, TOKEN v)$/;"	f	file:
get_token_raw	source/expr2.c	/^__inline static	const char *	get_token_raw (expr_info *c, TOKEN v)$/;"	f	file:
get_umode	source/server.c	/^const char *	get_umode (int refnum)$/;"	f
get_userhost	source/ircaux.c	/^char *	get_userhost (void)$/;"	f
get_var_alias	source/alias.c	/^const char *	get_var_alias (const char *name, char *(**efunc)(void), IrcVariable **var)$/;"	f
get_variable	source/alias.c	/^char 	*get_variable 	(const char *str)$/;"	f
get_variable_with_args	source/alias.c	/^static char *	get_variable_with_args (const char *str, const char *args)$/;"	f	file:
get_vfd_by_channel	source/newio.c	/^static int	get_vfd_by_channel (int channel) $/;"	f	file:
get_waiting_channels_by_window	source/window.c	/^static char	*get_waiting_channels_by_window (Window *win)$/;"	f	file:
get_window	source/window.c	/^static Window *get_window (const char *name, char **args)$/;"	f	file:
get_window_by_desc	source/window.c	/^Window *get_window_by_desc (const char *stuff)$/;"	f
get_window_by_refnum	source/window.c	/^Window *get_window_by_refnum (unsigned refnum)$/;"	f
get_window_by_servref	source/window.c	/^static Window *get_window_by_servref (int servref)$/;"	f	file:
get_window_server	source/window.c	/^int 	get_window_server (unsigned int refnum)$/;"	f
get_winref_by_servref	source/window.c	/^int	get_winref_by_servref (int servref)$/;"	f
getaddrinfo	configure	/^getaddrinfo();$/;"	f
getaddrinfo	include/irc_std.h	418;"	d
getaddrinfo__compat	source/gailib.c	/^int getaddrinfo__compat (const char *hostname, const char *servname, const AI *hints, AI **res)$/;"	f
getarg	source/compat.c	/^static int getarg(int argnum, int type, anyptr p)$/;"	f	file:
gethostbyname	acconfig.h	181;"	d
gethostbyname	configure	/^gethostbyname()$/;"	f
gethostname	configure	/^gethostname()$/;"	f
getlogin	configure	/^getlogin();$/;"	f
getn	test.c	/^getn(s)$/;"	f	file:
getnameinfo	configure	/^getnameinfo();$/;"	f
getnameinfo	include/irc_std.h	432;"	d
getnameinfo__compat	source/gailib.c	/^int getnameinfo__compat (const struct sockaddr *sa, size_t salen, char *host, size_t hostlen, char *serv, size_t servlen, int flags)$/;"	f
getpass	configure	/^getpass();$/;"	f
getpgid	configure	/^getpgid();$/;"	f
getpgrp	configure	/^getpgrp();$/;"	f
getpwnam	configure	/^getpwnam()$/;"	f
getservbyport	configure	/^getservbyport();$/;"	f
getsockname	acconfig.h	173;"	d
gettimeofday	configure	/^gettimeofday();$/;"	f
gl_closedir	include/glob.h	/^	void (*gl_closedir) (void *);$/;"	m	struct:__anon4
gl_errfunc	include/glob.h	/^	int (*gl_errfunc) (const char *, int);$/;"	m	struct:__anon4
gl_flags	include/glob.h	/^	int gl_flags;		\/* Copy of flags parameter to glob. *\/$/;"	m	struct:__anon4
gl_lstat	include/glob.h	/^	int (*gl_lstat) (const char *, struct stat *);$/;"	m	struct:__anon4
gl_matchc	include/glob.h	/^	int gl_matchc;		\/* Count of paths matching pattern. *\/$/;"	m	struct:__anon4
gl_offs	include/glob.h	/^	int gl_offs;		\/* Reserved at beginning of gl_pathv. *\/$/;"	m	struct:__anon4
gl_opendir	include/glob.h	/^	void *(*gl_opendir) (const char *);$/;"	m	struct:__anon4
gl_pathc	include/glob.h	/^	int gl_pathc;		\/* Count of total paths so far. *\/$/;"	m	struct:__anon4
gl_pathv	include/glob.h	/^	char **gl_pathv;	\/* List of paths matching pattern. *\/$/;"	m	struct:__anon4
gl_readdir	include/glob.h	/^	struct dirent *(*gl_readdir) (void *);	$/;"	m	struct:__anon4	typeref:struct:__anon4::gl_readdir
gl_stat	include/glob.h	/^	int (*gl_stat) (const char *, struct stat *);$/;"	m	struct:__anon4
glob	source/functions.c	4162;"	d	file:
glob0	source/glob.c	/^static int glob0		(	const Char *pattern,$/;"	f	file:
glob1	source/glob.c	/^static int glob1		(	Char *pattern,$/;"	f	file:
glob2	source/glob.c	/^static int glob2		(	Char *pathbuf,$/;"	f	file:
glob3	source/glob.c	/^static int glob3		(	Char *pathbuf,$/;"	f	file:
glob_assign_alias	source/alias.c	/^char **	glob_assign_alias (const char *name, int *howmany, int maxret, int start, int rev)$/;"	f
glob_cmd_alias	source/alias.c	/^char **	glob_cmd_alias (const char *name, int *howmany, int maxret, int start, int rev)$/;"	f
glob_t	include/glob.h	/^} glob_t;$/;"	t	typeref:struct:__anon4
global	source/newio.c	/^pthread_t		global;$/;"	v
global_beep_ok	source/irc.c	/^int		global_beep_ok = 1;$/;"	v
global_ignore_refnum	source/ignore.c	/^static	int	global_ignore_refnum = 0;$/;"	v	file:
global_lastlog_refnum	source/lastlog.c	/^static	intmax_t global_lastlog_refnum = 0;$/;"	v	file:
global_max_channel	source/newio.c	/^static	int	global_max_channel = -1;$/;"	v	file:
global_max_vfd	source/newio.c	/^static	int	global_max_vfd = -1;$/;"	v	file:
globals	source/alias.c	/^static SymbolSet globals = 	{ NULL, 0, 0, strncmp, HASH_INSENSITIVE };$/;"	v	file:
globexp1	source/glob.c	/^static int globexp1	(	const Char *pattern,$/;"	f	file:
globexp2	source/glob.c	/^static int globexp2	(	const Char *ptr,$/;"	f	file:
globextend	source/glob.c	/^static int globextend		(	const Char *path,$/;"	f	file:
globfree	source/functions.c	4163;"	d	file:
globmatch	source/glob.c	/^static int globmatch		(	register Char *name,$/;"	f	file:
globtilde	source/glob.c	/^static const Char *globtilde	(	const Char *pattern,$/;"	f	file:
go_back_to_indicator	source/window.c	/^static void	go_back_to_indicator (Window *w)$/;"	f	file:
got_my_userhost	source/server.c	/^void 	got_my_userhost (int refnum, UserhostItem *item, const char *nick, const char *stuff)$/;"	f
got_sigwinch	source/wserv.c	/^static	int	got_sigwinch = 0;$/;"	v	file:
grab_codepoint	source/wcwidth.c	/^int	grab_codepoint (const unsigned char *x)$/;"	f
grab_server_address	source/server.c	/^int	grab_server_address (int server)$/;"	f
group	include/server.h	/^        const char *  group;$/;"	m	struct:ServerInfo
h	source/alloca.c	/^	} h;$/;"	m	union:hdr	typeref:struct:hdr::__anon11	file:
half_assed	source/names.c	/^	char		half_assed;	\/* true if i'm a channel helper *\/$/;"	m	struct:channel_stru	file:
half_assed	source/names.c	/^	short	half_assed;	\/* 1 if they are, 0 if theyre not, -1 if uk *\/$/;"	m	struct:nick_stru	file:
halt	source/hook.c	/^	int halt;$/;"	m	struct:Current_hook	file:
handle_filedesc	source/exec.c	/^static void 	handle_filedesc (Process *proc, int *fd, int hook_nonl, int hook_nl)$/;"	f	file:
handle_invalid_savedir	source/dcc.c	/^static void	handle_invalid_savedir (const char *pathname)$/;"	f	file:
handle_keypress	source/keys.c	/^void *	handle_keypress (void *lastp, Timeval pressed, u_32int_t keyx, int quote_override) $/;"	f
happykey	source/crypt.c	/^const char *	happykey (const char *key, int sed_type)$/;"	f
hash	include/alist.h	/^	hash_type hash;$/;"	m	struct:__anon3
hash	include/alist.h	/^	u_32int_t	hash;		\/* Dont fill this in *\/$/;"	m	struct:__anon1
hash	include/notify.h	/^	hash_type		hash;$/;"	m	struct:notify_alist
hash	include/server.h	/^	u_32int_t hash;$/;"	m	struct:__anon7
hash	source/alias.c	/^	hash_type	hash;$/;"	m	struct:SymbolSetStru	file:
hash	source/alias.c	/^	u_32int_t hash;			\/* Hash of the name *\/$/;"	m	struct:SymbolStru	file:
hash	source/names.c	/^	hash_type hash;$/;"	m	struct:nick_list_stru	file:
hash	source/names.c	/^	u_32int_t hash;		\/* Hash of the nickname *\/$/;"	m	struct:nick_stru	file:
hash	source/notify.c	/^	u_32int_t hash;			\/* Hash of the nick *\/$/;"	m	struct:notify_stru	file:
hash_type	include/alist.h	/^} hash_type;$/;"	t	typeref:enum:__anon2
hdr	contrib/cdrom.c	/^static struct cdrom_tochdr hdr;$/;"	v	typeref:struct:cdrom_tochdr	file:
hdr	source/alloca.c	/^typedef union hdr$/;"	u	file:
head_keymap	source/keys.c	/^	static	Key *	head_keymap = NULL; $/;"	v	file:
header	source/alloca.c	/^} header;$/;"	t	typeref:union:hdr	file:
held	source/dcc.c	/^	int		held;$/;"	m	struct:DCC_struct	file:
held	source/newio.c	/^		held;$/;"	m	struct:myio_struct	file:
heldtime	source/dcc.c	/^	double		heldtime;$/;"	m	struct:DCC_struct	file:
help_topics_bind	source/keys.c	/^void    help_topics_bind (FILE *f)                                         $/;"	f
help_topics_commands	source/commands.c	/^void	help_topics_commands (FILE *f)$/;"	f
help_topics_ctcp	source/ctcp.c	/^void    help_topics_ctcp (FILE *f)$/;"	f
help_topics_dcc	source/dcc.c	/^void    help_topics_dcc (FILE *f)$/;"	f
help_topics_functions	source/functions.c	/^void    help_topics_functions (FILE *f)$/;"	f
help_topics_on	source/hook.c	/^void    help_topics_on (FILE *f)$/;"	f
help_topics_scripts	source/functions.c	/^void	help_topics_scripts (FILE *f)$/;"	f
help_topics_set	source/vars.c	/^void    help_topics_set (FILE *f)$/;"	f
help_topics_window	source/window.c	/^void    help_topics_window (FILE *f)$/;"	f
helpdir	Makefile	/^helpdir   = $(epic5dir)\/help$/;"	m
hide_window	source/window.c	/^void 	hide_window (Window *window)$/;"	f
high_water	source/alloca.c	/^    long high_water;		\/* Stack high-water mark.  *\/$/;"	m	struct:stk_stat	file:
highlight_off	include/input.h	/^	BUILT_IN_KEYBINDING(highlight_off);$/;"	v
historyctl	script/history.rb	/^  def History.historyctl(args)$/;"	F	class:History
hits	source/alloca.c	/^    long hits;			\/* Number of internal buffer hits.  *\/$/;"	m	struct:stk_stat	file:
hmask	source/sdbm.c	/^	long hmask;		       \/* current hash mask *\/$/;"	m	struct:SDBM	file:
hold_interval	include/window.h	/^	short	hold_interval;		\/* How often to update status bar *\/$/;"	m	struct:WindowStru
hold_lines_format	source/status.c	/^static	char	*hold_lines_format 	= (char *) 0;$/;"	v	file:
hold_slider	include/window.h	/^	short	hold_slider;$/;"	m	struct:WindowStru
holding_distance_from_display_ip	include/window.h	/^	int	holding_distance_from_display_ip;$/;"	m	struct:WindowStru
holding_top_of_display	include/window.h	/^	Display *holding_top_of_display;$/;"	m	struct:WindowStru
holdtime	source/dcc.c	/^	Timeval		holdtime;$/;"	m	struct:DCC_struct	file:
honors_cpu_saver	source/clock.c	/^	int	honors_cpu_saver;$/;"	m	struct:system_timer	file:
hook_find_free_serial	source/hook.c	/^int hook_find_free_serial(int dir, int from, int which) {$/;"	f
hook_function_templates	source/hook.c	/^Hookables hook_function_templates[] =$/;"	v
hook_functions	source/hook.c	/^static Hookables *hook_functions = NULL;$/;"	v	file:
hook_functions_initialized	source/hook.c	/^static int	 hook_functions_initialized = 0;$/;"	v	file:
hook_stru	source/hook.c	/^typedef struct	hook_stru$/;"	s	file:
hook_type	source/commands.c	/^	int  hook_type;$/;"	m	struct:target_type	file:
hookctl	source/hook.c	/^char *hookctl (char *input)$/;"	f
hooklist	source/hook.c	/^static Hook **hooklist = NULL;$/;"	v	file:
hooklist_size	source/hook.c	/^static int hooklist_size = 0;$/;"	v	file:
host	include/server.h	/^        const char *  host;$/;"	m	struct:ServerInfo
host	include/who.h	/^	const char *	host;$/;"	m	struct:UserhostItemT
hostname	source/irc.c	/^		hostname[NAME_LEN + 1],		\/* name of current host *\/$/;"	v
howmany	include/irc_std.h	384;"	d
i	source/compat.c	/^	unsigned char	i;$/;"	m	struct:bsd_arc4_stream	file:
i00afunc	source/alloca.c	/^static long i00afunc (long *address)$/;"	f	file:
i00afunc	source/alloca.c	/^static long i00afunc (long address)$/;"	f	file:
iconv_list	source/ircaux.c	/^struct Iconv_stuff **iconv_list = NULL;$/;"	v	typeref:struct:Iconv_stuff
iconv_list_size	source/ircaux.c	/^ssize_t iconv_list_size = 0;$/;"	v
iconv_recoder	source/ircaux.c	/^static ssize_t	iconv_recoder (const char *orig, size_t orig_len, const void *meta, size_t meta_len, char *dest, size_t dest_len)$/;"	f	file:
id	source/ctcp.c	/^	int		id;	\/* index of this ctcp command *\/$/;"	m	struct:_CtcpEntry	file:
id	source/files.c	/^        long int id;$/;"	m	struct:FILE___	file:
identifier	source/hook.c	/^	char	identifier;$/;"	m	struct:NoiseInfo	file:
idle_time	source/irc.c	/^Timeval		idle_time = { 0, 0 };$/;"	v
ifcmd	include/ifcmd.h	/^	BUILT_IN_COMMAND(ifcmd);$/;"	v
ignore	include/ignore.h	/^	BUILT_IN_COMMAND(ignore);$/;"	v
ignore	source/wserv.c	/^static void 	ignore (int value)$/;"	f	file:
ignore_attributes	source/screen.c	/^static size_t	ignore_attributes (unsigned char *output, Attribute *old_a, Attribute *a)$/;"	f	file:
ignore_change	source/ignore.c	/^static int	ignore_change (Ignore *item, int type, void *data)$/;"	f	file:
ignore_list	source/ignore.c	/^static int	ignore_list (Ignore *item, int type, void *data)$/;"	f	file:
ignore_process	source/exec.c	/^static void 	ignore_process (int idx)$/;"	f	file:
ignorectl	source/ignore.c	/^char *	ignorectl (char *input)$/;"	f
ignored_nicks	source/ignore.c	/^static	Ignore *ignored_nicks = NULL;$/;"	v	file:
ignores_are_suspended	source/ignore.c	/^static	int	ignores_are_suspended = 0;$/;"	v	file:
il	include/screen.h	/^	InputLine *	il;$/;"	m	struct:ScreenStru
im_on_channel	source/names.c	/^int 	im_on_channel (const char *channel, int refnum)$/;"	f
implied	source/hook.c	/^	char *	implied;		\/* Implied output if unhooked *\/$/;"	m	struct:Hookables	file:
implied_protect	source/hook.c	/^	int	implied_protect;	\/* Do not re-expand implied hook *\/$/;"	m	struct:Hookables	file:
in_addrany	source/gailib.c	/^static const char in_addrany[] = { 0, 0, 0, 0 };$/;"	v	file:
in_ctcp	source/ctcp.c	/^int	in_ctcp (void) { return (in_ctcp_flag); }$/;"	f
in_ctcp_flag	source/ctcp.c	/^int	in_ctcp_flag = 0;$/;"	v
in_loopback	source/gailib.c	/^static const char in_loopback[] = { 127, 0, 0, 1 }; $/;"	v	file:
iname	source/term.c	/^	const char *	iname;$/;"	m	struct:cap2info	file:
inbound_handle	source/recode.c	/^	iconv_t	inbound_handle;$/;"	m	struct:RecodeRule	file:
inbound_handler	include/parse.h	/^	void 		(*inbound_handler) (const char *, const char *, const char **);$/;"	m	struct:__anon5
inbound_line_mangler	source/irc.c	/^int		inbound_line_mangler = 0,$/;"	v
inbound_recode	source/recode.c	/^const char *	inbound_recode (const char *from, int server, const char *to, const char *message, char **extra)$/;"	f
inc_hooklist	source/hook.c	/^static int	inc_hooklist (int size)$/;"	f	file:
ind_left	include/screen.h	/^        unsigned char   *ind_left;$/;"	m	struct:InputLine
ind_left_len	include/screen.h	/^        int     ind_left_len;$/;"	m	struct:InputLine
ind_right	include/screen.h	/^        unsigned char   *ind_right;$/;"	m	struct:InputLine
ind_right_len	include/screen.h	/^        int     ind_right_len;$/;"	m	struct:InputLine
indent	include/window.h	/^	short	indent;			\/* How far \/set indent goes *\/$/;"	m	struct:WindowStru
index	include/array.h	/^        long *index;$/;"	m	struct:an_array_struct
index	source/array.c	206;"	d	file:
index	source/exec.c	/^	int	index;			\/* Where in the proc array it is *\/$/;"	m	struct:__anon14	file:
indicator_needs_update	source/window.c	/^static void	indicator_needs_update (Window *w)$/;"	f	file:
inet_addr	configure	/^inet_addr()$/;"	f
inet_hntop	source/network.c	/^int	inet_hntop (int family, const char *host, char *retval, int size)$/;"	f
inet_ntop__compat	source/gailib.c	/^static const char * inet_ntop__compat (int af, const void *addr, char *numaddr, size_t numaddr_len)$/;"	f	file:
inet_ntostr	source/network.c	/^int	inet_ntostr (SA *name, char *host, int hsize, char *port, int psize, int flags)$/;"	f
inet_ptohn	source/network.c	/^int	inet_ptohn (int family, const char *ip, char *retval, int size)$/;"	f
inet_pton__compat	source/gailib.c	/^static int inet_pton__compat (int af, const char *hostname, void *pton)$/;"	f	file:
inet_strton	source/network.c	/^int	inet_strton (const char *host, const char *port, SA *storage, int flags)$/;"	f
inet_vhostsockaddr	source/network.c	/^int	inet_vhostsockaddr (int family, int port, const char *wanthost, SS *storage, socklen_t *len)$/;"	f
info	include/server.h	/^	ServerInfo *info;		\/* Canonical information *\/$/;"	m	struct:__anon8
inhibit_logging	source/irc.c	/^int		inhibit_logging = 0;$/;"	v
init	source/mail.c	/^	int	(*init) (void);$/;"	m	struct:mail_checker	file:
init_binds	source/keys.c	/^void 	init_binds (void) $/;"	f
init_commands	source/commands.c	/^void	init_commands (void)$/;"	f
init_expandos	source/functions.c	/^void	init_expandos (void)$/;"	f
init_functions	source/functions.c	/^void	init_functions (void)$/;"	f
init_input	source/input.c	/^void	init_input (void)$/;"	f
init_keys	source/keys.c	/^void	init_keys (void) $/;"	f
init_levels	source/levels.c	/^void	init_levels (void)$/;"	f
init_maildir_checking	source/mail.c	/^static int	init_maildir_checking (void)$/;"	f	file:
init_mbox_checking	source/mail.c	/^static int	init_mbox_checking (void)$/;"	f	file:
init_newio	source/newio.c	/^void	init_newio (void)$/;"	f
init_recodings	source/recode.c	/^void	init_recodings (void)$/;"	f
init_screen	source/output.c	/^int	init_screen (void)$/;"	f
init_signals	source/ircsig.c	/^sigfunc *	init_signals (void)$/;"	f
init_status	source/status.c	/^static void	init_status	(void)$/;"	f	file:
init_termkeys	source/keys.c	/^void	init_termkeys (void) $/;"	f
init_transforms	source/ircaux.c	/^void	init_transforms (void)$/;"	f
init_variables_stage1	source/vars.c	/^void 	init_variables_stage1 (void)$/;"	f
init_variables_stage2	source/vars.c	/^void 	init_variables_stage2 (void)$/;"	f
initial_address	source/alloca.c	/^    long initial_address;	\/* Address of initial segment.  *\/$/;"	m	struct:stk_stat	file:
initial_size	source/alloca.c	/^    long initial_size;		\/* Size of initial segment.  *\/$/;"	m	struct:stk_stat	file:
initialize	script/history.rb	/^	def initialize (stuff)$/;"	f	class:HistoryItem
initialize_hook_functions	source/hook.c	/^static void	initialize_hook_functions (void)$/;"	f	file:
initialize_status	source/status.c	/^static	void	initialize_status (Status *s)$/;"	f	file:
input_add_character	include/input.h	/^	BUILT_IN_KEYBINDING(input_add_character);$/;"	v
input_backspace	include/input.h	/^	BUILT_IN_KEYBINDING(input_backspace);$/;"	v
input_backward_word	include/input.h	/^	BUILT_IN_KEYBINDING(input_backward_word);$/;"	v
input_beginning_of_line	include/input.h	/^	BUILT_IN_KEYBINDING(input_beginning_of_line);$/;"	v
input_buffer	include/screen.h	/^	unsigned char input_buffer[INPUT_BUFFER_SIZE+1];$/;"	m	struct:InputLine
input_clear_line	include/input.h	/^	BUILT_IN_KEYBINDING(input_clear_line);$/;"	v
input_clear_to_bol	include/input.h	/^	BUILT_IN_KEYBINDING(input_clear_to_bol);$/;"	v
input_clear_to_eol	include/input.h	/^	BUILT_IN_KEYBINDING(input_clear_to_eol);$/;"	v
input_column_count	source/wcwidth.c	/^int	input_column_count (const unsigned char *str)$/;"	f
input_delete_character	include/input.h	/^	BUILT_IN_KEYBINDING(input_delete_character);$/;"	v
input_delete_next_word	include/input.h	/^	BUILT_IN_KEYBINDING(input_delete_next_word);$/;"	v
input_delete_previous_word	include/input.h	/^	BUILT_IN_KEYBINDING(input_delete_previous_word);$/;"	v
input_delete_to_previous_space	include/input.h	/^	BUILT_IN_KEYBINDING(input_delete_to_previous_space);$/;"	v
input_end_of_line	include/input.h	/^	BUILT_IN_KEYBINDING(input_end_of_line);$/;"	v
input_forward_word	include/input.h	/^	BUILT_IN_KEYBINDING(input_forward_word);$/;"	v
input_line	include/screen.h	/^	int	input_line;$/;"	m	struct:InputLine
input_move_cursor	source/input.c	/^static int	input_move_cursor (int direction, int refresh)$/;"	f	file:
input_prompt	include/screen.h	/^	unsigned char	*input_prompt;$/;"	m	struct:InputLine
input_prompt	source/input.c	/^	static	char *	input_prompt;$/;"	v	file:
input_prompt_len	include/screen.h	/^	int	input_prompt_len;$/;"	m	struct:InputLine
input_prompt_raw	include/screen.h	/^	char *	input_prompt_raw;$/;"	m	struct:InputLine
input_reset_line	include/input.h	/^	BUILT_IN_KEYBINDING(input_reset_line);$/;"	v
input_transpose_characters	include/input.h	/^	BUILT_IN_KEYBINDING(input_transpose_characters);$/;"	v
input_unclear_screen	include/input.h	/^	BUILT_IN_KEYBINDING(input_unclear_screen);$/;"	v
input_yank_cut_buffer	include/input.h	/^	BUILT_IN_KEYBINDING(input_yank_cut_buffer);$/;"	v
insert_altcharset	include/input.h	/^	BUILT_IN_KEYBINDING(insert_altcharset);$/;"	v
insert_blink	include/input.h	/^	BUILT_IN_KEYBINDING(insert_blink);$/;"	v
insert_bold	include/input.h	/^	BUILT_IN_KEYBINDING(insert_bold);$/;"	v
insert_index	source/array.c	/^static void	insert_index (long **idx, long *size, long newIndex)$/;"	f	file:
insert_italic	include/input.h	/^	BUILT_IN_KEYBINDING(insert_italic);$/;"	v
insert_reverse	include/input.h	/^	BUILT_IN_KEYBINDING(insert_reverse);$/;"	v
insert_underline	include/input.h	/^	BUILT_IN_KEYBINDING(insert_underline);$/;"	v
integer	include/vars.h	/^        int     integer;                \/* int value of variable *\/$/;"	m	union:builtin_variable
integer	source/compat.c	/^	int	integer;$/;"	m	struct:arg_str	file:
integer_value	source/expr2.c	/^	intmax_t integer_value;		\/* Cached integer value *\/$/;"	m	struct:TOKEN_type	file:
internal_is_crypted	source/crypt.c	/^static	Crypt *	internal_is_crypted (Char *nick, Char *serv, int sed_type)$/;"	f	file:
internal_remove_crypt	source/crypt.c	/^static int	internal_remove_crypt (Char *nick, Char *serv, int sed_type)$/;"	f	file:
internal_rubyeval	source/ruby.c	/^static VALUE	internal_rubyeval (VALUE *a)$/;"	f	file:
internal_version	source/irc.c	/^const char internal_version[] = "20140413";$/;"	v
interval	source/timer.c	/^	Timeval	interval;$/;"	m	struct:timerlist_stru	file:
interval	source/wcwidth.c	/^struct interval {$/;"	s	file:
interval_variable	source/clock.c	/^	int *	interval_variable;$/;"	m	struct:system_timer	file:
intmax_t	include/irc_std.h	311;"	d
intmax_t	include/irc_std.h	319;"	d
intmax_t	include/irc_std.h	327;"	d
intmaxtoa	source/ircaux.c	/^const char *	intmaxtoa (intmax_t foo)$/;"	f
intptr_t	include/irc_std.h	/^typedef int intptr_t;$/;"	t
invalid_utf8str	source/ircaux.c	/^int	invalid_utf8str (unsigned char *utf8str)$/;"	f
invisible_list	source/window.c	/^	Window	*invisible_list = (Window *) 0;$/;"	v
invite_channel	include/server.h	/^        char *          invite_channel;$/;"	m	struct:__anon8
io	source/irc.c	/^void	io (const char *what)$/;"	f
io_callback	source/newio.c	/^	int	(*io_callback) (int vfd, int quiet);$/;"	m	struct:myio_struct	file:
io_rec	source/newio.c	/^static	MyIO **	io_rec = NULL;$/;"	v	file:
ioerr	source/sdbm.c	77;"	d	file:
ip_bindery	source/network.c	/^int	ip_bindery (int family, unsigned short port, SS *storage)$/;"	f
irc_command	source/commands.c	/^static	IrcCommand irc_command[] =$/;"	v	file:
irc_exit	source/irc.c	/^void	irc_exit (int really_quit, const char *format, ...)$/;"	f
irc_lib	source/irc.c	/^		*irc_lib = (char *) 0,		\/* path to the ircII library *\/$/;"	v
irc_port	source/irc.c	/^int		irc_port = IRC_PORT;$/;"	v
irc_quit	include/irc.h	/^	BUILT_IN_KEYBINDING(irc_quit);$/;"	v
irc_version	source/irc.c	/^const char irc_version[] = "EPIC5-1.1.10";$/;"	v
irclog_fp	source/log.c	/^	FILE	*irclog_fp;$/;"	v
ircrc_file	source/irc.c	/^		*ircrc_file = NULL;		\/* full path .ircrc file *\/$/;"	v	file:
is_channel	source/parse.c	/^int 	is_channel (const char *to)$/;"	f
is_channel_anonymous	source/names.c	/^int	is_channel_anonymous (const char *channel, int server_index)$/;"	f
is_channel_nomsgs	source/names.c	/^int	is_channel_nomsgs (const char *channel, int server_index)$/;"	f
is_channel_private	source/names.c	/^int 	is_channel_private (const char *channel, int server_index)$/;"	f
is_chanop	source/names.c	/^int 	is_chanop (const char *channel, const char *nick)$/;"	f
is_chanvoice	source/names.c	/^int	is_chanvoice (const char *channel, const char *nick)$/;"	f
is_crypted	source/crypt.c	/^Crypt *	is_crypted (Char *nick, int serv, int ctcp_type)$/;"	f
is_current_channel	source/names.c	/^int     is_current_channel (const char *channel, int server)$/;"	f
is_halfop	source/names.c	/^int	is_halfop (const char *channel, const char *nick)$/;"	f
is_iso2022_jp	source/ircaux.c	/^int	is_iso2022_jp (const unsigned char *buffer)$/;"	f
is_logfile_name_unique	source/logfiles.c	/^static int	is_logfile_name_unique (const char *desc)$/;"	f	file:
is_logical_unique	source/exec.c	/^static int 	is_logical_unique (char *logical)$/;"	f	file:
is_me	source/server.c	/^int	is_me (int refnum, const char *nick)$/;"	f
is_number	source/ircaux.c	/^int	is_number (const char *str)$/;"	f
is_on_channel	source/names.c	/^int 	is_on_channel (const char *channel, const char *nick)$/;"	f
is_real_number	source/ircaux.c	/^int	is_real_number (const char *str)$/;"	f
is_root	source/ircaux.c	/^int 	is_root (const char *root, const char *var, int descend)$/;"	f
is_ruby_running	source/ruby.c	/^int	is_ruby_running = 0;$/;"	v
is_server_active	source/server.c	/^int	is_server_active (int refnum)$/;"	f
is_server_open	source/server.c	/^int	is_server_open (int refnum)$/;"	f
is_server_registered	source/server.c	/^int	is_server_registered (int refnum)$/;"	f
is_server_valid	source/server.c	/^int	is_server_valid (int refnum)$/;"	f
is_ssl_enabled	source/ssl.c	/^int	is_ssl_enabled (int vfd)$/;"	f
is_string_empty	source/ircaux.c	/^int     is_string_empty (const char *str) $/;"	f
is_target_channel_wall	source/parse.c	/^static int	is_target_channel_wall (const char *to)$/;"	f	file:
is_valid_process	source/exec.c	/^int		is_valid_process (const char *arg)$/;"	f
is_valid_process	source/exec.c	/^int	is_valid_process (const char *x)		{ return -1; }$/;"	f
is_var_builtin	source/vars.c	/^int	is_var_builtin (const char *varname)$/;"	f
is_window_name_unique	source/window.c	/^static int 	is_window_name_unique (char *name)$/;"	f	file:
is_window_visible	source/window.c	/^int 	is_window_visible (char *arg)$/;"	f
is_window_waiting_for_channel	source/window.c	/^int	is_window_waiting_for_channel (unsigned refnum, const char *chan)$/;"	f
isdir	source/ircaux.c	/^int	isdir (const char *filename)$/;"	f
isdir2	source/ircaux.c	/^int	isdir2 (const char *directory, const char *filename)$/;"	f
islegal	source/ircaux.c	1174;"	d	file:
islegal	source/parse.c	1512;"	d	file:
ismeta	source/glob.c	131;"	d	file:
isoctaln	source/keys.c	913;"	d	file:
ison	include/notify.h	/^	char *			ison;$/;"	m	struct:notify_alist
ison_asked	include/who.h	/^	char *ison_asked;$/;"	m	struct:IsonEntryT
ison_entry_pop	source/who.c	/^static void ison_entry_pop (IsonEntry **entry)$/;"	f	file:
ison_got	include/who.h	/^	char *ison_got;$/;"	m	struct:IsonEntryT
ison_len	include/server.h	/^	int	ison_len;		\/* Max ison characters *\/$/;"	m	struct:__anon8
ison_max	include/server.h	/^	int	ison_max;		\/* Max pending isons *\/$/;"	m	struct:__anon8
ison_notify	source/notify.c	/^static void	ison_notify (int refnum, char *AskedFor, char *AreOn)$/;"	f	file:
ison_queue	include/server.h	/^	IsonEntry *	ison_queue;	\/* Ison queue *\/$/;"	m	struct:__anon8
ison_queue_add	source/who.c	/^static void ison_queue_add (int refnum, IsonEntry *item, int next)$/;"	f	file:
ison_queue_list	source/who.c	/^static void ison_queue_list (int refnum)$/;"	f	file:
ison_queue_pop	source/who.c	/^static void ison_queue_pop (int refnum)$/;"	f	file:
ison_queue_send	source/who.c	/^static void ison_queue_send (int refnum)$/;"	f	file:
ison_queue_top	source/who.c	/^static IsonEntry *ison_queue_top (int refnum)$/;"	f	file:
ison_returned	source/who.c	/^void	ison_returned (int refnum, const char *from, const char *comm, const char **ArgList)$/;"	f
ison_wait	include/server.h	/^	IsonEntry *	ison_wait;	\/* Ison wait queue *\/$/;"	m	struct:__anon8
ison_wait_pop	source/who.c	/^static void ison_wait_pop (int refnum)$/;"	f	file:
ison_wait_top	source/who.c	/^static IsonEntry *ison_wait_top (int refnum)$/;"	f	file:
isonbase	source/who.c	/^void	isonbase (int refnum, char *args, void (*line) (int, char *, char *))$/;"	f
isoncmd	include/who.h	/^	BUILT_IN_COMMAND(isoncmd);$/;"	v
isperlrunning	source/perl.c	/^int	isperlrunning=0, perlcalldepth=0;$/;"	v
istclrunning	source/tcl.c	/^int	istclrunning = 0;$/;"	v
italic	source/screen.c	/^	unsigned char	italic;$/;"	m	struct:attributes	file:
item	include/array.h	/^        char **item;$/;"	m	struct:an_array_struct
iterate_on_dbm	source/files.c	/^static char *	iterate_on_dbm (int refnum, int restart)$/;"	f	file:
itsname	include/server.h	/^	char	*itsname;		\/* the server's idea of its name *\/$/;"	m	struct:__anon8
j	source/compat.c	/^	unsigned char	j;$/;"	m	struct:bsd_arc4_stream	file:
join_time	source/names.c	/^	Timeval		join_time;	\/* When we joined the channel *\/$/;"	m	struct:channel_stru	file:
joined_nick	include/server.h	/^        char *          joined_nick;$/;"	m	struct:__anon8
kcleaned	source/newio.c	/^static	void	kcleaned (int vfd) $/;"	f	file:
kcleaned	source/newio.c	/^static	void	kcleaned (int vfd) { return; }$/;"	f	file:
kcleaned	source/newio.c	/^static	void	kcleaned (int vfd)$/;"	f	file:
kdoit	source/newio.c	/^static	int	kdoit (Timeval *timeout)$/;"	f	file:
key	include/sedcrypt.h	/^	char *	key;$/;"	m	struct:CryptStru
key	include/status.h	/^	char		key[MAX_FUNCTIONS];$/;"	m	struct:status_line
key	source/keys.c	/^	Key 	key; 		\/* the key's structure. *\/$/;"	m	struct:BindStack	file:
key	source/names.c	/^	char *		key;		\/* key for this channel *\/$/;"	m	struct:channel_stru	file:
key	source/status.c	/^	char 	key;$/;"	m	struct:status_formats	file:
key_exec	source/keys.c	/^static void	key_exec (Key *key) $/;"	f	file:
key_exec_bt	source/keys.c	/^static void	key_exec_bt (Key *key) $/;"	f	file:
keylen	include/sedcrypt.h	/^	int	keylen;$/;"	m	struct:CryptStru
keyptr	source/sdbm.c	/^	int keyptr;		       \/* current key for nextkey *\/$/;"	m	struct:SDBM	file:
kholdread	source/newio.c	/^static  void    kholdread (int vfd)   { kunsetflag(CHANNEL(vfd), POLLRDNORM); }$/;"	f	file:
kholdread	source/newio.c	/^static  void    kholdread (int vfd) { FD_CLR(CHANNEL(vfd), &readables); }$/;"	f	file:
kholdread	source/newio.c	/^static  void    kholdread (int vfd)$/;"	f	file:
kill_all_processes	source/exec.c	/^static void 	kill_all_processes (int signo)$/;"	f	file:
kill_process	source/exec.c	/^static void 	kill_process (int kill_index, int sig)$/;"	f	file:
kill_screen	source/screen.c	/^void 	kill_screen (Screen *screen)$/;"	f
killable	include/window.h	/^	short	killable;		\/* Can it be killed? *\/$/;"	m	struct:WindowStru
killpg	configure	/^killpg();$/;"	f
killpg	source/exec.c	1304;"	d	file:
kinit	source/newio.c	/^static void	kinit (void)$/;"	f	file:
kinit	source/newio.c	/^static void kinit (void)$/;"	f	file:
klock	source/newio.c	/^static	void	klock	(void)$/;"	f	file:
klock	source/newio.c	/^static	void	klock (void) { return; }$/;"	f	file:
knoread	source/newio.c	/^static  void    knoread (int vfd)     { kunsetflag(CHANNEL(vfd), POLLRDNORM); }$/;"	f	file:
knoread	source/newio.c	/^static  void    knoread (int vfd) { FD_CLR(CHANNEL(vfd), &readables); } $/;"	f	file:
knoread	source/newio.c	/^static  void    knoread (int vfd)$/;"	f	file:
knowrite	source/newio.c	/^static  void    knowrite (int vfd)    { kunsetflag(CHANNEL(vfd), POLLWRNORM); }$/;"	f	file:
knowrite	source/newio.c	/^static  void    knowrite (int vfd) { FD_CLR(CHANNEL(vfd), &writables); }$/;"	f	file:
knowrite	source/newio.c	/^static  void    knowrite (int vfd)$/;"	f	file:
kqueue_fd	source/newio.c	/^static int              kqueue_fd = -1;$/;"	v	file:
kqueue_poll	source/newio.c	/^static struct timespec  kqueue_poll = { 0, 0 };$/;"	v	typeref:struct:timespec	file:
kread	source/newio.c	/^static  void    kread (int vfd)	      { ksetflag(CHANNEL(vfd), POLLRDNORM); }$/;"	f	file:
kread	source/newio.c	/^static  void    kread (int vfd) { FD_SET(CHANNEL(vfd), &readables); }$/;"	f	file:
kread	source/newio.c	/^static  void    kread (int vfd)$/;"	f	file:
kreadable	source/newio.c	/^static	int	kreadable (int vfd, double timeout)$/;"	f	file:
ksetflag	source/newio.c	/^static void	ksetflag (int fd, int flag)$/;"	f	file:
ksleep	source/newio.c	/^static	int	ksleep (double timeout)$/;"	f	file:
kunholdread	source/newio.c	/^static  void    kunholdread (int vfd) { FD_SET(CHANNEL(vfd), &readables); }$/;"	f	file:
kunholdread	source/newio.c	/^static  void    kunholdread (int vfd) { ksetflag(CHANNEL(vfd), POLLRDNORM); }$/;"	f	file:
kunholdread	source/newio.c	/^static  void    kunholdread (int vfd)$/;"	f	file:
kunlock	source/newio.c	/^static	void	kunlock (void) { return; }$/;"	f	file:
kunlock	source/newio.c	/^static	void	kunlock (void)$/;"	f	file:
kunsetflag	source/newio.c	/^static void	kunsetflag (int fd, int flag)$/;"	f	file:
kwritable	source/newio.c	/^static	int	kwritable (int vfd, double timeout)$/;"	f	file:
kwrite	source/newio.c	/^static  void    kwrite (int vfd)      { ksetflag(CHANNEL(vfd), POLLWRNORM); }$/;"	f	file:
kwrite	source/newio.c	/^static  void    kwrite (int vfd) { FD_SET(CHANNEL(vfd), &writables); }$/;"	f	file:
kwrite	source/newio.c	/^static  void    kwrite (int vfd)$/;"	f	file:
lame_wait_nick	source/server.c	/^static	char    lame_wait_nick[] = "***LW***";$/;"	v	file:
last	source/wcwidth.c	/^  int last;$/;"	m	struct:interval	file:
last_alloca_header	source/alloca.c	/^static header *last_alloca_header = NULL;	\/* -> last alloca header.  *\/$/;"	v	file:
last_arg	source/ircaux.c	/^char *	last_arg (char **src, size_t *cluep, int extended)$/;"	f
last_char	source/ircaux.c	/^int 	last_char (const char *string)$/;"	f
last_created_hook	source/hook.c	/^static int	last_created_hook = -2;$/;"	v	file:
last_event	source/clock.c	/^	Timeval	last_event;$/;"	m	struct:system_timer	file:
last_failed_open_errno	source/files.c	/^static int	last_failed_open_errno = 0;$/;"	v	file:
last_function_call_level	source/alias.c	/^	int	last_function_call_level = -1;$/;"	v
last_input_screen	source/screen.c	/^	Screen	*last_input_screen;$/;"	v
last_key	include/screen.h	/^	void *	last_key;		\/* The last Key pressed. *\/$/;"	m	struct:ScreenStru
last_logref	source/logfiles.c	/^int	last_logref = -1;$/;"	v
last_notify_nick	include/server.h	/^        char *          last_notify_nick;$/;"	m	struct:__anon8
last_notify_nick	source/irc.c	/^		*last_notify_nick = (char *) 0;	\/* last detected nickname *\/$/;"	v
last_press	include/screen.h	/^	Timeval last_press;		\/* The last time a key was pressed.$/;"	m	struct:ScreenStru
last_regex	source/window.c	/^regex_t *last_regex = NULL;$/;"	v
last_regex_error	source/functions.c	/^static int last_regex_error = 0; 		\/* XXX *\/$/;"	v	file:
last_scroll_seconds_interval	source/window.c	/^static	int	last_scroll_seconds_interval = 0;$/;"	v	file:
last_server	source/server.c	/^	int	last_server = NOSERV;$/;"	v
last_token	source/expr2.c	/^	TOKEN	last_token;$/;"	m	struct:__anon15	file:
last_used	source/ignore.c	/^	Timeval	last_used;		\/* When it was last ``triggered'' *\/$/;"	m	struct:IgnoreStru	file:
last_window_refnum	include/screen.h	/^	unsigned last_window_refnum;	\/* Most previous current window *\/$/;"	m	struct:ScreenStru
lastlog	include/lastlog.h	/^	BUILT_IN_COMMAND(lastlog);$/;"	v
lastlog_mask	include/window.h	/^	Mask	lastlog_mask;		\/* The LASTLOG_LEVEL, determines what$/;"	m	struct:WindowStru
lastlog_mask	source/lastlog.c	/^static	Mask	lastlog_mask;$/;"	v	file:
lastlog_max	include/window.h	/^	int	lastlog_max;		\/* Max number of messages in lastlog *\/$/;"	m	struct:WindowStru
lastlog_newest	source/lastlog.c	/^Lastlog *	lastlog_newest = NULL;$/;"	v
lastlog_oldest	source/lastlog.c	/^Lastlog *	lastlog_oldest = NULL;$/;"	v
lastlog_size	include/window.h	/^	int	lastlog_size;		\/* number of messages in lastlog. *\/$/;"	m	struct:WindowStru
lastlog_stru	source/lastlog.c	/^typedef struct	lastlog_stru$/;"	s	file:
lastop	source/expr.c	/^static char	*lastop (char *ptr)$/;"	f	file:
lasttime	source/dcc.c	/^	Timeval		lasttime;$/;"	m	struct:DCC_struct	file:
lba2msf	contrib/cdrom.c	/^static void lba2msf(int lba, unsigned char *msf)$/;"	f	file:
len	source/term.c	/^	int		 len, flush, close;$/;"	m	struct:tio_qentry_stru	file:
len_encoder	source/ircaux.c	/^static ssize_t	len_encoder (const char *orig, size_t orig_len, const void *meta, size_t meta_len, char *dest, size_t dest_len)$/;"	f	file:
level	source/flood.c	/^	int		level;$/;"	m	struct:flood_stru	file:
level	source/lastlog.c	/^	int	level;$/;"	m	struct:lastlog_stru	file:
level1	source/mail.c	/^	void	(*level1) (void);$/;"	m	struct:mail_checker	file:
level2	source/mail.c	/^	void	(*level2) (void);$/;"	m	struct:mail_checker	file:
level3	source/mail.c	/^	void	(*level3) (void);$/;"	m	struct:mail_checker	file:
level_bucket	source/levels.c	/^static	Bucket *level_bucket = NULL;$/;"	v	file:
level_to_str	source/levels.c	/^const char *	level_to_str (int l)$/;"	f
levelctl	source/levels.c	/^char *levelctl	(char *input)$/;"	f
lexerr	source/expr2.c	/^static int	lexerr (expr_info *c, const char *format, ...)$/;"	f	file:
li	include/screen.h	/^	int	li;$/;"	m	struct:ScreenStru
li	source/term.c	/^static	int	li;$/;"	v	file:
libexecdir	Makefile	/^libexecdir  = ${exec_prefix}\/libexec$/;"	m
limit	source/names.c	/^	int		limit;		\/* max users for the channel *\/$/;"	m	struct:channel_stru	file:
lin_chars	source/alist.c	/^u_32int_t	lin_chars;$/;"	v
lin_ints	source/alist.c	/^u_32int_t	lin_ints;$/;"	v
line	include/status.h	/^        Status_line     line[3];$/;"	m	struct:status_stuff
line	include/who.h	/^	void (*line) (int, char *, char *);$/;"	m	struct:IsonEntryT
line	include/who.h	/^	void (*line) (int, const char *, const char *, const char **);$/;"	m	struct:WhoEntryT
line	include/window.h	/^	char			*line;$/;"	m	struct:DisplayStru
line	source/commands.c	/^	int	line;$/;"	m	struct:load_info	file:
line	source/ircaux.c	/^	int line;$/;"	m	struct:_mo_money	file:
line_length	include/server.h	/^	int	line_length;		\/* How long a protocol command may be *\/$/;"	m	struct:__anon8
link	source/alloca.c	/^    long link;			\/* Address of trailer block of previous$/;"	m	struct:stk_trailer	file:
linked_refnum	include/window.h	/^	intmax_t		linked_refnum;$/;"	m	struct:DisplayStru
list	include/alist.h	/^	array_item **list;$/;"	m	struct:__anon3
list	include/ircaux.h	/^	BucketItem *list;$/;"	m	struct:Bucket
list	include/notify.h	/^	struct notify_stru **	list;$/;"	m	struct:notify_alist	typeref:struct:notify_alist::notify_stru
list	source/alias.c	/^	Symbol **	list;$/;"	m	struct:SymbolSetStru	file:
list	source/hook.c	/^	Hook	*list;			\/* The list of events for type *\/$/;"	m	struct:Hookables	file:
list	source/hook.c	/^	Hook    *list;$/;"	m	struct:onstacklist	file:
list	source/names.c	/^	Nick	**list;$/;"	m	struct:nick_list_stru	file:
list_a_window	source/window.c	/^static void 	list_a_window (Window *window, int len)$/;"	f	file:
list_all_queues	source/queue.c	/^static void	list_all_queues (Queue **list)$/;"	f	file:
list_builtin_commands	source/alias.c	/^static void	list_builtin_commands (const char *orig_name)$/;"	f	file:
list_builtin_expandos	source/alias.c	/^static void	list_builtin_expandos (const char *orig_name)$/;"	f	file:
list_builtin_functions	source/alias.c	/^static void	list_builtin_functions (const char *orig_name)$/;"	f	file:
list_builtin_variables	source/alias.c	/^static void	list_builtin_variables (const char *orig_name)$/;"	f	file:
list_channels	source/names.c	/^void 	list_channels (void)$/;"	f
list_cmd_alias	source/alias.c	/^static void	list_cmd_alias (const char *orig_name)$/;"	f	file:
list_local_alias	source/alias.c	/^static void	list_local_alias (const char *orig_name)$/;"	f	file:
list_lookup	source/list.c	/^List 	*list_lookup (List **list, const char *name, int wild, int rem)$/;"	f
list_match	source/list.c	/^static __inline__ int	list_match (List *item1, const char *str)$/;"	f	file:
list_one_queue	source/queue.c	/^static void	list_one_queue (Queue *q)$/;"	f	file:
list_queue	source/queue.c	/^static void	list_queue (Queue **list, const char *name)$/;"	f	file:
list_strcmp	source/list.c	/^static __inline__ int	list_strcmp (List *item1, const char *str)$/;"	f	file:
list_stru	include/list.h	/^typedef	struct	list_stru$/;"	s
list_timers	source/timer.c	/^static	void	list_timers (const char *command)$/;"	f	file:
list_var_alias	source/alias.c	/^static void	list_var_alias (const char *orig_name)$/;"	f	file:
listen	acconfig.h	176;"	d
load	include/commands.h	/^	BUILT_IN_COMMAND(load);$/;"	v
load_depth	source/commands.c	/^int 	load_depth = -1;$/;"	v
load_info	source/commands.c	/^struct load_info$/;"	s	file:
load_ircrc	source/irc.c	/^void    load_ircrc (void)$/;"	f
load_level	source/commands.c	/^} load_level[MAX_LOAD_DEPTH];$/;"	v	typeref:struct:load_info
loader	source/commands.c	/^	const char	*loader;$/;"	m	struct:load_info	file:
loader_pf	source/commands.c	/^static void	loader_pf (const char *file_contents, off_t file_contents_size, const char *filename, const char *subargs, struct load_info *loadinfo)$/;"	f	file:
loader_std	source/commands.c	/^static void	loader_std (const char *file_contents, off_t file_contents_size, const char *filename, const char *subargs, struct load_info *loadinfo)$/;"	f	file:
loader_which	source/commands.c	/^static void	loader_which (const char *file_contents, off_t file_contents_size, const char *filename, const char *subargs, struct load_info *loadinfo)$/;"	f	file:
local_filename	source/dcc.c	/^	char *		local_filename;$/;"	m	struct:DCC_struct	file:
local_sockaddr	source/dcc.c	/^	SS		local_sockaddr;		\/* Our saddr *\/$/;"	m	struct:DCC_struct	file:
local_sockname	include/server.h	/^	SS	local_sockname; 	\/* sockname of this connection *\/$/;"	m	struct:__anon8
localcmd	include/alias.h	/^	BUILT_IN_COMMAND(localcmd);$/;"	v
lock_dcc	source/dcc.c	/^static int	lock_dcc (DCC_list *dcc)$/;"	f	file:
lock_stack_frame	source/alias.c	/^void	lock_stack_frame 	(void)$/;"	f
locked	source/alias.c	/^	int	locked;		\/* Are we locked in a wait? *\/$/;"	m	struct:RuntimeStackStru	file:
locked	source/dcc.c	/^	int		locked;			\/* XXX - Sigh *\/$/;"	m	struct:DCC_struct	file:
log	include/window.h	/^	short	log;			\/* True if file logging is on *\/$/;"	m	struct:WindowStru
log	source/logfiles.c	/^	FILE *	log;$/;"	m	struct:Logfile	file:
log_fp	include/window.h	/^	FILE	*log_fp;		\/* file pointer for the log file *\/$/;"	m	struct:WindowStru
logcmd	include/log.h	/^	BUILT_IN_COMMAND(logcmd);$/;"	v
logctl	source/logfiles.c	/^char *logctl	(char *input)$/;"	f
logfile	include/window.h	/^	char	*logfile;		\/* window's logfile name *\/$/;"	m	struct:WindowStru
logfile_activity	source/logfiles.c	/^static Logfile *	logfile_activity (Logfile *log, char **args)$/;"	f	file:
logfile_add	source/logfiles.c	/^static Logfile *	logfile_add (Logfile *log, char **args)$/;"	f	file:
logfile_describe	source/logfiles.c	/^static Logfile *	logfile_describe (Logfile *log, char **args)$/;"	f	file:
logfile_filename	source/logfiles.c	/^static Logfile *	logfile_filename (Logfile *log, char **args)$/;"	f	file:
logfile_func	source/logfiles.c	/^typedef Logfile *(*logfile_func) (Logfile *, char **);$/;"	t	file:
logfile_get_targets	source/logfiles.c	/^static char *logfile_get_targets (Logfile *log)$/;"	f	file:
logfile_kill	source/logfiles.c	/^static Logfile *	logfile_kill (Logfile *log, char **args)$/;"	f	file:
logfile_level	source/logfiles.c	/^static Logfile *	logfile_level (Logfile *log, char **args)$/;"	f	file:
logfile_line_mangler	source/log.c	/^	int	logfile_line_mangler;$/;"	v
logfile_list	source/logfiles.c	/^static Logfile *	logfile_list (Logfile *log, char **args)$/;"	f	file:
logfile_mangle	source/logfiles.c	/^static Logfile *	logfile_mangle (Logfile *log, char **args)$/;"	f	file:
logfile_name	source/logfiles.c	/^static Logfile *	logfile_name (Logfile *log, char **args)$/;"	f	file:
logfile_new	source/logfiles.c	/^static Logfile *	logfile_new (Logfile *log, char **args)$/;"	f	file:
logfile_off	source/logfiles.c	/^static Logfile *	logfile_off (Logfile *log, char **args)$/;"	f	file:
logfile_on	source/logfiles.c	/^static Logfile *	logfile_on (Logfile *log, char **args)$/;"	f	file:
logfile_ops	source/logfiles.c	/^} logfile_ops;$/;"	t	typeref:struct:logfile_ops_T	file:
logfile_ops_T	source/logfiles.c	/^typedef struct logfile_ops_T {$/;"	s	file:
logfile_refnum	source/logfiles.c	/^static Logfile *	logfile_refnum (Logfile *log, char **args)$/;"	f	file:
logfile_remove	source/logfiles.c	/^static Logfile *	logfile_remove (Logfile *log, char **args)$/;"	f	file:
logfile_rewrite	source/logfiles.c	/^static Logfile *	logfile_rewrite (Logfile *log, char **args)$/;"	f	file:
logfile_server	source/logfiles.c	/^static Logfile *	logfile_server (Logfile *log, char **args)$/;"	f	file:
logfile_type	source/logfiles.c	/^static Logfile *	logfile_type (Logfile *log, char **args)$/;"	f	file:
logfiles	source/logfiles.c	/^Logfile *logfiles = NULL;$/;"	v
logfiles_merge_winrefs	source/logfiles.c	/^void    logfiles_merge_winrefs (int oldref, int newref)$/;"	f
logfiles_swap_winrefs	source/logfiles.c	/^void    logfiles_swap_winrefs (int oldref, int newref)$/;"	f
logger	source/log.c	/^void	logger (void *stuff)$/;"	f
logic_attributes	source/screen.c	/^static size_t	logic_attributes (unsigned char *output, Attribute *old_a, Attribute *a)$/;"	f	file:
logical	source/exec.c	/^	char	*logical;$/;"	m	struct:__anon14	file:
logical_chars	include/screen.h	/^	int	logical_chars[INPUT_BUFFER_SIZE + 1];$/;"	m	struct:InputLine
logical_columns	include/screen.h	/^	int	logical_columns[INPUT_BUFFER_SIZE + 1];$/;"	m	struct:InputLine
logical_cursor	include/screen.h	/^	int	logical_cursor;$/;"	m	struct:InputLine
logical_size	include/window.h	/^	short	logical_size;		\/* How many units window size is *\/$/;"	m	struct:WindowStru
logical_to_index	source/exec.c	/^static	int 	logical_to_index (const char *logical)$/;"	f	file:
logref	source/logfiles.c	/^int	logref = 0;$/;"	v
logtype	source/logfiles.c	/^static const char *logtype[] = { "TARGETS", "WINDOWS", "SERVERS" };$/;"	v	file:
longname	source/term.c	/^	const char *	longname;$/;"	m	struct:cap2info	file:
lookup_dbm	source/files.c	/^static Dbm *	lookup_dbm (int refnum)$/;"	f	file:
lookup_file	source/files.c	/^static File *	lookup_file (int fd)$/;"	f	file:
lookup_queue	source/queue.c	/^static Queue *	lookup_queue (Queue **list, const char *name)$/;"	f	file:
lookup_symbol	source/alias.c	/^static Symbol *	lookup_symbol (const char *name)$/;"	f	file:
lookup_transform	source/ircaux.c	/^int	lookup_transform (const char *str, int *numargs, int *expansion_size, int *expansion_overhead)$/;"	f
lookup_window_logfile	source/files.c	/^static File *	lookup_window_logfile (int fd)$/;"	f	file:
lower	source/ircaux.c	/^char *	lower (char *str)$/;"	f
ltoa	include/ircaux.h	106;"	d
lval	source/expr2.c	/^	char *	lval;			\/* Cached unexpanded variable name *\/$/;"	m	struct:TOKEN_type	file:
lval	source/ircaux.c	/^static 	const char *lval[] = { "rvalue", "lvalue" };$/;"	v	file:
lw_strcmp	source/ircaux.c	/^int 	lw_strcmp(comp_func *compar, char *val1, char *val2)$/;"	f
magic	source/ircaux.c	/^	unsigned magic;$/;"	m	struct:_mo_money	file:
magic	source/ircaux.c	87;"	d	file:
magic	source/recode.c	/^	int	magic;		\/* 0 - can be deleted; 1 - cannot be deleted *\/$/;"	m	struct:RecodeRule	file:
mail_checker	source/mail.c	/^struct mail_checker {$/;"	s	file:
mail_format	source/status.c	/^static	char	*mail_format 		= (char *) 0;$/;"	v	file:
mail_last_count	source/mail.c	/^static	int	mail_last_count = -1;$/;"	v	file:
mail_last_count_str	source/mail.c	/^static	char *	mail_last_count_str = NULL;$/;"	v	file:
mail_latch	source/mail.c	/^static	int	mail_latch = 0;$/;"	v	file:
mail_systimer	source/mail.c	/^void	mail_systimer (void)$/;"	f
mail_timeref	source/mail.c	/^char 	mail_timeref[] = "MAILTIM";$/;"	v
mail_types	source/mail.c	/^struct mail_checker mail_types[] = {$/;"	v	typeref:struct:mail_checker
maildir_count	source/mail.c	/^static int	maildir_count (void)$/;"	f	file:
maildir_last_changed	source/mail.c	/^static	time_t	maildir_last_changed = 0;$/;"	v	file:
maildir_path	source/mail.c	/^static	char *	maildir_path = (char *) 0;$/;"	v	file:
main	contrib/ircman.c	/^int main (int argc, char *argv[])$/;"	f
main	contrib/utf8.c	/^int main (void) $/;"	f
main	source/irc.c	/^int 	main (int argc, char *argv[])$/;"	f
main	source/wserv.c	/^int	main (int argc, char **argv)$/;"	f
main	test.c	/^main(argc, argv)$/;"	f
main_screen	source/screen.c	/^	Screen	*main_screen;$/;"	v
main_status	source/status.c	/^	Status	main_status;$/;"	v
main_status_init	source/status.c	/^	int	main_status_init = 0;$/;"	v
make_005	source/server.c	/^void	make_005 (int refnum)$/;"	f
make_local_stack	source/alias.c	/^int	make_local_stack 	(const char *name)$/;"	f
make_new_Symbol	source/alias.c	/^static Symbol *make_new_Symbol (const char *name)$/;"	f	file:
make_notify_list	source/notify.c	/^void 	make_notify_list (int refnum)$/;"	f
make_status	source/status.c	/^int	make_status (Window *window, Status *status)$/;"	f
make_string_var	source/vars.c	/^char 	*make_string_var (const char *var_name)$/;"	f
make_string_var_bydata	source/vars.c	/^char 	*make_string_var_bydata (int type, void *vp)$/;"	f
make_window_current	source/window.c	/^void 	make_window_current (Window *window)$/;"	f
make_window_current_by_refnum	source/window.c	/^void	make_window_current_by_refnum (int refnum)$/;"	f
malloc_check	source/ircaux.c	/^static int	malloc_check (void *ptr)$/;"	f	file:
malloc_dump	source/ircaux.c	/^void malloc_dump (const char *file) {$/;"	f
malloc_dupchar	source/ircaux.c	/^char *	malloc_dupchar (int i)$/;"	f
malloc_sprintf	source/ircaux.c	/^char *	malloc_sprintf (char **ptr, const char *format, ...)$/;"	f
malloc_strcat	include/ircaux.h	203;"	d
malloc_strcat	include/ircaux.h	35;"	d
malloc_strcat2	include/ircaux.h	204;"	d
malloc_strcat2_c	source/ircaux.c	/^char *	malloc_strcat2_c (char **ptr, const char *str1, const char *str2, size_t *clue)$/;"	f
malloc_strcat3_c	source/ircaux.c	/^char *	malloc_strcat3_c (char **ptr, const char *str1, const char *str2, const char *str3, size_t *clue)$/;"	f
malloc_strcat_c	source/ircaux.c	/^char *	malloc_strcat_c (char **ptr, const char *src, size_t *cluep)$/;"	f
malloc_strcat_ues	include/ircaux.h	36;"	d
malloc_strcat_ues_c	source/ircaux.c	/^char *	malloc_strcat_ues_c (char **dest, const char *src, const char *special, size_t *cluep)$/;"	f
malloc_strcat_word	include/ircaux.h	206;"	d
malloc_strcat_word_c	source/ircaux.c	/^char *	malloc_strcat_word_c (char **ptr, const char *word_delim, const char *word, int extended, size_t *clue)$/;"	f
malloc_strcat_wordlist	include/ircaux.h	205;"	d
malloc_strcat_wordlist_c	source/ircaux.c	/^char *	malloc_strcat_wordlist_c (char **ptr, const char *word_delim, const char *wordlist, size_t *clue)$/;"	f
malloc_strcpy	include/ircaux.h	202;"	d
malloc_strcpy_c	source/ircaux.c	/^char *	malloc_strcpy_c (char **ptr, const char *src, size_t *clue)$/;"	f
malloc_strdup	source/ircaux.c	/^char *	malloc_strdup (const char *str)$/;"	f
malloc_strdup2	source/ircaux.c	/^char *	malloc_strdup2 (const char *str1, const char *str2)$/;"	f
malloc_strdup3	source/ircaux.c	/^char *	malloc_strdup3 (const char *str1, const char *str2, const char *str3)$/;"	f
malloc_strndup	source/ircaux.c	/^char *	malloc_strndup (const char *str, size_t len)$/;"	f
malloc_vsprintf	source/ircaux.c	/^char *	malloc_vsprintf (char **ptr, const char *format, va_list args)$/;"	f
mandir	Makefile	/^mandir	    = ${prefix}\/man$/;"	m
mangle_desc	source/logfiles.c	/^	char *	mangle_desc;$/;"	m	struct:Logfile	file:
mangler	source/logfiles.c	/^	int	mangler;$/;"	m	struct:Logfile	file:
map	include/status.h	/^	short		map[MAX_FUNCTIONS];$/;"	m	struct:status_line
map	source/keys.c	/^    struct Key *map;    	\/* a map of subkeys (may be NULL) *\/$/;"	m	struct:Key	typeref:struct:Key::Key	file:
map	source/status.c	/^	short	map;$/;"	m	struct:status_formats	file:
mark	source/hook.c	/^	int	mark;			\/* Hook type is currently active *\/$/;"	m	struct:Hookables	file:
marshall_getaddrinfo	source/network.c	/^void	marshall_getaddrinfo (int fd, AI *results)$/;"	f
mask	source/commands.c	/^	int  mask;$/;"	m	struct:target_type	file:
mask	source/logfiles.c	/^	Mask	mask;$/;"	m	struct:Logfile	file:
mask_digits	source/ircaux.c	/^void	mask_digits (char **host)$/;"	f
mask_isall	include/levels.h	/^__inline static int	mask_isall (const Mask *set)$/;"	f
mask_isnone	include/levels.h	/^__inline static int	mask_isnone (const Mask *set)$/;"	f
mask_isset	include/levels.h	/^__inline static int	mask_isset (const Mask *set, int bit)$/;"	f
mask_set	include/levels.h	/^__inline static int	mask_set (Mask *set, int bit)$/;"	f
mask_setall	include/levels.h	/^__inline static int	mask_setall (Mask *set)$/;"	f
mask_to_negative_str	source/levels.c	/^static const char *	mask_to_negative_str (const Mask *mask)$/;"	f	file:
mask_to_positive_str	source/levels.c	/^static const char *	mask_to_positive_str (const Mask *mask)$/;"	f	file:
mask_to_str	source/levels.c	/^const char *	mask_to_str (const Mask *mask)$/;"	f
mask_unset	include/levels.h	/^__inline static int	mask_unset (Mask *set, int bit)$/;"	f
mask_unsetall	include/levels.h	/^__inline static int	mask_unsetall (Mask *set)$/;"	f
masks	source/sdbm.c	/^static long masks[] = {$/;"	v	file:
matheval	source/expr2.c	/^static char *	matheval (char *s, const char *args)$/;"	f	file:
mathparse	source/expr2.c	/^static void	mathparse (expr_info *c, int pc)$/;"	f	file:
max	include/alist.h	/^	int max;$/;"	m	struct:__anon3
max	include/ircaux.h	/^	int max;$/;"	m	struct:Bucket
max	include/notify.h	/^	int			max;$/;"	m	struct:notify_alist
max	source/alias.c	/^	int		max;$/;"	m	struct:SymbolSetStru	file:
max	source/names.c	/^	int	max;$/;"	m	struct:nick_list_stru	file:
max_alloc	include/notify.h	/^	int			max_alloc;$/;"	m	struct:notify_alist
max_alloc	source/alias.c	/^	int		max_alloc;$/;"	m	struct:SymbolSetStru	file:
max_alloc	source/names.c	/^	int	max_alloc;$/;"	m	struct:nick_list_stru	file:
max_cached_chan_size	include/server.h	/^	int	max_cached_chan_size;	\/* Bigger channels won't cache U@H *\/$/;"	m	struct:__anon8
max_number_of_transforms	source/ircaux.c	/^int	max_number_of_transforms = 256;$/;"	v
max_transform	source/ircaux.c	/^int	max_transform;$/;"	v
max_wind	source/alias.c	/^	int 	max_wind = -1;$/;"	v
maxbno	source/sdbm.c	/^	long maxbno;		       \/* size of dirfile in bits *\/$/;"	m	struct:SDBM	file:
maxc	source/alloca.c	/^    long maxc;			\/* Amount of contiguous space which would$/;"	m	struct:stk_stat	file:
maxs	source/alloca.c	/^    long maxs;			\/* Maximum number of stack segments so far.  *\/$/;"	m	struct:stk_stat	file:
mbox_count	source/mail.c	/^static int	mbox_count (void)$/;"	f	file:
mbox_last_changed	source/mail.c	/^static	time_t	mbox_last_changed = 0;$/;"	v	file:
mbox_last_size	source/mail.c	/^static	off_t	mbox_last_size = 0;$/;"	v	file:
mbox_path	source/mail.c	/^static	char *	mbox_path = (char *) 0;$/;"	v	file:
memmove	configure	/^memmove();$/;"	f
memmove	include/irc_std.h	270;"	d
message	source/commands.c	/^	const char *message;$/;"	m	struct:target_type	file:
message_from	include/window.h	255;"	d
message_setall	include/window.h	257;"	d
message_to	include/window.h	253;"	d
metric_time	include/ircaux.h	/^struct metric_time {$/;"	s
mkdigit	source/screen.c	649;"	d	file:
mklower_l	source/recode.c	/^int	mklower_l (int codepoint)$/;"	f
mkupper	source/reg.c	66;"	d	file:
mkupper_l	source/recode.c	/^int	mkupper_l (int codepoint)$/;"	f
mo_ptr	source/ircaux.c	85;"	d	file:
mode_format	source/status.c	/^static	char	*mode_format 		= (char *) 0;$/;"	v	file:
modestr	source/names.c	/^	char *		modestr;	\/* The whole mode string *\/$/;"	m	struct:channel_stru	file:
move_all_lastlog	source/lastlog.c	/^void	move_all_lastlog (Window *oldwin, Window *newwin)$/;"	f
move_array_items	source/alist.c	/^void move_array_items (array *a, int start, int end, int dir)$/;"	f
move_channel_to_window	source/names.c	/^void   move_channel_to_window (const char *chan, int server, int old_w, int new_w)$/;"	f
move_index	source/array.c	/^static void		move_index (an_array *array, long oldindex, long newindex)$/;"	f	file:
move_lastlog_item	source/lastlog.c	/^static void	move_lastlog_item (Lastlog *item, Window *newwin)$/;"	f	file:
move_lastlog_item_by_level	source/lastlog.c	/^void	move_lastlog_item_by_level (Window *oldwin, Window *newwin, Mask *levels)$/;"	f
move_lastlog_item_by_regex	source/lastlog.c	/^void	move_lastlog_item_by_regex (Window *oldwin, Window *newwin, const char *str)$/;"	f
move_lastlog_item_by_string	source/lastlog.c	/^void	move_lastlog_item_by_string (Window *oldwin, Window *newwin, const char *str)$/;"	f
move_lastlog_item_by_target	source/lastlog.c	/^void	move_lastlog_item_by_target (Window *oldwin, Window *newwin, const char *str)$/;"	f
move_to_abs_word	include/words.h	50;"	d
move_to_next_word	source/words.c	/^static int	move_to_next_word (const char **str, const char *start, int extended, const char *delims)$/;"	f	file:
move_to_prev_word	source/words.c	/^static int	move_to_prev_word (const char **str, const char *start, int extended, const char *delims)$/;"	f	file:
move_window	source/window.c	/^static void 	move_window (Window *window, int offset)$/;"	f	file:
move_window_to	source/window.c	/^static void 	move_window_to (Window *window, int offset)$/;"	f	file:
move_word_rel	source/words.c	/^ssize_t	move_word_rel (const char *start, const char **mark, int word, int extended, const char *quotes)$/;"	f
msg	source/lastlog.c	/^	char	*msg;$/;"	m	struct:lastlog_stru	file:
mt_days	include/ircaux.h	/^	long mt_days;$/;"	m	struct:metric_time
mt_mdays	include/ircaux.h	/^	double mt_mdays;$/;"	m	struct:metric_time
mtok	source/expr2.c	/^	TOKEN	mtok;$/;"	m	struct:__anon15	file:
mutex	source/newio.c	/^pthread_mutex_t		mutex;$/;"	v
my_PC	source/term.c	/^	char		my_PC;$/;"	v
my_accept	source/network.c	/^int	my_accept (int s, SA *addr, socklen_t *addrlen)$/;"	f
my_atol	source/ircaux.c	/^long	my_atol (const char *str)$/;"	f
my_clear_screen	include/input.h	/^	BUILT_IN_KEYBINDING(my_clear_screen);$/;"	v
my_columns	include/window.h	/^	short	my_columns;		\/* How wide we are when hidden *\/$/;"	m	struct:WindowStru
my_ctime	source/ircaux.c	/^char *	my_ctime (time_t when)$/;"	f
my_error	source/output.c	/^void 	my_error (const char *format, ...)$/;"	f
my_exit	source/wserv.c	/^static void 	my_exit(int value)$/;"	f	file:
my_freeaddrinfo	source/network.c	/^void	my_freeaddrinfo (AI *ai)$/;"	f
my_getaddrinfo	source/network.c	/^int	my_getaddrinfo (const char *nodename, const char *servname, const AI *hints, AI **res)$/;"	f
my_goto_window	source/window.c	/^static void 	my_goto_window (Screen *s, int which)$/;"	f	file:
my_iconv_open	source/ircaux.c	/^int my_iconv_open (iconv_t *forward, iconv_t *reverse, const char *stuff2)$/;"	f
my_input_line	include/screen.h	/^	InputLine *	my_input_line;$/;"	m	struct:PromptStru
my_isdigit	include/ircaux.h	220;"	d
my_isreadable	source/newio.c	/^int	my_isreadable (int vfd, double seconds)$/;"	f
my_isspace	include/ircaux.h	219;"	d
my_iswritable	source/newio.c	/^int	my_iswritable (int vfd, double seconds)$/;"	f
my_ltoa	source/ircaux.c	/^const char *	my_ltoa (long foo)$/;"	f
my_next_expr	source/if.c	/^char *	my_next_expr (char **args, char type, int whine, int wantchar)$/;"	f	file:
my_path	source/irc.c	/^		*my_path = (char *) 0,		\/* path to users home dir *\/$/;"	v
my_perl	source/perl.c	/^PerlInterpreter	*my_perl;$/;"	v
my_realpath	source/compat.c	/^char *	my_realpath (const char *pathname, char resolved_path[PATH_MAX])$/;"	f
my_set_clock	source/clock.c	/^void	my_set_clock (void *stuff)$/;"	f
my_signal	source/ircsig.c	/^sigfunc *	my_signal (int sig_no, sigfunc *sig_handler)$/;"	f
my_sleep	source/newio.c	/^int	my_sleep (double seconds)$/;"	f
my_stricmp	source/ircaux.c	/^int	my_stricmp (const unsigned char *str1, const unsigned char *str2)$/;"	f
my_strnicmp	source/ircaux.c	/^int	my_strnicmp (const unsigned char *str1, const unsigned char *str2, size_t n)$/;"	f
my_table_stricmp	include/ircaux.h	69;"	d
my_table_strnicmp	source/ircaux.c	/^int     my_table_strnicmp (const unsigned char *str1, const unsigned char *str2, size_t n, int table)$/;"	f
my_tcl	source/tcl.c	/^Tcl_Interp *my_tcl;$/;"	v
my_term	include/termx.h	/^struct my_term {$/;"	s
my_tparm	source/compat.c	/^char *my_tparm(const char *str, ...) {$/;"	f
myio_struct	source/newio.c	/^typedef	struct	myio_struct$/;"	s	file:
name	include/alist.h	/^	char *		name;$/;"	m	struct:__anon1
name	include/ircaux.h	/^	const char *name;$/;"	m	struct:BucketItem
name	include/list.h	/^	char	*name;$/;"	m	struct:list_stru
name	include/server.h	/^	char	*name;$/;"	m	struct:__anon7
name	include/window.h	/^	char *	name;			\/* Logical name for window *\/$/;"	m	struct:WindowStru
name	source/alias.c	/^	char	*name;			\/* name of alias *\/$/;"	m	struct:SymbolStru	file:
name	source/alias.c	/^	const char *name;	\/* Name of the stack *\/$/;"	m	struct:RuntimeStackStru	file:
name	source/clock.c	/^	char *	name;$/;"	m	struct:system_timer	file:
name	source/commands.c	/^	const char *	name;		\/* what the user types *\/$/;"	m	struct:__anon12	file:
name	source/ctcp.c	/^	const char	*name;  \/* name of ctcp datatag *\/$/;"	m	struct:_CtcpEntry	file:
name	source/dcc.c	/^	const char *	name;$/;"	m	struct:__anon13	file:
name	source/exec.c	/^	char	*name;			\/* full process name *\/$/;"	m	struct:__anon14	file:
name	source/functions.c	/^	const char	*name;$/;"	m	struct:__anon17	file:
name	source/functions.c	/^	const char *	name;$/;"	m	struct:__anon16	file:
name	source/hook.c	/^	const char *name;		\/* The name of the hook type *\/$/;"	m	struct:Hookables	file:
name	source/hook.c	/^	const char *name;$/;"	m	struct:NoiseInfo	file:
name	source/ircaux.c	/^	const char *	name;$/;"	m	struct:Transformer	file:
name	source/keys.c	/^    char *	name;		\/* the name of this binding *\/$/;"	m	struct:Binding	file:
name	source/logfiles.c	/^	char *	name;$/;"	m	struct:Logfile	file:
name	source/mail.c	/^	const char *	name;$/;"	m	struct:mail_checker	file:
name	source/queue.c	/^        char     *name;$/;"	m	struct:QueueT	file:
nanosleep	configure	/^nanosleep();$/;"	f
need_defered_commands	source/commands.c	/^	int	need_defered_commands = 0;$/;"	v
need_delayed_free	source/ircaux.c	/^	int	need_delayed_free = 0;$/;"	v
need_redraw	source/term.c	/^volatile	int		need_redraw;$/;"	v
need_static_functions	source/functions.c	74;"	d	file:
new_bucket	source/ircaux.c	/^Bucket *new_bucket (void)$/;"	f
new_check_flooding	source/flood.c	/^int	new_check_flooding (const char *nick, const char *nuh, const char *chan, const char *line, int level)$/;"	f
new_close	source/newio.c	/^int	new_close (int vfd)$/;"	f
new_dbm	source/files.c	/^static Dbm *	new_dbm (SDBM *the_db, int type)$/;"	f	file:
new_display_line	source/window.c	/^static Display *new_display_line (Display *prev, Window *w)$/;"	f	file:
new_file	source/files.c	/^static File *	new_file (struct epic_loadfile *elf\/*FILE *the_file*\/)$/;"	f	file:
new_free	include/ircaux.h	29;"	d
new_hold_fd	source/newio.c	/^int	new_hold_fd (int vfd)$/;"	f
new_ignore	source/ignore.c	/^static Ignore *new_ignore (const char *new_nick)$/;"	f	file:
new_io_event	source/newio.c	/^static void	new_io_event (int vfd)$/;"	f	file:
new_logfile	source/logfiles.c	/^static Logfile *	new_logfile (void)$/;"	f	file:
new_malloc	include/ircaux.h	28;"	d
new_match	source/reg.c	/^static int new_match (const unsigned char *pattern, const unsigned char *string)$/;"	f	file:
new_new_next_arg_count	source/ircaux.c	/^char *	new_new_next_arg_count (char *str, char **new_ptr, char *type, int count)$/;"	f
new_next_arg	include/words.h	86;"	d
new_next_arg_count	include/words.h	87;"	d
new_normalize_string	source/screen.c	/^unsigned char *	new_normalize_string (const unsigned char *str, int logical, int mangle)$/;"	f
new_open	source/newio.c	/^int 	new_open (int channel, void (*callback) (int), int io_type, int quiet, int server)$/;"	f
new_realloc	include/ircaux.h	30;"	d
new_realloc	source/ircaux.c	/^void *	new_realloc (void **ptr, size_t size)$/;"	f
new_search_term	source/window.c	/^static int	new_search_term (const char *arg)$/;"	f	file:
new_server_lastlog_mask	source/lastlog.c	/^	Mask *	new_server_lastlog_mask = NULL;$/;"	v
new_ssl_info	source/ssl.c	/^static ssl_info *	new_ssl_info (int vfd)$/;"	f	file:
new_status	source/status.c	/^Status *	new_status (void)$/;"	f
new_timer	source/timer.c	/^static Timer * new_timer (void)$/;"	f	file:
new_tiobuf	source/term.c	/^static tio_qentry	*new_tiobuf(tio_file *f)$/;"	f	file:
new_unhold_fd	source/newio.c	/^int	new_unhold_fd (int vfd)$/;"	f
new_window	source/window.c	/^Window	*new_window (Screen *screen)$/;"	f
newb	source/term.c	/^static	struct	termios	oldb, newb;$/;"	v	typeref:struct:	file:
newb	source/wserv.c	/^static	struct termios	oldb, newb;$/;"	v	typeref:struct:	file:
newer	source/lastlog.c	/^	struct	lastlog_stru	*newer;$/;"	m	struct:lastlog_stru	typeref:struct:lastlog_stru::lastlog_stru	file:
newer_lastlog_entry	source/lastlog.c	/^static Lastlog *newer_lastlog_entry (Lastlog *item, Window *window)$/;"	f	file:
newerf	test.c	/^newerf (f1, f2)$/;"	f	file:
newest_lastlog_for_window	source/lastlog.c	/^static Lastlog *newest_lastlog_for_window (Window *window)$/;"	f	file:
nexpr	test.c	/^nexpr(n)$/;"	f	file:
next	include/list.h	/^	struct	list_stru	*next;$/;"	m	struct:list_stru	typeref:struct:list_stru::list_stru
next	include/screen.h	/^	struct	PromptStru	*next;$/;"	m	struct:PromptStru	typeref:struct:PromptStru::PromptStru
next	include/screen.h	/^struct	ScreenStru *next;		\/* Previous screen in list *\/$/;"	m	struct:ScreenStru	typeref:struct:ScreenStru::ScreenStru
next	include/sedcrypt.h	/^	struct	CryptStru *next;$/;"	m	struct:CryptStru	typeref:struct:CryptStru::CryptStru
next	include/server.h	/^        struct  WaitCmdstru *next;$/;"	m	struct:WaitCmdstru	typeref:struct:WaitCmdstru::WaitCmdstru
next	include/who.h	/^	struct IsonEntryT *next;$/;"	m	struct:IsonEntryT	typeref:struct:IsonEntryT::IsonEntryT
next	include/who.h	/^        struct UserhostEntryT * next;$/;"	m	struct:UserhostEntryT	typeref:struct:UserhostEntryT::UserhostEntryT
next	include/who.h	/^        struct WhoEntryT *next;$/;"	m	struct:WhoEntryT	typeref:struct:WhoEntryT::WhoEntryT
next	include/window.h	/^	struct	DisplayStru	*next;$/;"	m	struct:DisplayStru	typeref:struct:DisplayStru::DisplayStru
next	include/window.h	/^	struct	window_stack_stru	*next;$/;"	m	struct:window_stack_stru	typeref:struct:window_stack_stru::window_stack_stru
next	include/window.h	/^struct	WindowStru	*next;		\/* Window below us on screen *\/$/;"	m	struct:WindowStru	typeref:struct:WindowStru::WindowStru
next	include/window.h	/^struct WNickListStru	*next;$/;"	m	struct:WNickListStru	typeref:struct:WNickListStru::WNickListStru
next	source/alloca.c	/^		union hdr *next;	\/* For chaining headers.  *\/$/;"	m	struct:hdr::__anon11	typeref:union:hdr::__anon11::hdr	file:
next	source/dcc.c	/^struct	DCC_struct *	next;$/;"	m	struct:DCC_struct	typeref:struct:DCC_struct::DCC_struct	file:
next	source/files.c	/^	struct DBM___ *next;$/;"	m	struct:DBM___	typeref:struct:DBM___::DBM___	file:
next	source/files.c	/^	struct FILE___ *next;$/;"	m	struct:FILE___	typeref:struct:FILE___::FILE___	file:
next	source/hook.c	/^	struct	hook_stru *next;$/;"	m	struct:hook_stru	typeref:struct:hook_stru::hook_stru	file:
next	source/hook.c	/^	struct onstacklist *next;$/;"	m	struct:onstacklist	typeref:struct:onstacklist::onstacklist	file:
next	source/ignore.c	/^	struct	IgnoreStru *next;$/;"	m	struct:IgnoreStru	typeref:struct:IgnoreStru::IgnoreStru	file:
next	source/keys.c	/^	struct BindStack *next;$/;"	m	struct:BindStack	typeref:struct:BindStack::BindStack	file:
next	source/keys.c	/^    struct Binding *next;	\/* linked-list stuff. :) *\/$/;"	m	struct:Binding	typeref:struct:Binding::Binding	file:
next	source/logfiles.c	/^	struct Logfile *next;$/;"	m	struct:Logfile	typeref:struct:Logfile::Logfile	file:
next	source/names.c	/^struct	channel_stru *	next;		\/* pointer to next channel *\/$/;"	m	struct:channel_stru	typeref:struct:channel_stru::channel_stru	file:
next	source/queue.c	/^        struct CmdListT *next;$/;"	m	struct:CmdListT	typeref:struct:CmdListT::CmdListT	file:
next	source/queue.c	/^        struct QueueT   *next;$/;"	m	struct:QueueT	typeref:struct:QueueT::QueueT	file:
next	source/ssl.c	/^	struct ssl_info_T *next;$/;"	m	struct:ssl_info_T	typeref:struct:ssl_info_T::ssl_info_T	file:
next	source/term.c	/^struct	tio_qentry_stru	*next, *tail;$/;"	m	struct:tio_qentry_stru	typeref:struct:tio_qentry_stru::tio_qentry_stru	file:
next	source/timer.c	/^        struct  timerlist_stru *next;$/;"	m	struct:timerlist_stru	typeref:struct:timerlist_stru::timerlist_stru	file:
next_addr	include/server.h	/^const	AI	*next_addr;		\/* The next one to try upon failure *\/$/;"	m	struct:__anon8
next_arg	include/words.h	78;"	d
next_arg_count	include/words.h	79;"	d
next_code_point	source/wcwidth.c	/^int     next_code_point (const unsigned char **i, int resync)$/;"	f
next_earg	include/words.h	94;"	d
next_empty_hookslot	source/hook.c	/^static int	next_empty_hookslot (void)$/;"	f	file:
next_expr	source/if.c	/^char *	next_expr (char **args, char type)$/;"	f
next_expr_failok	source/if.c	/^char *	next_expr_failok (char **args, char type)$/;"	f
next_expr_with_type	source/if.c	/^char *	next_expr_with_type (char **args, char type)$/;"	f
next_func_arg	include/words.h	101;"	d
next_in_comma_list	source/ircaux.c	/^char *	next_in_comma_list (char *str, char **after)$/;"	f
next_in_div_list	source/ircaux.c	/^char *	next_in_div_list (char *str, char **after, int delim)$/;"	f
next_level	source/levels.c	/^static	int	next_level = 1;$/;"	v	file:
next_server_in_group	source/server.c	/^static int	next_server_in_group (int oldserv, int direction)$/;"	f	file:
next_statement	source/expr.c	/^ssize_t	next_statement (const char *string)$/;"	f
next_unit	source/expr.c	/^static	char	*next_unit (char *str, const char *args, int stage)$/;"	f	file:
next_window	include/window.h	/^	BUILT_IN_KEYBINDING(next_window);$/;"	v
nick	include/sedcrypt.h	/^	char *	nick;$/;"	m	struct:CryptStru
nick	include/server.h	/^        const char *  nick;$/;"	m	struct:ServerInfo
nick	include/who.h	/^	char *	nick;$/;"	m	struct:UserhostItemT
nick	include/window.h	/^	char		*nick;$/;"	m	struct:WNickListStru
nick	source/hook.c	/^	char *	nick;		\/* \/on #type sernum NICK (arglist) stuff *\/$/;"	m	struct:hook_stru	file:
nick	source/ignore.c	/^	char	*nick;			\/* What is being ignored *\/$/;"	m	struct:IgnoreStru	file:
nick	source/names.c	/^	char 	*nick;		\/* nickname of person on channel *\/$/;"	m	struct:nick_stru	file:
nick	source/notify.c	/^	char	*nick;			\/* Who are we watching? *\/$/;"	m	struct:notify_stru	file:
nick_format	source/status.c	/^static	char	*nick_format		= (char *) 0;$/;"	v	file:
nick_list	source/commands.c	/^	char *nick_list;$/;"	m	struct:target_type	file:
nick_list_stru	source/names.c	/^typedef	struct	nick_list_stru$/;"	s	file:
nick_stru	source/names.c	/^typedef struct nick_stru$/;"	s	file:
nickname	include/server.h	/^	char	*nickname;		\/* Authoritative nickname for us *\/$/;"	m	struct:__anon8
nickname	source/irc.c	/^		nickname[NICKNAME_LEN + 1],	\/* users nickname *\/$/;"	v
nickname_change_rejected	source/server.c	/^void	nickname_change_rejected (int refnum, const char *mynick)$/;"	f
nicks	include/window.h	/^	WNickList *nicks;		\/* List of nick-queries for this win *\/$/;"	m	struct:WindowStru
nicks	source/names.c	/^	NickList	nicks;		\/* alist of nicks on channel *\/$/;"	m	struct:channel_stru	file:
noeval	source/expr2.c	/^	int	noeval;$/;"	m	struct:__anon15	file:
noise_info	source/hook.c	/^static	struct NoiseInfo **	noise_info = NULL;$/;"	v	typeref:struct:NoiseInfo	file:
noise_info_templates	source/hook.c	/^struct NoiseInfo noise_info_templates[] = {$/;"	v	typeref:struct:NoiseInfo
noise_level_num	source/hook.c	/^static	int 			noise_level_num = 0;$/;"	v	file:
noisy	source/hook.c	/^	int	noisy;		\/* \/on #[^-+]TYPE sernum nick (arglist) stuff *\/$/;"	m	struct:hook_stru	file:
normalize_filename	source/ircaux.c	/^int	normalize_filename (const char *str, Filename result)$/;"	f
normalize_nuh	source/flood.c	/^static const char *	normalize_nuh (const char *nuh)$/;"	f	file:
not	source/hook.c	/^	int	not;		\/* \/on #type sernum ^NICK *\/$/;"	m	struct:hook_stru	file:
notified	include/window.h	/^	short	notified;		\/* True if we have notified *\/$/;"	m	struct:WindowStru
notify	include/notify.h	/^	BUILT_IN_COMMAND(notify);$/;"	v
notify_alist	include/notify.h	/^typedef struct notify_alist$/;"	s
notify_format	source/status.c	/^static	char	*notify_format 		= (char *) 0;$/;"	v	file:
notify_list	include/server.h	/^	NotifyList	notify_list;	\/* Notify list for this server *\/$/;"	m	struct:__anon8
notify_mark	source/notify.c	/^void 	notify_mark (int refnum, const char *nick, int flag, int doit)$/;"	f
notify_mask	include/window.h	/^	Mask	notify_mask;		\/* the notify mask.. *\/$/;"	m	struct:WindowStru
notify_mask	source/lastlog.c	/^static	Mask	notify_mask;$/;"	v	file:
notify_name	include/window.h	/^	char *	notify_name;		\/* The name for %{1}F *\/$/;"	m	struct:WindowStru
notify_stru	source/notify.c	/^typedef	struct	notify_stru$/;"	s	file:
notify_systimer	source/notify.c	/^void	notify_systimer (void)$/;"	f
notify_timeref	source/notify.c	/^char 	notify_timeref[] = "NOTTIM";$/;"	v
notify_userhost_dispatch	source/notify.c	/^void 	notify_userhost_dispatch (int refnum, UserhostItem *stuff, const char *nick, const char *text)$/;"	f
notify_userhost_reply	source/notify.c	/^void 	notify_userhost_reply (int refnum, const char *nick, const char *uh)$/;"	f
notify_when_hidden	include/window.h	/^	short	notify_when_hidden;	\/* True to notify for hidden output *\/$/;"	m	struct:WindowStru
now	source/alloca.c	/^    long now;			\/* Current total stack size.  *\/$/;"	m	struct:stk_stat	file:
now	source/irc.c	/^Timeval		now = {0, 0};$/;"	v
nuh	source/flood.c	/^	char		*nuh;$/;"	m	struct:flood_stru	file:
null_encoder	source/ircaux.c	/^static ssize_t	null_encoder (const char *orig, size_t orig_len, const void *meta, size_t meta_len, char *dest, size_t dest_len)$/;"	f	file:
nullitem	source/sdbm.c	/^Datum nullitem = {NULL, 0};$/;"	v
num_code_points	source/ircaux.c	/^int	num_code_points(const char *i)$/;"	f
num_protocol_cmds	source/parse.c	/^int 	num_protocol_cmds = -1;$/;"	v
num_sort_it	source/functions.c	/^static int num_sort_it (const void *val1, const void *val2)$/;"	f	file:
number	include/status.h	/^        short           number;$/;"	m	struct:status_stuff
number_of_bans	source/numbers.c	/^static 	int	number_of_bans = 0;$/;"	v	file:
number_of_logical_chars	include/screen.h	/^	int	number_of_logical_chars;$/;"	m	struct:InputLine
number_of_servers	source/server.c	/^	int	number_of_servers = 0;$/;"	v
number_of_windows_on_screen	source/window.c	/^int 	number_of_windows_on_screen (Window *w)$/;"	f
number_on_channel	source/names.c	/^int	number_on_channel (const char *name, int server)$/;"	f
numbered_command	source/numbers.c	/^void 	numbered_command (const char *from, const char *comm, char const **ArgList)$/;"	f
numcaps	source/term.c	/^static	int	numcaps = sizeof(tcaps) \/ sizeof(cap2info);$/;"	v	file:
numitems	include/ircaux.h	/^	int numitems;$/;"	m	struct:Bucket
oexpr	test.c	/^oexpr(n)$/;"	f	file:
offcmd	include/who.h	/^	char *offcmd;$/;"	m	struct:IsonEntryT
offer	source/dcc.c	/^	SS		offer;			\/* Their offer *\/$/;"	m	struct:DCC_struct	file:
offsetof	include/gailib.h	138;"	d
ok_to_output	source/screen.c	/^static int	ok_to_output (Window *window)$/;"	f	file:
old_co	include/screen.h	/^	int	old_co;$/;"	m	struct:ScreenStru
old_co	include/window.h	/^	short	old_co;			\/* .... *\/$/;"	m	struct:WindowStru
old_display_lines	include/window.h	/^	short	old_display_lines;	\/* How big window was on last resize *\/$/;"	m	struct:WindowStru
old_li	include/screen.h	/^	int	old_li;$/;"	m	struct:ScreenStru
old_match	source/reg.c	/^static int	old_match(const char *pattern, const char *string)$/;"	f	file:
old_server_lastlog_mask	source/lastlog.c	/^	Mask *	old_server_lastlog_mask = NULL;$/;"	v
oldb	source/term.c	/^static	struct	termios	oldb, newb;$/;"	v	typeref:struct:termios	file:
oldb	source/wserv.c	/^static	struct termios	oldb, newb;$/;"	v	typeref:struct:termios	file:
older	source/lastlog.c	/^	struct	lastlog_stru	*older;$/;"	m	struct:lastlog_stru	typeref:struct:lastlog_stru::lastlog_stru	file:
older_lastlog_entry	source/lastlog.c	/^static Lastlog *older_lastlog_entry (Lastlog *item, Window *window)$/;"	f	file:
olderf	test.c	/^olderf (f1, f2)$/;"	f	file:
oldest_lastlog_for_window	source/lastlog.c	/^static Lastlog *oldest_lastlog_for_window (Window *window)$/;"	f	file:
on	source/irc.c	/^		on[] = "ON",$/;"	v
on_stack	source/hook.c	/^static	OnStack	*	on_stack = NULL;$/;"	v	file:
oncmd	include/hook.h	/^	BUILT_IN_COMMAND(oncmd);$/;"	v
oncmd	include/who.h	/^	char *oncmd;$/;"	m	struct:IsonEntryT
one	source/irc.c	/^		one[] = "1",$/;"	v
one_to_another	source/network.c	/^int	one_to_another (int family, const char *what, char *retval, int size)$/;"	f
onoff	source/logfiles.c	/^static const char *onoff[] = { "OFF", "ON" };$/;"	v	file:
onoff	source/window.c	/^static const char *onoff[] = { "OFF", "ON" };$/;"	v	file:
onstacklist	source/hook.c	/^typedef struct  onstacklist$/;"	s	file:
op_num	test.c	/^	short op_num, op_type;$/;"	m	struct:t_op	file:
op_text	test.c	/^	const char *op_text;$/;"	m	struct:t_op	file:
op_type	test.c	/^	short op_num, op_type;$/;"	m	struct:t_op	file:
open_callback	source/dcc.c	/^	int		(*open_callback) (struct DCC_struct *);$/;"	m	struct:DCC_struct	file:
open_compression	source/ircaux.c	/^static struct epic_loadfile *	open_compression (char *executable, char *filename)$/;"	f	file:
open_dbm	source/files.c	/^static int	open_dbm (const char *filename, int rdonly, int type)$/;"	f	file:
open_exec	source/ircaux.c	/^FILE **	open_exec (const char *executable, char * const *args)$/;"	f
open_exec_for_in_out_err	source/files.c	/^int *	open_exec_for_in_out_err (const char *filename, char * const *args)$/;"	f
open_file_for_read	source/files.c	/^int	open_file_for_read (const char *filename)$/;"	f
open_file_for_write	source/files.c	/^int	open_file_for_write (const char *filename, const char *mode)$/;"	f
open_log	source/log.c	/^static FILE *	open_log (const char *logfile, FILE **fp)$/;"	f	file:
opendir	configure	/^opendir()$/;"	f
opento	source/ircaux.c	/^int 	opento(const char *filename, int flags, off_t position)$/;"	f
oper	include/who.h	/^	int   	oper;$/;"	m	struct:UserhostItemT
oper_command	source/irc.c	/^int		oper_command = 0;$/;"	v
oper_password_received	source/commands.c	/^static 	void	oper_password_received (char *data, const char *line)$/;"	f	file:
operand	source/expr2.c	/^	int	operand;$/;"	m	struct:__anon15	file:
operator	include/server.h	/^	int	operator;		\/* true if operator *\/$/;"	m	struct:__anon8
operator	source/expr2.c	/^static __inline TOKEN 	operator (expr_info *c, const char *x, int y, TOKEN z)$/;"	f	file:
ops	test.c	/^} const ops [] = {$/;"	v
options	source/logfiles.c	/^static const logfile_ops options [] = {$/;"	v	file:
options	source/window.c	/^static const window_ops options [] = {$/;"	v	file:
opts	source/debug.c	/^static struct debug_opts opts[] = $/;"	v	typeref:struct:debug_opts	file:
orig_expr	source/expr2.c	/^	char 	*orig_expr;$/;"	m	struct:__anon15	file:
original_server_string	include/window.h	/^	char *	original_server_string;$/;"	m	struct:WindowStru
othername	source/dcc.c	/^	char *		othername;$/;"	m	struct:DCC_struct	file:
outbound_handle	source/recode.c	/^	iconv_t outbound_handle;$/;"	m	struct:RecodeRule	file:
outbound_line_mangler	source/irc.c	/^		outbound_line_mangler = 0;$/;"	v
outbound_recode	source/recode.c	/^const char *	outbound_recode (const char *to, int server, const char *message, char **extra)$/;"	f
outcap	include/termx.h	604;"	d
output_context	source/window.c	/^struct output_context {$/;"	s	file:
output_expires_after	source/lastlog.c	/^	double	output_expires_after = 0.0;$/;"	v
output_reject_ctcp	source/dcc.c	/^static	void 	output_reject_ctcp (int refnum, char *original, char *received)$/;"	f	file:
output_screen	source/screen.c	/^	Screen	*output_screen;$/;"	v
output_with_count	source/screen.c	/^int 	output_with_count (const unsigned char *str1, int clreol, int output)$/;"	f
ov_strcpy	source/ircaux.c	/^char *	ov_strcpy (char *str1, const char *str2)$/;"	f
overflows	source/alloca.c	/^    long overflows;		\/* Number of stack overflow ($STKOFEN) calls.  *\/$/;"	m	struct:stk_stat	file:
owner	source/keys.c	/^    struct Key *owner;  	\/* the key which contains the map we're in. *\/$/;"	m	struct:Key	typeref:struct:Key::Key	file:
p_channel	source/parse.c	/^static void	p_channel (const char *from, const char *comm, const char **ArgList)$/;"	f	file:
p_error	source/parse.c	/^static void	p_error (const char *from, const char *comm, const char **ArgList)$/;"	f	file:
p_invite	source/parse.c	/^static void 	p_invite (const char *from, const char *comm, const char **ArgList)$/;"	f	file:
p_kick	source/parse.c	/^static void	p_kick (const char *from, const char *comm, const char **ArgList)$/;"	f	file:
p_kill	source/parse.c	/^static void	p_kill (const char *from, const char *comm, const char **ArgList)$/;"	f	file:
p_killmsg	source/parse.c	/^static int 	p_killmsg (const char *from, const char *to, const char *cline)$/;"	f	file:
p_mode	source/parse.c	/^static void	p_mode (const char *from, const char *comm, const char **ArgList)$/;"	f	file:
p_nick	source/parse.c	/^static void	p_nick (const char *from, const char *comm, const char **ArgList)$/;"	f	file:
p_notice	source/parse.c	/^static void 	p_notice (const char *from, const char *comm, const char **ArgList)$/;"	f	file:
p_part	source/parse.c	/^static void	p_part (const char *from, const char *comm, const char **ArgList)$/;"	f	file:
p_ping	source/parse.c	/^static void	p_ping (const char *from, const char *comm, const char **ArgList)$/;"	f	file:
p_pong	source/parse.c	/^static void	p_pong (const char *from, const char *comm, const char **ArgList)$/;"	f	file:
p_privmsg	source/parse.c	/^static void	p_privmsg (const char *from, const char *comm, const char **ArgList)$/;"	f	file:
p_quit	source/parse.c	/^static void	p_quit (const char *from, const char *comm, const char **ArgList)$/;"	f	file:
p_rpong	source/parse.c	/^static void	p_rpong (const char *from, const char *comm, const char **ArgList)$/;"	f	file:
p_silence	source/parse.c	/^static void	p_silence (const char *from, const char *comm, const char **ArgList)$/;"	f	file:
p_snotice	source/parse.c	/^static 	void 	p_snotice (const char *from, const char *to, const char *line)$/;"	f	file:
p_stderr	source/exec.c	/^	int	p_stderr;		\/* stderr descriptor for process *\/$/;"	m	struct:__anon14	file:
p_stdin	source/exec.c	/^	int	p_stdin;		\/* stdin description for process *\/$/;"	m	struct:__anon14	file:
p_stdout	source/exec.c	/^	int	p_stdout;		\/* stdout descriptor for process *\/$/;"	m	struct:__anon14	file:
p_topic	source/parse.c	/^static void	p_topic (const char *from, const char *comm, const char **ArgList)$/;"	f	file:
p_wallops	source/parse.c	/^static void	p_wallops (const char *from, const char *comm, const char **ArgList)$/;"	f	file:
package	source/commands.c	/^	char	*package;$/;"	m	struct:load_info	file:
package_set_here	source/commands.c	/^	int	package_set_here;$/;"	m	struct:load_info	file:
packet_size	source/dcc.c	/^	int		packet_size;$/;"	m	struct:DCC_struct	file:
pad_size	source/alloca.c	/^    long pad_size;		\/* Stack pad size.  *\/$/;"	m	struct:stk_stat	file:
padding	include/irc_std.h	/^	unsigned char padding[128 - 2];$/;"	m	struct:sockaddr_storage
pagbno	source/sdbm.c	/^	long pagbno;		       \/* current page in pagbuf *\/$/;"	m	struct:SDBM	file:
pagbuf	source/sdbm.c	/^	char pagbuf[PBLKSIZ];	       \/* page file block buffer *\/$/;"	m	struct:SDBM	file:
pagf	source/sdbm.c	/^	int pagf;		       \/* page file descriptor *\/$/;"	m	struct:SDBM	file:
panic	source/ircaux.c	/^void	panic (int quitmsg, const char *format, ...)$/;"	f
panic_dump_call_stack	source/alias.c	/^void 	panic_dump_call_stack 	(void)$/;"	f
params	source/hook.c	/^	int	params;			\/* Number of parameters expected *\/$/;"	m	struct:Hookables	file:
parent	source/alias.c	/^	int	parent;		\/* Our parent stack frame *\/$/;"	m	struct:RuntimeStackStru	file:
parse_arglist	source/alias.c	/^ArgList	*parse_arglist (char *arglist)$/;"	f
parse_args	source/irc.c	/^static	void	parse_args (int argc, char **argv)$/;"	f	file:
parse_block	source/commands.c	/^static void	parse_block (const char *org_line, const char *args, int interactive)$/;"	f	file:
parse_inline	source/expr.c	/^char	*parse_inline (char *str, const char *args)$/;"	f
parse_line_alias_special	source/commands.c	/^static char *	parse_line_alias_special (const char *name, const char *what, const char *orig_subargs, void *arglist, int function)$/;"	f	file:
parse_mangle	source/vars.c	/^int	parse_mangle (const char *value, int nvalue, char **rv)$/;"	f
parse_number	source/ircaux.c	/^int	parse_number (char **str)$/;"	f
parse_server	source/parse.c	/^void 	parse_server (const char *orig_line, size_t orig_line_size)$/;"	f
parse_statement	source/commands.c	/^int	parse_statement (const char *stmt, int interactive, const char *subargs)$/;"	f
parse_text	include/input.h	/^	BUILT_IN_KEYBINDING(parse_text);$/;"	v
parsekeycmd	include/keys.h	/^BUILT_IN_COMMAND(parsekeycmd);$/;"	v
parsing_server_index	source/server.c	/^	int	parsing_server_index = NOSERV;$/;"	v
partial_code_point	source/wcwidth.c	/^int     partial_code_point (const unsigned char *i)$/;"	f
password	include/server.h	/^        const char *  password;$/;"	m	struct:ServerInfo
password_sendline	source/server.c	/^void 	password_sendline (char *data, const char *line)$/;"	f
path_search	source/ircaux.c	/^int	path_search (const char *name, const char *xpath, Filename result)$/;"	f
pattern2regex	source/reg.c	/^char *	pattern2regex (const char *pattern, int *weight)$/;"	f
pattern_regcomp	source/reg.c	/^int	pattern_regcomp (regex_t *preg, const char *pattern, int cflags)$/;"	f
peer_sockaddr	source/dcc.c	/^	SS		peer_sockaddr;		\/* Their saddr *\/$/;"	m	struct:DCC_struct	file:
perlcall	source/perl.c	/^char *	perlcall (char* sub, char* in, char* out, long item, char* input) $/;"	f
perlcalldepth	source/perl.c	/^int	isperlrunning=0, perlcalldepth=0;$/;"	v
perlcmd	include/extlang.h	/^BUILT_IN_COMMAND(perlcmd);$/;"	v
perleval	source/perl.c	/^char* perleval (char* input) {$/;"	f
perlstartstop	source/perl.c	/^void	perlstartstop (int startnotstop) $/;"	f
permit_status_update	source/status.c	/^int     permit_status_update (int flag)$/;"	f
pfd	source/newio.c	/^PS *			pfd = NULL;$/;"	v
pid	source/exec.c	/^	pid_t	pid;			\/* process-id of process *\/$/;"	m	struct:__anon14	file:
piggyback	include/who.h	/^	int  piggyback;$/;"	m	struct:WhoEntryT
plural	source/ircaux.c	/^const char *	plural (int number)$/;"	f
pointer	source/alloca.c	/^typedef void *pointer;$/;"	t	file:
poll_maildir_status	source/mail.c	/^static int	poll_maildir_status (void *ptr)$/;"	f	file:
poll_mbox_status	source/mail.c	/^static int	poll_mbox_status (void *ptr)$/;"	f	file:
polls	source/newio.c	/^struct pollfd *	polls = NULL;$/;"	v	typeref:struct:pollfd
pop_2_booleans	source/expr2.c	/^__inline static void	pop_2_booleans (expr_info *c, BooL *a, BooL *b)$/;"	f	file:
pop_2_floats	source/expr2.c	/^__inline static	void	pop_2_floats (expr_info *c, double *a, double *b)$/;"	f	file:
pop_2_integers	source/expr2.c	/^__inline static	void	pop_2_integers (expr_info *c, intmax_t *a, intmax_t *b)$/;"	f	file:
pop_2_strings	source/expr2.c	/^__inline static void	pop_2_strings (expr_info *c, const char **s, const char **t)$/;"	f	file:
pop_2_tokens	source/expr2.c	/^__inline static void	pop_2_tokens (expr_info *c, TOKEN *t1, TOKEN *t2)$/;"	f	file:
pop_3_tokens	source/expr2.c	/^__inline static	void	pop_3_tokens (expr_info *c, BooL *a, TOKEN *v, TOKEN *w)$/;"	f	file:
pop_boolean	source/expr2.c	/^__inline static	BooL		pop_boolean (expr_info *c)$/;"	f	file:
pop_expanded	source/expr2.c	/^__inline static	const char *	pop_expanded (expr_info *c)$/;"	f	file:
pop_float	source/expr2.c	/^__inline static	double		pop_float (expr_info *c)$/;"	f	file:
pop_integer	source/expr2.c	/^__inline static	double		pop_integer (expr_info *c)$/;"	f	file:
pop_message_from	source/window.c	/^void	pop_message_from (int context)$/;"	f
pop_token	source/expr2.c	/^__inline static	TOKEN	pop_token (expr_info *c)$/;"	f	file:
popnum	source/compat.c	/^static int popnum(int *num)$/;"	f	file:
popstring	source/compat.c	/^static int popstring(char **str)$/;"	f	file:
port	include/server.h	/^        int     port;$/;"	m	struct:ServerInfo
port_fd	source/newio.c	/^static int	port_fd = -1;$/;"	v	file:
pos	source/compat.c	/^static int pos = 0;$/;"	v	file:
posfunc	source/ircaux.c	/^static int      posfunc (const char *base, char c)$/;"	f	file:
pow	configure	/^pow()$/;"	f
prec	source/expr2.c	/^static	int	prec[TOKCOUNT] = $/;"	v	file:
prefix	Makefile	/^prefix      = \/usr\/local$/;"	m
prepare_alias_call	source/alias.c	/^void	prepare_alias_call (void *al, char **stuff)$/;"	f
prepare_display	source/screen.c	/^unsigned char **prepare_display (int winref,$/;"	f
prepare_display2	source/screen.c	/^unsigned char *prepare_display2 (const unsigned char *orig_str, int max_cols, int allow_truncate, char fillchar, int denormalize)$/;"	f
preserve_serverinfo	source/server.c	/^static	int	preserve_serverinfo (ServerInfo *si)$/;"	f	file:
prev	include/screen.h	/^struct	ScreenStru *prev;		\/* Next screen in list *\/$/;"	m	struct:ScreenStru	typeref:struct:ScreenStru::ScreenStru
prev	include/window.h	/^	struct	DisplayStru	*prev;$/;"	m	struct:DisplayStru	typeref:struct:DisplayStru::DisplayStru
prev	include/window.h	/^struct	WindowStru	*prev;		\/* Window above us on screen *\/$/;"	m	struct:WindowStru	typeref:struct:WindowStru::WindowStru
prev	source/names.c	/^struct	channel_stru *	prev;		\/* pointer to previous channel *\/$/;"	m	struct:channel_stru	typeref:struct:channel_stru::channel_stru	file:
prev	source/timer.c	/^	struct	timerlist_stru *prev;$/;"	m	struct:timerlist_stru	typeref:struct:timerlist_stru::timerlist_stru	file:
previous_code_point	source/wcwidth.c	/^int     previous_code_point (const unsigned char *st, const unsigned char **i)$/;"	f
previous_window	include/window.h	/^	BUILT_IN_KEYBINDING(previous_window);$/;"	v
primary	test.c	/^primary(n)$/;"	f	file:
primary_server	source/server.c	/^	int	primary_server = NOSERV;$/;"	v
print_arglist	source/alias.c	/^char *	print_arglist (ArgList *args)$/;"	f
priority	include/window.h	/^	unsigned priority;		\/* "Current window Priority" *\/$/;"	m	struct:WindowStru
privileged_output	source/irc.c	/^int		privileged_output = 0;$/;"	v
privileged_yell	source/output.c	/^void	privileged_yell (const char *format, ...)$/;"	f
prntdump	source/ircaux.c	/^char *	prntdump(const char *ptr, size_t size)$/;"	f
process_dcc_chat	source/dcc.c	/^static	void	process_dcc_chat (DCC_list *Client)$/;"	f	file:
process_dcc_chat_connected	source/dcc.c	/^static void	process_dcc_chat_connected (DCC_list *dcc)$/;"	f	file:
process_dcc_chat_connection	source/dcc.c	/^static	void	process_dcc_chat_connection (DCC_list *Client)$/;"	f	file:
process_dcc_chat_ctcps	source/dcc.c	/^static	char *	process_dcc_chat_ctcps (DCC_list *Client, char *tmp)$/;"	f	file:
process_dcc_chat_data	source/dcc.c	/^static	void	process_dcc_chat_data (DCC_list *Client)$/;"	f	file:
process_dcc_chat_error	source/dcc.c	/^static	void	process_dcc_chat_error (DCC_list *Client)$/;"	f	file:
process_dcc_get_connected	source/dcc.c	/^static void	process_dcc_get_connected (DCC_list *dcc)$/;"	f	file:
process_dcc_get_data	source/dcc.c	/^static	void		process_dcc_get_data (DCC_list *dcc)$/;"	f	file:
process_dcc_raw_connected	source/dcc.c	/^static void	process_dcc_raw_connected (DCC_list *dcc)$/;"	f	file:
process_dcc_raw_data	source/dcc.c	/^static	void		process_dcc_raw_data (DCC_list *Client)$/;"	f	file:
process_dcc_send	source/dcc.c	/^static	void	process_dcc_send (DCC_list *dcc)$/;"	f	file:
process_dcc_send_connection	source/dcc.c	/^static void	process_dcc_send_connection (DCC_list *dcc)$/;"	f	file:
process_dcc_send_data	source/dcc.c	/^static void	process_dcc_send_data (DCC_list *dcc)$/;"	f	file:
process_dcc_send_handle_ack	source/dcc.c	/^static void	process_dcc_send_handle_ack (DCC_list *dcc)$/;"	f	file:
process_incoming_file	source/dcc.c	/^static	void		process_incoming_file (DCC_list *dcc)$/;"	f	file:
process_incoming_listen	source/dcc.c	/^static	void		process_incoming_listen (DCC_list *Client)$/;"	f	file:
process_incoming_raw	source/dcc.c	/^static	void		process_incoming_raw (DCC_list *Client)$/;"	f	file:
process_is_running	source/exec.c	/^int		process_is_running (char *arg)$/;"	f
process_is_running	source/exec.c	/^int	process_is_running (char *x)			{ return 0; }$/;"	f
process_list	source/exec.c	/^static	Process **process_list = NULL;$/;"	v	file:
process_list_size	source/exec.c	/^static	int	process_list_size = 0;$/;"	v	file:
prog	include/sedcrypt.h	/^	char *	prog;$/;"	m	struct:CryptStru
prompt	include/window.h	/^	char *	prompt;			\/* Current EXEC prompt for window *\/$/;"	m	struct:WindowStru
promptlist	include/screen.h	/^	WaitPrompt	*promptlist;$/;"	m	struct:ScreenStru
proto_type	include/server.h	/^        const char *  proto_type;$/;"	m	struct:ServerInfo
protocol_command	include/parse.h	/^} protocol_command;$/;"	t	typeref:struct:__anon5
pthread	source/newio.c	/^	pthread_t	pthread;$/;"	m	struct:pthread_stuff	file:
pthread_io_event	source/newio.c	/^static	void *	pthread_io_event (void *vvfd)$/;"	f	file:
pthread_stuff	source/newio.c	/^struct pthread_stuff {$/;"	s	file:
ptr	source/expr2.c	/^	char	*ptr;$/;"	m	struct:__anon15	file:
ptr	source/term.c	/^	void *		ptr;$/;"	m	struct:cap2info	file:
public_nick	include/server.h	/^        char *          public_nick;$/;"	m	struct:__anon8
push_boolean	source/expr2.c	/^__inline static TOKEN	push_boolean (expr_info *c, BooL val)$/;"	f	file:
push_float	source/expr2.c	/^__inline static	TOKEN	push_float (expr_info *c, double val)$/;"	f	file:
push_integer	source/expr2.c	/^__inline static	TOKEN	push_integer (expr_info *c, intmax_t val)$/;"	f	file:
push_lval	source/expr2.c	/^__inline static TOKEN	push_lval (expr_info *c, const char *val)$/;"	f	file:
push_string	source/expr2.c	/^__inline static	TOKEN	push_string (expr_info *c, char *val)$/;"	f	file:
push_token	source/expr2.c	/^__inline static	TOKEN	push_token (expr_info *c, TOKEN t)$/;"	f	file:
pusharg	source/compat.c	/^static int pusharg(int arg)$/;"	f	file:
pushnum	source/compat.c	/^static int pushnum(int num)$/;"	f	file:
put_echo	source/output.c	/^void	put_echo (const unsigned char *str)$/;"	f
put_it	source/output.c	/^void	put_it (const char *format, ...)$/;"	f
putbuf	source/output.c	/^static	char	putbuf[OBNOXIOUS_BUFFER_SIZE + 1];$/;"	v	file:
putchar_x	include/termx.h	/^__inline__ static int putchar_x (int c) { $/;"	f
qsort_array	source/array.c	/^an_array *qsort_array;$/;"	v
query_counter	include/window.h	/^	int	query_counter;		\/* Is there a query anyways? *\/$/;"	m	struct:WindowStru
query_format	source/status.c	/^static	char	*query_format 		= (char *) 0;$/;"	v	file:
query_nick	source/window.c	/^const char	*query_nick (void)$/;"	f
queue_exists	source/queue.c	/^static int	queue_exists (Queue **list, const char *name)$/;"	f	file:
queue_list	source/queue.c	/^static  Queue   *queue_list = NULL;$/;"	v	file:
queue_size	source/queue.c	/^static int	queue_size (Queue *q)$/;"	f	file:
queuecmd	include/queue.h	/^	BUILT_IN_COMMAND(queuecmd);$/;"	v
quick_code_point_count	source/wcwidth.c	/^int	quick_code_point_count (const unsigned char *str)$/;"	f
quick_code_point_index	source/wcwidth.c	/^int	quick_code_point_index (const unsigned char *str, const unsigned char *loc)$/;"	f
quick_display_column_count	source/wcwidth.c	/^int	quick_display_column_count (const unsigned char *str)$/;"	f
quick_startup	source/irc.c	/^int		quick_startup = 0;$/;"	v
quiet	source/newio.c	/^	int	quiet;$/;"	m	struct:myio_struct	file:
quit_message	include/server.h	/^	char	*quit_message;		\/* Where we stash a quit message *\/$/;"	m	struct:__anon8
quit_response	source/irc.c	/^static void	quit_response (char *dummy, const char *ptr)$/;"	f	file:
quote_char	include/input.h	/^	BUILT_IN_KEYBINDING(quote_char);$/;"	v
quote_hit	include/screen.h	/^	int	quote_hit;		\/* True after QUOTE_CHARACTER hit *\/$/;"	m	struct:ScreenStru
randa	source/ircaux.c	/^static unsigned long	randa (unsigned long l)$/;"	f	file:
randd	source/ircaux.c	/^static unsigned long randd (unsigned long l)$/;"	f	file:
randm	source/ircaux.c	/^static	unsigned long	randm (unsigned long l)$/;"	f	file:
random_number	source/ircaux.c	/^unsigned long	random_number (unsigned long l)$/;"	f
randt	source/ircaux.c	/^static	unsigned long randt (unsigned long l)$/;"	f	file:
randt_2	source/ircaux.c	/^static unsigned long randt_2 (void)$/;"	f	file:
raw	include/status.h	/^        char *		raw;$/;"	m	struct:status_line
raw_value	source/expr2.c	/^	char *	raw_value;		\/* Cached unexpected string *\/$/;"	m	struct:TOKEN_type	file:
rbindcmd	include/keys.h	/^BUILT_IN_COMMAND(rbindcmd);$/;"	v
rcpindex	source/ircaux.c	/^const unsigned char *	rcpindex (const unsigned char *where, const unsigned char *string, const unsigned char *search, int howmany, size_t *cpoffset)$/;"	f
rcsid	test.c	/^static char rcsid[] = "$NetBSD: test.c,v 1.15 1995\/03\/21 07:04:06 cgd Exp $";$/;"	v	file:
read	acconfig.h	182;"	d
read_attributes	source/screen.c	/^static int	read_attributes (const unsigned char *input, Attribute *a)$/;"	f	file:
read_color256_seq	source/screen.c	/^static ssize_t	read_color256_seq (const unsigned char *start, void *d)$/;"	f	file:
read_color_seq	source/screen.c	/^static ssize_t	read_color_seq (const unsigned char *start, void *d, int blinkbold)$/;"	f	file:
read_default_server_file	source/server.c	/^int 	read_default_server_file (void)$/;"	f
read_esc_seq	source/screen.c	/^static ssize_t	read_esc_seq (const unsigned char *start, void *ptr_a, int *nd_spaces)$/;"	f	file:
read_from_dbm	source/files.c	/^static char *	read_from_dbm (int refnum, char *key)$/;"	f	file:
read_pos	source/newio.c	/^		read_pos,$/;"	m	struct:myio_struct	file:
read_server_file	source/server.c	/^static int 	read_server_file (const char *file_path)$/;"	f	file:
readables	source/newio.c	/^fd_set	readables, writables;$/;"	v
real_extract	source/words.c	/^char *	real_extract (char *start, int firstword, int lastword, int extended)$/;"	f
real_extract2	source/words.c	/^char *	real_extract2 (const char *start, int firstword, int lastword, int extended)$/;"	f
real_lastlog_mask	source/lastlog.c	/^Mask	real_lastlog_mask (void)$/;"	f
real_message_from	source/window.c	/^int	real_message_from (const char *who, int level, const char *file, int line)$/;"	f
real_message_setall	source/window.c	/^int	real_message_setall (unsigned refnum, const char *who, int level, const char *file, int line)$/;"	f
real_move_to_abs_word	source/words.c	/^const char *	real_move_to_abs_word (const char *start, const char **mark, int word, int extended, const char *quotes)$/;"	f
real_notify_mask	source/lastlog.c	/^Mask	real_notify_mask (void)$/;"	f
really_new_free	source/ircaux.c	/^void *	really_new_free (void **ptr, const char *fn, int line)$/;"	f
really_new_malloc	source/ircaux.c	/^void *	really_new_malloc (size_t size, const char *fn, int line)$/;"	f
really_new_realloc	source/ircaux.c	/^void *	really_new_realloc (void **ptr, size_t size, const char *fn, int line)$/;"	f
realname	include/server.h	/^	char *	realname;		\/* The actual realname. *\/$/;"	m	struct:__anon8
realpath	configure	/^realpath();$/;"	f
realpath	include/irc_std.h	204;"	d
realpath	source/compat.c	1307;"	d	file:
reason	source/ignore.c	/^	char	*reason;$/;"	m	struct:IgnoreStru	file:
reassign_window_channels	source/names.c	/^void	reassign_window_channels (int window)$/;"	f
rebalance_windows	source/window.c	/^void	rebalance_windows (Screen *screen)$/;"	f
rebuild_all_ison	source/notify.c	/^static	void	rebuild_all_ison (void)$/;"	f	file:
rebuild_notify_ison	source/notify.c	/^static void	rebuild_notify_ison (int refnum)$/;"	f	file:
rebuild_scrollback	include/window.h	/^	short	rebuild_scrollback;	\/* True if scrollback needs rebuild *\/$/;"	m	struct:WindowStru
rebuild_scrollback	source/window.c	/^static	void	rebuild_scrollback (Window *w)$/;"	f	file:
recalculate_window_cursor_and_display_ip	source/window.c	/^void 	recalculate_window_cursor_and_display_ip (Window *window)$/;"	f
recalculate_window_positions	source/window.c	/^void	recalculate_window_positions (Screen *screen)$/;"	f
recalculate_windows	source/window.c	/^void 	recalculate_windows (Screen *screen)$/;"	f
recheck_queries	source/window.c	/^static void	recheck_queries (Window *win)$/;"	f	file:
recode_rules	source/recode.c	/^RecodeRule **	recode_rules = NULL;$/;"	v
recode_with_iconv	source/ircaux.c	/^int	recode_with_iconv (const char *from, const char *to, char **data, size_t *numbytes)$/;"	f
recode_with_iconv_t	source/ircaux.c	/^int	recode_with_iconv_t (iconv_t iref, char **data, size_t *numbytes)$/;"	f
recommended_overhead	source/ircaux.c	/^	int	recommended_overhead;$/;"	m	struct:Transformer	file:
recommended_size	source/ircaux.c	/^	int	recommended_size;$/;"	m	struct:Transformer	file:
reconnectcmd	include/server.h	/^	BUILT_IN_COMMAND(reconnectcmd);$/;"	v
reconstitute_scrollback	source/lastlog.c	/^void	reconstitute_scrollback (Window *window)$/;"	f
recount_window_lastlog	source/lastlog.c	/^int	recount_window_lastlog (Window *window)$/;"	f
recv	acconfig.h	183;"	d
recv_nick	include/server.h	/^        char *          recv_nick;$/;"	m	struct:__anon8
recvfrom	acconfig.h	184;"	d
recycle	source/window.c	/^static Display *recycle = NULL;$/;"	v	file:
redirect	include/server.h	/^	char	*redirect;		\/* Who we're redirecting to here *\/$/;"	m	struct:__anon8
redirect	source/exec.c	/^	char	*redirect;		\/* redirection command (MSG, NOTICE) *\/$/;"	m	struct:__anon14	file:
redirect_text	source/commands.c	/^int	redirect_text (int to_server, const char *nick_list, const char *text, char *command, int hook)$/;"	f
redraw_all_screens	source/output.c	/^void	redraw_all_screens (void)$/;"	f
redraw_all_windows	source/window.c	/^void 	redraw_all_windows (void)$/;"	f
redraw_status	source/status.c	/^int	redraw_status (Window *window, Status *status)$/;"	f
reduce	source/expr2.c	/^static void	reduce (expr_info *cx, int what)$/;"	f	file:
ref	source/timer.c	/^	char	*ref;$/;"	m	struct:timerlist_stru	file:
refnum	include/server.h	/^        int     refnum;$/;"	m	struct:ServerInfo
refnum	include/who.h	/^	int  refnum;$/;"	m	struct:WhoEntryT
refnum	include/window.h	/^	unsigned int	refnum;$/;"	m	struct:window_stack_stru
refnum	include/window.h	/^	unsigned refnum;		\/* Unique refnum for window *\/$/;"	m	struct:WindowStru
refnum	source/dcc.c	/^	long		refnum;$/;"	m	struct:DCC_struct	file:
refnum	source/exec.c	/^	unsigned refnum;		\/* a window for output to go to *\/$/;"	m	struct:__anon14	file:
refnum	source/files.c	/^	int	refnum;$/;"	m	struct:DBM___	file:
refnum	source/ignore.c	/^	int	refnum;			\/* The refnum for internal use *\/$/;"	m	struct:IgnoreStru	file:
refnum	source/ircaux.c	/^	int	refnum;$/;"	m	struct:Transformer	file:
refnum	source/lastlog.c	/^	intmax_t refnum;$/;"	m	struct:lastlog_stru	file:
refnum	source/logfiles.c	/^	int	refnum;$/;"	m	struct:Logfile	file:
refnums	source/logfiles.c	/^	int	refnums[MAX_TARGETS];$/;"	m	struct:Logfile	file:
refresh	include/screen.h	/^	int	refresh;$/;"	m	struct:InputLine
refresh_inputline	include/input.h	/^	BUILT_IN_KEYBINDING(refresh_inputline);$/;"	v
refresh_screen	include/output.h	/^	BUILT_IN_KEYBINDING(refresh_screen);$/;"	v
register_dcc_offer	source/dcc.c	/^void	register_dcc_offer (const char *user, char *type, char *description, char *address, char *port, char *size, char *extra, char *rest)$/;"	f
register_server	source/server.c	/^void	register_server (int refnum, const char *nick)$/;"	f
register_transform	source/ircaux.c	/^static int	register_transform (const char *name, int takes_meta, int expansion_size, int expansion_overhead, ssize_t (*encoder)(const char *, size_t, const void *, size_t, char *, size_t), ssize_t (*decoder)(const char *, size_t, const void *, size_t, char *, size_t))$/;"	f	file:
reinstate_user_modes	source/server.c	/^void	reinstate_user_modes (void)$/;"	f
remote_sockname	include/server.h	/^	SS	remote_sockname; 	\/* sockname of this connection *\/$/;"	m	struct:__anon8
remove_all_timers	source/timer.c	/^static void 	remove_all_timers (void)$/;"	f	file:
remove_binding	source/keys.c	/^static void	remove_binding (char *name) $/;"	f	file:
remove_bindings	source/keys.c	/^void	remove_bindings (void) $/;"	f
remove_bindings_recurse	source/keys.c	/^static void	remove_bindings_recurse (Key **mapptr) $/;"	f	file:
remove_bound_keys	source/keys.c	/^static void	remove_bound_keys (Key *map, Binding *binding) $/;"	f	file:
remove_brackets	source/ircaux.c	/^char *	remove_brackets (const char *name, const char *args)$/;"	f
remove_channel	source/names.c	/^void 	remove_channel (const char *channel, int server)$/;"	f
remove_dbm	source/files.c	/^static void	remove_dbm (Dbm *db)$/;"	f	file:
remove_file	source/files.c	/^static void	remove_file (File *file)$/;"	f	file:
remove_from_array	source/alist.c	/^array_item *remove_from_array (array *a, const char *name)$/;"	f
remove_from_channel	source/names.c	/^void 	remove_from_channel (const char *channel, const char *nick, int server)$/;"	f
remove_from_comma_list	source/ircaux.c	/^int	remove_from_comma_list (char *str, const char *what)$/;"	f
remove_from_invisible_list	source/window.c	/^static void 	remove_from_invisible_list (Window *window)$/;"	f	file:
remove_from_list	source/hook.c	/^static Hook *remove_from_list (Hook **list, char *item, int sernum)$/;"	f	file:
remove_from_list	source/list.c	/^List	*remove_from_list (List **list, const char *name)$/;"	f
remove_from_server_list	source/server.c	/^static 	void 	remove_from_server_list (int i)$/;"	f	file:
remove_hook	source/hook.c	/^static void remove_hook (int which, char *nick, int sernum, int quiet)$/;"	f	file:
remove_ignore	source/ignore.c	/^static int 	remove_ignore (const char *nick)$/;"	f	file:
remove_item_from_list	source/list.c	/^List *	remove_item_from_list (List **list, List *item)$/;"	f
remove_lastlog_item	source/lastlog.c	/^static void	remove_lastlog_item (Lastlog *item)$/;"	f	file:
remove_mode_from_str	source/ircaux.c	/^void	remove_mode_from_str (char *modes, size_t len, int mode)$/;"	f
remove_scrollback_indicator	source/window.c	/^static void	remove_scrollback_indicator (Window *w)$/;"	f	file:
remove_timer	source/timer.c	/^int	remove_timer (const char *ref)$/;"	f
remove_timers_by_domref	source/timer.c	/^static	void	remove_timers_by_domref (int domain, int domref)$/;"	f	file:
remove_trailing_spaces	source/ircaux.c	/^char *	remove_trailing_spaces (char *foo, size_t *cluep)$/;"	f
remove_user_mode	source/server.c	/^static void	remove_user_mode (int refnum, int mode)$/;"	f	file:
remove_window_from_screen	source/window.c	/^static void 	remove_window_from_screen (Window *window, int hide, int recalc)$/;"	f	file:
rename_nick	source/names.c	/^void 	rename_nick (const char *old_nick, const char *new_nick, int server)$/;"	f
renormalize_window_levels	source/window.c	/^int	renormalize_window_levels (unsigned refnum, Mask mask)$/;"	f
repaint_window_body	source/screen.c	/^void 	repaint_window_body (Window *window)$/;"	f
repeatcmd	include/ifcmd.h	/^	BUILT_IN_COMMAND(repeatcmd);$/;"	v
repl	source/ctcp.c	/^	CTCP_Handler 	repl;	\/* Function that is called for reply *\/$/;"	m	struct:_CtcpEntry	file:
request_time	include/who.h	/^	Timeval	request_time;$/;"	m	struct:WhoEntryT
reset_broken_clock	source/clock.c	/^static void	reset_broken_clock (void)$/;"	f	file:
reset_clock	source/clock.c	/^void	reset_clock (void *stuff)$/;"	f
reset_metric_clock	source/clock.c	/^static void	reset_metric_clock (void)$/;"	f	file:
reset_nickname	source/server.c	/^static void 	reset_nickname (int refnum)$/;"	f	file:
reset_one_signal	source/ircsig.c	/^static sigfunc *reset_one_signal (int sig_no, sigfunc *sig_handler)$/;"	f	file:
reset_server_altnames	source/server.c	/^static void	reset_server_altnames (int refnum, char *new_altnames)$/;"	f	file:
reset_standard_clock	source/clock.c	/^static void	reset_standard_clock (void)$/;"	f	file:
reset_system_timers	source/clock.c	/^void	reset_system_timers (void)$/;"	f
resize_window	source/window.c	/^static 	void 	resize_window (int how, Window *window, int offset)$/;"	f	file:
resize_window_display	source/window.c	/^void	resize_window_display (Window *window)$/;"	f
restore_window_positions	source/window.c	/^static void	restore_window_positions (Window *w, intmax_t scrolling, intmax_t holding, intmax_t scrollback)$/;"	f	file:
result	include/status.h	/^        char *		result;$/;"	m	struct:status_line
resume_size	source/dcc.c	/^	intmax_t	resume_size;		\/* IM *\/$/;"	m	struct:DCC_struct	file:
retcode	source/exec.c	/^	int	retcode;		\/* return code of process *\/$/;"	m	struct:__anon14	file:
retokenize_input	source/input.c	/^int	retokenize_input (int start)$/;"	f
return_exception	source/commands.c	/^	int	return_exception = 0;$/;"	v
retval	source/hook.c	/^	int retval;$/;"	m	struct:Current_hook	file:
revamp_window_masks	source/window.c	/^static void 	revamp_window_masks (Window *window)$/;"	f	file:
reverse	include/ircaux.h	/^	iconv_t reverse; \/* Alright! *\/$/;"	m	struct:Iconv_stuff
reverse	source/screen.c	/^	unsigned char	reverse;$/;"	m	struct:attributes	file:
rewrite	source/logfiles.c	/^	char *	rewrite;$/;"	m	struct:Logfile	file:
rfc1459	source/parse.c	/^protocol_command rfc1459[] = {$/;"	v
rfc1459_any_to_utf8	source/parse.c	/^void	rfc1459_any_to_utf8 (char *buffer, size_t buffsiz, char **extra)$/;"	f
rfc1459_odd	source/parse.c	/^void	rfc1459_odd (const char *from, const char *comm, const char **ArgList)$/;"	f
rfc1459_stricmp	source/ircaux.c	/^int	rfc1459_stricmp (const unsigned char *str1, const unsigned char *str2)$/;"	f
rfc1459_stricmp_table	source/ircaux.c	/^unsigned char rfc1459_stricmp_table [] = $/;"	v
rfc1459_strnicmp	source/ircaux.c	/^int	rfc1459_strnicmp (const unsigned char *str1, const unsigned char *str2, size_t n)$/;"	f
ridiculous_version_name	source/irc.c	/^const char ridiculous_version_name[] = "Desquamation";$/;"	v
rite	source/screen.c	/^static int 	rite (Window *window, const unsigned char *str)$/;"	f	file:
rresvport	acconfig.h	185;"	d
rs	source/compat.c	/^static ARC4	rs;$/;"	v	file:
rs_initialized	source/compat.c	/^static int	rs_initialized = 0;$/;"	v	file:
rstristr	source/ircaux.c	/^ssize_t	rstristr (const char *start, const char *srch)$/;"	f
ruby_init	configure	/^	ruby_init();$/;"	f
ruby_init_loadpath	configure	/^	ruby_init_loadpath();$/;"	f
ruby_startstop	source/ruby.c	/^void ruby_startstop (int value)$/;"	f
rubyclass	source/ruby.c	/^VALUE	rubyclass;$/;"	v
rubycmd	include/extlang.h	/^BUILT_IN_COMMAND(rubycmd);$/;"	v
rubyeval	source/ruby.c	/^char *	rubyeval (char *input)$/;"	f
run_one_queue	source/queue.c	/^static void	run_one_queue (Queue **list, const char *name)$/;"	f	file:
run_queue	source/queue.c	/^static void	run_queue (Queue **list, const char *name)$/;"	f	file:
runcmds	source/commands.c	/^void	runcmds (const char *what, const char *subargs)$/;"	f
runcmds_with_arglist	source/commands.c	/^void    runcmds_with_arglist (const char *what, char *args, const char *subargs)$/;"	f
s	source/compat.c	/^	unsigned char	s[256];$/;"	m	struct:bsd_arc4_stream	file:
s_nickname	include/server.h	/^	char	*s_nickname;		\/* last NICK command sent *\/$/;"	m	struct:__anon8
safe_new_next_arg	source/ircaux.c	/^char *	safe_new_next_arg (char *str, char **new_ptr)$/;"	f
safe_next_arg	source/ircaux.c	/^char *	safe_next_arg (char *str, char **new_ptr)$/;"	f
safe_puts	source/input.c	/^static int 	safe_puts (const unsigned char *str, int numcols)$/;"	f	file:
sanity_check_encoding	source/recode.c	/^int	sanity_check_encoding (const char *encoding)$/;"	f
save_window_positions	source/window.c	/^static void	save_window_positions (Window *w, intmax_t *scrolling, intmax_t *holding, intmax_t *scrollback)$/;"	f	file:
saved	source/alias.c	/^struct SymbolStru *	saved;		\/* For stacks *\/$/;"	m	struct:SymbolStru	typeref:struct:SymbolStru::SymbolStru	file:
saved_hint	source/alias.c	/^	int	saved_hint;$/;"	m	struct:SymbolStru	file:
saved_input_line	include/screen.h	/^	InputLine *	saved_input_line;$/;"	m	struct:PromptStru
say	source/output.c	/^void	say (const char *format, ...)$/;"	f
sb	source/commands.c	/^	struct stat sb;$/;"	m	struct:load_info	typeref:struct:load_info::stat	file:
scan_channel	source/names.c	/^char	*scan_channel (char *cname)$/;"	f
schedule_timer	source/timer.c	/^static int	schedule_timer (Timer *ntimer)$/;"	f	file:
screen	include/window.h	/^struct	ScreenStru	*screen;	\/* The screen we belong to *\/$/;"	m	struct:WindowStru	typeref:struct:WindowStru::ScreenStru
screen_list	source/screen.c	/^	Screen	*screen_list = NULL;$/;"	v
screennum	include/screen.h	/^	int	screennum;		\/* Refnum for this screen *\/$/;"	m	struct:ScreenStru
script	include/vars.h	/^	char *		script;		\/* script called when var is set *\/$/;"	m	struct:__anon10
scriptdir	Makefile	/^scriptdir = $(epic5dir)\/script$/;"	m
scroll_lines	include/window.h	/^	short	scroll_lines;		\/* How many lines scroll at a time? *\/$/;"	m	struct:WindowStru
scroll_window	source/screen.c	/^static void 	scroll_window (Window *window)$/;"	f	file:
scrolladj	include/window.h	/^	short	scrolladj;		\/* Push back top-of-win on grow? *\/$/;"	m	struct:WindowStru
scrollback_backwards	include/window.h	/^	BUILT_IN_KEYBINDING(scrollback_backwards);$/;"	v
scrollback_distance_from_display_ip	include/window.h	/^	int	scrollback_distance_from_display_ip;$/;"	m	struct:WindowStru
scrollback_end	include/window.h	/^	BUILT_IN_KEYBINDING(scrollback_end);$/;"	v
scrollback_forwards	include/window.h	/^	BUILT_IN_KEYBINDING(scrollback_forwards);$/;"	v
scrollback_indicator	include/window.h	/^	Display *scrollback_indicator;	\/* The === thing *\/$/;"	m	struct:WindowStru
scrollback_start	include/window.h	/^	BUILT_IN_KEYBINDING(scrollback_start);$/;"	v
scrollback_top_of_display	include/window.h	/^	Display *scrollback_top_of_display;$/;"	m	struct:WindowStru
scrolling_distance_from_display_ip	include/window.h	/^	int	scrolling_distance_from_display_ip;$/;"	m	struct:WindowStru
scrolling_top_of_display	include/window.h	/^	Display *scrolling_top_of_display;$/;"	m	struct:WindowStru
sdbm__chkpage	source/sdbm.c	/^static int	sdbm__chkpage (char *pag)$/;"	f	file:
sdbm__delpair	source/sdbm.c	/^static int	sdbm__delpair (char *pag, Datum key)$/;"	f	file:
sdbm__duppair	source/sdbm.c	/^static int	sdbm__duppair (char *pag, Datum key)$/;"	f	file:
sdbm__fitpair	source/sdbm.c	/^static int	sdbm__fitpair (char *pag, int need)$/;"	f	file:
sdbm__getdbit	source/sdbm.c	/^static int	sdbm__getdbit (SDBM *db, long dbit)$/;"	f	file:
sdbm__getnext	source/sdbm.c	/^static Datum	sdbm__getnext (SDBM *db)$/;"	f	file:
sdbm__getnkey	source/sdbm.c	/^static Datum	sdbm__getnkey (char *pag, int num)$/;"	f	file:
sdbm__getpage	source/sdbm.c	/^static int	sdbm__getpage (SDBM *db, long hash)$/;"	f	file:
sdbm__getpair	source/sdbm.c	/^static Datum	sdbm__getpair (char *pag, Datum key)$/;"	f	file:
sdbm__hash	source/sdbm.c	/^static long	sdbm__hash (const char *str, int len)$/;"	f	file:
sdbm__makroom	source/sdbm.c	/^static int	sdbm__makroom (SDBM *db, long hash, int need)$/;"	f	file:
sdbm__prep	source/sdbm.c	/^static SDBM *	sdbm__prep (char *dirname, char *pagname, int flags, int mode)$/;"	f	file:
sdbm__putpair	source/sdbm.c	/^static void	sdbm__putpair (char *pag, Datum key, Datum val)$/;"	f	file:
sdbm__seepair	source/sdbm.c	/^static int	sdbm__seepair (char *pag, int n, const char *key, int siz)$/;"	f	file:
sdbm__setdbit	source/sdbm.c	/^static int	sdbm__setdbit (SDBM *db, long dbit)$/;"	f	file:
sdbm__splpage	source/sdbm.c	/^static void	sdbm__splpage (char *pag, char *new, long sbit)$/;"	f	file:
sdbm_close	source/sdbm.c	/^void	sdbm_close(SDBM *db)$/;"	f
sdbm_delete	source/sdbm.c	/^int	sdbm_delete (SDBM *db, Datum key)$/;"	f
sdbm_error	source/sdbm.c	/^int	sdbm_error (SDBM *db)$/;"	f
sdbm_fetch	source/sdbm.c	/^Datum	sdbm_fetch (SDBM *db, Datum key)$/;"	f
sdbm_firstkey	source/sdbm.c	/^Datum	sdbm_firstkey (SDBM *db)$/;"	f
sdbm_nextkey	source/sdbm.c	/^Datum	sdbm_nextkey (SDBM *db)$/;"	f
sdbm_open	source/sdbm.c	/^SDBM *sdbm_open (const char *file, int flags, int mode)$/;"	f
sdbm_rdonly	source/sdbm.c	51;"	d	file:
sdbm_store	source/sdbm.c	/^int	sdbm_store (SDBM *db, Datum key, Datum val, int flags)$/;"	f
search_for	source/words.c	/^char *	search_for (char *start, char **mark, char *chars, int how)$/;"	f
searchbuf	source/ircaux.c	/^ssize_t	searchbuf (const unsigned char *str, size_t start, size_t end, int find)$/;"	f
sed	source/ctcp.c	/^int     sed = 0;$/;"	v
sed_decoder	source/ircaux.c	/^static ssize_t	sed_decoder (const char *orig, size_t orig_len, const void *meta, size_t meta_len, char *dest, size_t dest_len)$/;"	f	file:
sed_encoder	source/ircaux.c	/^static ssize_t	sed_encoder (const char *orig, size_t orig_len, const void *meta, size_t meta_len, char *dest, size_t dest_len)$/;"	f	file:
sed_type	include/sedcrypt.h	/^	int	sed_type;$/;"	m	struct:CryptStru
sed_type	source/crypt.c	/^	int	sed_type;$/;"	m	struct:ciphertypes	file:
segments	source/alloca.c	/^    long segments;		\/* Current number of stack segments.  *\/$/;"	m	struct:stk_stat	file:
segments	source/newio.c	/^	short	segments,$/;"	m	struct:myio_struct	file:
segv_recurse	source/irc.c	/^volatile int	segv_recurse = 0;$/;"	v
select	acconfig.h	177;"	d
send	acconfig.h	186;"	d
send_ctcp	source/ctcp.c	/^void	send_ctcp (int type, const char *to, int datatag, const char *format, ...)$/;"	f
send_line	include/input.h	/^	BUILT_IN_KEYBINDING(send_line);$/;"	v
send_text	source/commands.c	/^void 	send_text (int server, const char *nick_list, const char *text, const char *command, int hook, int already_encoded)$/;"	f
send_to_aserver	source/server.c	/^void	send_to_aserver (int refnum, const char *format, ...)$/;"	f
send_to_aserver_raw	source/server.c	/^void	send_to_aserver_raw (int refnum, size_t len, const char *buffer)$/;"	f
send_to_aserver_with_payload	source/server.c	/^void	send_to_aserver_with_payload (int refnum, const char *payload, const char *format, ...)$/;"	f
send_to_server	source/server.c	/^void	send_to_server (const char *format, ...)$/;"	f
send_to_server_with_payload	source/server.c	/^void	send_to_server_with_payload (const char *payload, const char *format, ...)$/;"	f
send_umode	source/irc.c	/^		*send_umode = NULL,		\/* sent umode *\/$/;"	v
sendline	script/history.rb	/^  def History.sendline(str)$/;"	F	class:History
sendto	acconfig.h	187;"	d
sent	include/server.h	/^	int	sent;			\/* set if something has been sent,$/;"	m	struct:__anon8
sent_body	include/server.h	/^        char *          sent_body;$/;"	m	struct:__anon8
sent_nick	include/server.h	/^        char *          sent_nick;$/;"	m	struct:__anon8
sequence	source/keys.c	/^	char *	sequence; 	\/* the (compressed) sequence of keys. *\/$/;"	m	struct:BindStack	file:
sernum	source/hook.c	/^	int 	sernum;		\/* \/on #type SERNUM nick (arglist) stuff *\/$/;"	m	struct:hook_stru	file:
serv	include/sedcrypt.h	/^	char *	serv;$/;"	m	struct:CryptStru
server	include/window.h	/^	int	server;			\/* Server that win is connected to *\/$/;"	m	struct:WindowStru
server	source/dcc.c	/^	int		server;$/;"	m	struct:DCC_struct	file:
server	source/exec.c	/^	int	server;			\/* the server to use for output *\/$/;"	m	struct:__anon14	file:
server	source/flood.c	/^	int		server;$/;"	m	struct:flood_stru	file:
server	source/names.c	/^	int		server;		\/* The server the channel is "on" *\/$/;"	m	struct:channel_stru	file:
server	source/newio.c	/^	int	server;			\/* For message routing *\/$/;"	m	struct:myio_struct	file:
server2_8	include/server.h	/^	int	server2_8;		\/* defined if we get an 001 numeric *\/$/;"	m	struct:__anon8
server_addrs_left	source/server.c	/^int	server_addrs_left (int refnum)$/;"	f
server_format	source/status.c	/^static	char	*server_format 		= (char *) 0;$/;"	v	file:
server_is_registered	source/server.c	/^void  server_is_registered (int refnum, const char *itsname, const char *ourname)$/;"	f
server_is_unregistered	source/server.c	/^void	server_is_unregistered (int refnum)$/;"	f
server_list	source/server.c	/^	Server **server_list = (Server **) 0;$/;"	v
server_list_size	source/server.c	/^int 	server_list_size (void)$/;"	f
server_more_addrs	source/server.c	/^int	server_more_addrs (int refnum)$/;"	f
server_part	source/recode.c	/^	char *	server_part;$/;"	m	struct:RecodeRule	file:
server_passive_wait	source/server.c	/^void	server_passive_wait (int i, const char *stuff)$/;"	f
server_states	source/server.c	/^const char *server_states[13] = {$/;"	v
server_stricmp	include/ircaux.h	71;"	d
server_strnicmp	source/ircaux.c	/^int	server_strnicmp (const unsigned char *str1, const unsigned char *str2, size_t n, int servref)$/;"	f
server_type	include/server.h	/^        const char *  server_type;$/;"	m	struct:ServerInfo
servercmd	include/server.h	/^	BUILT_IN_COMMAND(servercmd);$/;"	v
serverctl	source/server.c	/^char 	*serverctl 	(char *input)$/;"	f
serverinfo_fields	source/server.c	/^enum serverinfo_fields { HOST, PORT, PASS, NICK, GROUP, TYPE, PROTO, VHOST, ENCODING, LASTFIELD };$/;"	g	file:
serverinfo_matches_servref	source/server.c	/^int	serverinfo_matches_servref (ServerInfo *si, int servref)$/;"	f
serverinfo_to_newserv	source/server.c	/^static	int	serverinfo_to_newserv (ServerInfo *si)$/;"	f	file:
serverinfo_to_servref	source/server.c	/^static	int	serverinfo_to_servref (ServerInfo *si)$/;"	f	file:
servref	source/commands.c	/^	int	servref;$/;"	m	struct:defer	file:
servref	source/logfiles.c	/^	int	servref;$/;"	m	struct:Logfile	file:
set_blocking	source/network.c	/^int	set_blocking (int fd)$/;"	f
set_cd_device	contrib/cdrom.c	/^void set_cd_device(IrcCommandDll *interp, char *command, char *args, char *subargs)$/;"	f
set_channel_window	source/names.c	/^void 	set_channel_window (const char *channel, int server, int winref, int as_current)$/;"	f
set_clock_format	source/clock.c	/^void     set_clock_format (void *stuff)$/;"	f
set_clock_interval	source/clock.c	/^void    set_clock_interval (void *stuff)$/;"	f
set_cpu_saver_after	source/clock.c	/^void    set_cpu_saver_after (void *stuff)$/;"	f
set_cpu_saver_every	source/clock.c	/^void	set_cpu_saver_every (void *stuff)$/;"	f
set_current_command	source/alias.c	/^void 	set_current_command 	(char *line)$/;"	f
set_current_window_mask	source/lastlog.c	/^void	set_current_window_mask (void *stuff)$/;"	f
set_indent	source/vars.c	/^void    set_indent (void *stuff)$/;"	f
set_input	source/input.c	/^static void	set_input (const char *str)$/;"	f	file:
set_input_prompt	source/input.c	/^void	set_input_prompt (void *stuff)$/;"	f
set_item	source/array.c	/^int set_item (char* name, long item, char* input, int unsorted)$/;"	f
set_key_interval	source/keys.c	/^void	set_key_interval (void *stuff) $/;"	f
set_lastlog_mask	source/lastlog.c	/^void	set_lastlog_mask (void *stuff)$/;"	f
set_lastlog_size	source/lastlog.c	/^void	set_lastlog_size (void *stuff)$/;"	f
set_mail	source/mail.c	/^void	set_mail (void *stuff)$/;"	f
set_mail_interval	source/mail.c	/^void    set_mail_interval (void *stuff)$/;"	f
set_mail_type	source/mail.c	/^void	set_mail_type (void *stuff)$/;"	f
set_mangle_display	source/vars.c	/^static	void	set_mangle_display (void *stuff)$/;"	f	file:
set_mangle_inbound	source/vars.c	/^static	void	set_mangle_inbound (void *stuff)$/;"	f	file:
set_mangle_logfiles	source/vars.c	/^static	void	set_mangle_logfiles (void *stuff)$/;"	f	file:
set_mangle_outbound	source/vars.c	/^static	void	set_mangle_outbound (void *stuff)$/;"	f	file:
set_mask_by_winref	source/window.c	/^int	set_mask_by_winref (unsigned refnum, Mask mask)$/;"	f
set_meta_8bit	source/term.c	/^void	set_meta_8bit (void *stuff)$/;"	f
set_new_server_lastlog_mask	source/lastlog.c	/^void	set_new_server_lastlog_mask (void *stuff)$/;"	f
set_non_blocking	source/network.c	/^int	set_non_blocking (int fd)$/;"	f
set_notify	source/notify.c	/^void    set_notify (void *stuff)$/;"	f
set_notify_interval	source/notify.c	/^void    set_notify_interval (void *stuff)$/;"	f
set_notify_mask	source/lastlog.c	/^void	set_notify_mask (void *stuff)$/;"	f
set_old_server_lastlog_mask	source/lastlog.c	/^void	set_old_server_lastlog_mask (void *stuff)$/;"	f
set_prompt_by_refnum	source/window.c	/^void 	set_prompt_by_refnum (unsigned refnum, const char *prompt)$/;"	f
set_screens_current_window	source/window.c	/^static void 	set_screens_current_window (Screen *screen, Window *window)$/;"	f	file:
set_scroll_lines	source/window.c	/^void 	set_scroll_lines (void *stuff)$/;"	f
set_scrollback_size	source/window.c	/^void    set_scrollback_size (void *stuff)$/;"	f
set_server_005	source/server.c	/^void	set_server_005 (int refnum, char *setting, const char *value)$/;"	f
set_server_away	source/server.c	/^void	set_server_away (int refnum, const char *message)$/;"	f
set_server_group	source/server.c	/^void	set_server_group (int servref, const char * param )$/;"	f
set_server_name	source/server.c	/^void	set_server_name (int servref, const char * param )$/;"	f
set_server_password	source/server.c	/^static void	set_server_password (int refnum, const char *password)$/;"	f	file:
set_server_port	source/server.c	/^static void    set_server_port (int refnum, int port)$/;"	f	file:
set_server_protocol_state	source/server.c	/^void	set_server_protocol_state (int refnum, int state)$/;"	f
set_server_server_type	source/server.c	/^void	set_server_server_type (int servref, const char * param )$/;"	f
set_server_ssl_enabled	source/server.c	/^void	set_server_ssl_enabled (int refnum, int flag)$/;"	f
set_server_userhost	source/server.c	/^static void	set_server_userhost (int refnum, const char *uh)$/;"	f	file:
set_server_vhost	source/server.c	/^void	set_server_vhost (int servref, const char * param )$/;"	f
set_var_value	source/vars.c	/^void 	set_var_value (int svv_index, const char *value, int noisy)$/;"	f
set_variable	source/vars.c	/^int 	set_variable (const char *name, IrcVariable *var, const char *orig_value, int noisy)$/;"	f
set_wserv_type	source/vars.c	/^static void    set_wserv_type (void *stuff)$/;"	f	file:
setcmd	include/vars.h	/^	BUILT_IN_COMMAND(setcmd);$/;"	v
setenv	configure	/^setenv()$/;"	f
setenv	configure	/^setenv();$/;"	f
setenv	source/compat.c	/^int	setenv (const char *name, const char *value, int overwrite)$/;"	f
sethistory	script/history.rb	/^  def History.sethistory(numstr)$/;"	F	class:History.banghandler
setpersistent	script/history.rb	/^  def History.setpersistent(boolstr)$/;"	F	class:History.banghandler
setsid	configure	/^setsid();$/;"	f
setsid	source/compat.c	/^int	setsid	(void)$/;"	f
setup_expr_info	source/expr2.c	/^static void	setup_expr_info (expr_info *c)$/;"	f	file:
setupterm	configure	/^setupterm()$/;"	f
setupterm	configure	/^setupterm();$/;"	f
sha256	source/sha2.c	/^char *	sha256 (const char *data, size_t len, char *retval)$/;"	f
sha256_encoder	source/ircaux.c	/^static ssize_t	sha256_encoder (const char *orig, size_t orig_len, const void *meta, size_t meta_len, char *dest, size_t dest_len)$/;"	f	file:
sha256_initial_hash_value	source/sha2.c	/^static const sha2_word32 sha256_initial_hash_value[8] = {$/;"	v	file:
sha256_key	source/crypto.c	/^static void	sha256_key (const char *orig, size_t orig_len, char **key, size_t *keylen)$/;"	f	file:
sha256str	source/sha2.c	/^char *  sha256str (const char *str, size_t len, char *retval)$/;"	f
sha2_byte	source/sha2.c	/^typedef u_int8_t  sha2_byte;	\/* Exactly 1 byte *\/$/;"	t	file:
sha2_byte	source/sha2.c	/^typedef uint8_t  sha2_byte;	\/* Exactly 1 byte *\/$/;"	t	file:
sha2_hex_digits	source/sha2.c	/^static const char *sha2_hex_digits = "0123456789abcdef";$/;"	v	file:
sha2_word32	source/sha2.c	/^typedef u_int32_t sha2_word32;	\/* Exactly 4 bytes *\/$/;"	t	file:
sha2_word32	source/sha2.c	/^typedef uint32_t sha2_word32;	\/* Exactly 4 bytes *\/$/;"	t	file:
sha2_word64	source/sha2.c	/^typedef u_int64_t sha2_word64;	\/* Exactly 8 bytes *\/$/;"	t	file:
sha2_word64	source/sha2.c	/^typedef uint64_t sha2_word64;	\/* Exactly 8 bytes *\/$/;"	t	file:
sharedir	Makefile	/^sharedir    = ${prefix}\/share$/;"	m
shaseg	source/alloca.c	/^    long shaseg:32;		\/* Size of increments to stack.  *\/$/;"	m	struct:stack_control_header	file:
shgrow	source/alloca.c	/^    long shgrow:32;		\/* Number of times stack has grown.  *\/$/;"	m	struct:stack_control_header	file:
shhwm	source/alloca.c	/^    long shhwm:32;		\/* High water mark of stack.  *\/$/;"	m	struct:stack_control_header	file:
shookcmd	include/hook.h	/^	BUILT_IN_COMMAND(shookcmd);$/;"	v
shortname	source/server.c	/^static char *	shortname (const char *oname)$/;"	f	file:
shove	script/history.rb	/^  def History.shove$/;"	F	class:History
show	script/history.rb	/^  def History.show(index)$/;"	F	class:History
show_all_bindings	source/keys.c	/^static void	show_all_bindings (Key *map, const char *str, size_t len) $/;"	f	file:
show_all_numerics	source/hook.c	/^static int show_all_numerics (int numeric)$/;"	f	file:
show_all_rbindings	source/keys.c	/^static void	show_all_rbindings (Key *map, const char *str, int len, Binding *binding) $/;"	f	file:
show_channel	source/names.c	/^static void 	show_channel (Channel *chan)$/;"	f	file:
show_hook	source/hook.c	/^static void 	show_hook (Hook *list, const char *name)$/;"	f	file:
show_key	source/keys.c	/^static void	show_key (Key *key, const char *str, int slen, int recurse) $/;"	f	file:
show_lastlog	source/lastlog.c	/^static int	show_lastlog (Lastlog **l, int *skip, int *number, Mask *level_mask, char *match, regex_t *rex, char *nomatch, regex_t *norex, int *max, const char *target, int mangler, Window *window, int exempt, char **result, int global, int this_server)$/;"	f	file:
show_list	source/hook.c	/^static int show_list (int which)$/;"	f	file:
show_notify_list	source/notify.c	/^static void	show_notify_list (int all)$/;"	f	file:
show_var_value	source/vars.c	/^static void	show_var_value (const char *name, IrcVariable *var, int newval)$/;"	f	file:
show_version	source/irc.c	/^static	void	show_version (void)$/;"	f	file:
show_window	source/window.c	/^static void 	show_window (Window *window)$/;"	f	file:
shsize	source/alloca.c	/^    long shsize:32;		\/* Current size of stack (all segments).  *\/$/;"	m	struct:stack_control_header	file:
shutdown	acconfig.h	188;"	d
shutdown_ssl	source/ssl.c	/^int	shutdown_ssl (int vfd)$/;"	f
si	source/recode.c	/^	ServerInfo si;$/;"	m	struct:RecodeRule	file:
si_family	source/gailib.c	/^	unsigned char	si_family;$/;"	m	struct:sockinet	file:
si_len	source/gailib.c	/^	unsigned char	si_len;$/;"	m	struct:sockinet	file:
si_port	source/gailib.c	/^	unsigned short	si_port;$/;"	m	struct:sockinet	file:
sig_refresh_screen	include/output.h	/^	SIGNAL_HANDLER(sig_refresh_screen);$/;"	v
sigfunc	include/irc_std.h	/^typedef RETSIGTYPE sigfunc (int);$/;"	t
sigma0_256	source/sha2.c	206;"	d	file:
sigma1_256	source/sha2.c	207;"	d	file:
signal_handler	source/ircsig.c	/^static RETSIGTYPE signal_handler (int sig_no)$/;"	f	file:
signal_handlers	source/ircsig.c	/^sigfunc *signal_handlers[NSIG];$/;"	v
signals_caught	source/ircsig.c	/^volatile int    signals_caught[NSIG];$/;"	v
sigwinch_func	source/wserv.c	/^static void	sigwinch_func (int value)$/;"	f	file:
size	include/array.h	/^        long size;$/;"	m	struct:an_array_struct
size	source/ircaux.c	/^	int size;$/;"	m	struct:__anon21	file:
size	source/ircaux.c	/^	int size;$/;"	m	struct:_mo_money	file:
skip	include/window.h	/^	short	skip;			\/* Whether window should be skipped *\/$/;"	m	struct:WindowStru
skip	source/hook.c	/^	int	skip;		\/* hook will be treated like it doesn't exist *\/$/;"	m	struct:hook_stru	file:
skip_spaces	source/ircaux.c	/^char *	skip_spaces (char *str)$/;"	f
slen	source/keys.c	/^	int 	slen; 		\/* the length of the compressed sequence. *\/$/;"	m	struct:BindStack	file:
slurp_elf_file	source/elf.c	/^size_t	slurp_elf_file (struct epic_loadfile *elf, char **file_contents, off_t *file_contents_size)$/;"	f
slurp_file	source/ircaux.c	/^int	slurp_file (char **buffer, char *filename)$/;"	f
snprintf	configure	/^snprintf();$/;"	f
snprintf	source/compat.c	/^int snprintf (char *str, size_t size, const char *format, ...)$/;"	f
sockaddr_storage	include/irc_std.h	/^struct sockaddr_storage {$/;"	s
socket	configure	/^socket()$/;"	f
socket	source/dcc.c	/^	int		socket;$/;"	m	struct:DCC_struct	file:
sockinet	source/gailib.c	/^struct sockinet {$/;"	s	file:
socklen	source/network.c	/^static socklen_t	socklen (SA *sockaddr)$/;"	f	file:
socklen_t	include/irc_std.h	/^typedef int socklen_t;$/;"	t
sort_indices	source/array.c	/^static void sort_indices (an_array *array)$/;"	f	file:
sort_it	source/functions.c	/^static int sort_it (const void *val1, const void *val2)$/;"	f	file:
source	source/recode.c	/^	int	source;		\/* See ENCODING_* below *\/$/;"	m	struct:RecodeRule	file:
source_explain	source/recode.c	/^static const char *source_explain (int console, int source)$/;"	f	file:
sp	source/expr2.c	/^	int	sp;$/;"	m	struct:__anon15	file:
space	source/irc.c	/^		space[] = " ",			\/* just a lonely space *\/$/;"	v
space	source/parse.c	64;"	d	file:
special	include/status.h	/^        char *		special;$/;"	m	struct:status_stuff
split_CTCP	source/ctcp.c	/^static int split_CTCP (char *raw_message, char *ctcp_dest, char *after_ctcp)$/;"	f	file:
split_args	source/ircaux.c	/^int	split_args (char *str, char **to, size_t maxargs)$/;"	f
split_string	source/ircaux.c	/^int 	split_string (char *str, char ***to, char delimiter)$/;"	f
splitw	source/ircaux.c	/^int 	splitw (char *str, char ***to, int extended)$/;"	f
ss	source/alloca.c	/^    long ss[0200];		\/* 0200 overflow words.  *\/$/;"	m	struct:stack_segment_linkage	file:
ss_family	include/irc_std.h	/^	unsigned char ss_family;$/;"	m	struct:sockaddr_storage
ss_len	include/irc_std.h	/^	unsigned char ss_len;$/;"	m	struct:sockaddr_storage
ssa0	source/alloca.c	/^    long ssa0;$/;"	m	struct:stack_segment_linkage	file:
ssa1	source/alloca.c	/^    long ssa1;$/;"	m	struct:stack_segment_linkage	file:
ssa2	source/alloca.c	/^    long ssa2;$/;"	m	struct:stack_segment_linkage	file:
ssa3	source/alloca.c	/^    long ssa3;$/;"	m	struct:stack_segment_linkage	file:
ssa4	source/alloca.c	/^    long ssa4;$/;"	m	struct:stack_segment_linkage	file:
ssa5	source/alloca.c	/^    long ssa5;$/;"	m	struct:stack_segment_linkage	file:
ssa6	source/alloca.c	/^    long ssa6;$/;"	m	struct:stack_segment_linkage	file:
ssa7	source/alloca.c	/^    long ssa7;$/;"	m	struct:stack_segment_linkage	file:
ssbase	source/alloca.c	/^    long ssbase:32;		\/* Offset to stack base.  *\/$/;"	m	struct:stack_segment_linkage	file:
sscray	source/alloca.c	/^    long sscray[7];		\/* Reserved for Cray Research.  *\/$/;"	m	struct:stack_segment_linkage	file:
sscsnm	source/alloca.c	/^    long sscsnm;		\/* Private control structure number for$/;"	m	struct:stack_segment_linkage	file:
ssgvup	source/alloca.c	/^    long ssgvup;		\/* Pointer to multitasking thread giveup.  *\/$/;"	m	struct:stack_segment_linkage	file:
ssl_connect	source/ssl.c	/^int	ssl_connect (int vfd, int quiet)$/;"	f
ssl_connected	source/ssl.c	/^int	ssl_connected (int vfd)$/;"	f
ssl_enabled	include/server.h	/^	int	ssl_enabled;		\/* Current SSL status. *\/$/;"	m	struct:__anon8
ssl_fd	source/ssl.c	/^	SSL *	ssl_fd;$/;"	m	struct:ssl_info_T	file:
ssl_id_callback	source/ssl.c	/^static unsigned long	ssl_id_callback (void)$/;"	f	file:
ssl_info	source/ssl.c	/^} ssl_info;$/;"	t	typeref:struct:ssl_info_T	file:
ssl_info_T	source/ssl.c	/^typedef struct	ssl_info_T {$/;"	s	file:
ssl_list	source/ssl.c	/^ssl_info *ssl_list = NULL;$/;"	v
ssl_locking_callback	source/ssl.c	/^static void	ssl_locking_callback (int mode, int n, const char *file, int line)$/;"	f	file:
ssl_mutexes	source/ssl.c	/^pthread_mutex_t *ssl_mutexes = NULL;$/;"	v
ssl_read	source/ssl.c	/^int	ssl_read (int vfd, int quiet)$/;"	f
ssl_setup_locking	source/ssl.c	/^static void	ssl_setup_locking (void)$/;"	f	file:
sspseg	source/alloca.c	/^    long sspseg:32;		\/* Offset to linkage control of previous$/;"	m	struct:stack_segment_linkage	file:
sss0	source/alloca.c	/^    long sss0;$/;"	m	struct:stack_segment_linkage	file:
sss1	source/alloca.c	/^    long sss1;$/;"	m	struct:stack_segment_linkage	file:
sss2	source/alloca.c	/^    long sss2;$/;"	m	struct:stack_segment_linkage	file:
sss3	source/alloca.c	/^    long sss3;$/;"	m	struct:stack_segment_linkage	file:
sss4	source/alloca.c	/^    long sss4;$/;"	m	struct:stack_segment_linkage	file:
sss5	source/alloca.c	/^    long sss5;$/;"	m	struct:stack_segment_linkage	file:
sss6	source/alloca.c	/^    long sss6;$/;"	m	struct:stack_segment_linkage	file:
sss7	source/alloca.c	/^    long sss7;$/;"	m	struct:stack_segment_linkage	file:
sssize	source/alloca.c	/^    long sssize:32;		\/* Number of words in this segment.  *\/$/;"	m	struct:stack_segment_linkage	file:
sstcpt	source/alloca.c	/^    long sstcpt:32;		\/* Pointer to task common address block.  *\/$/;"	m	struct:stack_segment_linkage	file:
sstpid	source/alloca.c	/^    long sstpid;		\/* Process ID for pid based multi-tasking.  *\/$/;"	m	struct:stack_segment_linkage	file:
ssusr1	source/alloca.c	/^    long ssusr1;		\/* Reserved for user.  *\/$/;"	m	struct:stack_segment_linkage	file:
ssusr2	source/alloca.c	/^    long ssusr2;		\/* Reserved for user.  *\/$/;"	m	struct:stack_segment_linkage	file:
stack	source/compat.c	/^} stack;$/;"	t	typeref:struct:stack_str	file:
stack	source/expr2.c	/^	TOKEN 	stack[STACKSZ + 1];$/;"	m	struct:__anon15	file:
stack_control_header	source/alloca.c	/^struct stack_control_header$/;"	s	file:
stack_dir	source/alloca.c	/^static int stack_dir;		\/* 1 or -1 once known.  *\/$/;"	v	file:
stack_list_builtin_expando_alias	source/alias.c	/^int	stack_list_builtin_expando_alias (const char *name)$/;"	f
stack_list_builtin_function_alias	source/alias.c	/^int	stack_list_builtin_function_alias (const char *name)$/;"	f
stack_list_builtin_var_alias	source/alias.c	/^int	stack_list_builtin_var_alias (const char *name)$/;"	f
stack_list_cmd_alias	source/alias.c	/^int	stack_list_cmd_alias (const char *name)$/;"	f
stack_list_var_alias	source/alias.c	/^int	stack_list_var_alias (const char *name)$/;"	f
stack_pop_builtin_expando_alias	source/alias.c	/^int	stack_pop_builtin_expando_alias (const char *name)$/;"	f
stack_pop_builtin_function_alias	source/alias.c	/^int	stack_pop_builtin_function_alias (const char *name)$/;"	f
stack_pop_builtin_var_alias	source/alias.c	/^int	stack_pop_builtin_var_alias (const char *name)$/;"	f
stack_pop_cmd_alias	source/alias.c	/^int	stack_pop_cmd_alias (const char *name)$/;"	f
stack_pop_var_alias	source/alias.c	/^int	stack_pop_var_alias (const char *name)$/;"	f
stack_push_builtin_expando_alias	source/alias.c	/^int	stack_push_builtin_expando_alias (const char *name)$/;"	f
stack_push_builtin_func_alias	source/alias.c	/^int	stack_push_builtin_func_alias (const char *name)$/;"	f
stack_push_builtin_var_alias	source/alias.c	/^int	stack_push_builtin_var_alias (const char *name)$/;"	f
stack_push_cmd_alias	source/alias.c	/^int	stack_push_cmd_alias (char *name)$/;"	f
stack_push_var_alias	source/alias.c	/^int	stack_push_var_alias (const char *name)$/;"	f
stack_segment_linkage	source/alloca.c	/^struct stack_segment_linkage$/;"	s	file:
stack_str	source/compat.c	/^typedef struct stack_str {$/;"	s	file:
standard_level_warning	source/levels.c	/^void	standard_level_warning (const char *who, char **rejects)$/;"	f
star	source/irc.c	/^		star[] = "*",$/;"	v
start	source/flood.c	/^	Timeval		start;$/;"	m	struct:flood_stru	file:
start_line	source/commands.c	/^	int	start_line;$/;"	m	struct:load_info	file:
start_time	source/irc.c	/^Timeval		start_time;$/;"	v
start_wait_list	include/server.h	/^        WaitCmd *       start_wait_list;$/;"	m	struct:__anon8
starttime	source/dcc.c	/^	Timeval		starttime;$/;"	m	struct:DCC_struct	file:
startup_file	source/irc.c	/^char		*startup_file = NULL,		\/* Set when epicrc loaded *\/$/;"	v
startup_ssl	source/ssl.c	/^int	startup_ssl (int vfd, int channel)$/;"	f
state	source/sha2.c	/^        u_int32_t       state[8];$/;"	m	struct:_SHA256_CTX	file:
state	source/sha2.c	/^        uint32_t        state[8];$/;"	m	struct:_SHA256_CTX	file:
status	include/server.h	/^	int	status;			\/* See above *\/$/;"	m	struct:__anon8
status	include/window.h	/^	Status	status;			\/* Current status line info *\/$/;"	m	struct:WindowStru
status_activity	source/status.c	/^STATUS_FUNCTION(status_activity);$/;"	v
status_away	source/status.c	/^STATUS_FUNCTION(status_away);$/;"	v
status_channel	source/status.c	/^STATUS_FUNCTION(status_channel);$/;"	v
status_chanop	source/status.c	/^STATUS_FUNCTION(status_chanop);$/;"	v
status_clock	source/status.c	/^STATUS_FUNCTION(status_clock);$/;"	v
status_cpu_saver_mode	source/status.c	/^STATUS_FUNCTION(status_cpu_saver_mode);$/;"	v
status_dcc	source/status.c	/^STATUS_FUNCTION(status_dcc);$/;"	v
status_dcc_all	source/status.c	/^STATUS_FUNCTION(status_dcc_all);$/;"	v
status_expandos	source/status.c	/^struct status_formats status_expandos[] = {$/;"	v	typeref:struct:status_formats
status_formats	source/status.c	/^struct status_formats {$/;"	s	file:
status_hold	source/status.c	/^STATUS_FUNCTION(status_hold);$/;"	v
status_hold_lines	source/status.c	/^STATUS_FUNCTION(status_hold_lines);$/;"	v
status_holdmode	source/status.c	/^STATUS_FUNCTION(status_holdmode);$/;"	v
status_insert_mode	source/status.c	/^STATUS_FUNCTION(status_insert_mode);$/;"	v
status_line	include/status.h	/^typedef struct  status_line {$/;"	s
status_mail	source/status.c	/^STATUS_FUNCTION(status_mail);$/;"	v
status_mode	source/status.c	/^STATUS_FUNCTION(status_mode);$/;"	v
status_network	source/status.c	/^STATUS_FUNCTION(status_network);$/;"	v
status_nickname	source/status.c	/^STATUS_FUNCTION(status_nickname);$/;"	v
status_notify_windows	source/status.c	/^STATUS_FUNCTION(status_notify_windows);$/;"	v
status_null_function	source/status.c	/^STATUS_FUNCTION(status_null_function);$/;"	v
status_oper	source/status.c	/^STATUS_FUNCTION(status_oper);$/;"	v
status_overwrite_mode	source/status.c	/^STATUS_FUNCTION(status_overwrite_mode);$/;"	v
status_percent	source/status.c	/^STATUS_FUNCTION(status_percent);$/;"	v
status_position	source/status.c	/^STATUS_FUNCTION(status_position);$/;"	v
status_query_nick	source/status.c	/^STATUS_FUNCTION(status_query_nick);$/;"	v
status_refnum	source/status.c	/^STATUS_FUNCTION(status_refnum);$/;"	v
status_refnum_real	source/status.c	/^STATUS_FUNCTION(status_refnum_real);$/;"	v
status_right_justify	source/status.c	/^STATUS_FUNCTION(status_right_justify);$/;"	v
status_scroll_info	source/status.c	/^STATUS_FUNCTION(status_scroll_info);$/;"	v
status_scrollback	source/status.c	/^STATUS_FUNCTION(status_scrollback);$/;"	v
status_server	source/status.c	/^STATUS_FUNCTION(status_server);$/;"	v
status_ssl	source/status.c	/^STATUS_FUNCTION(status_ssl);$/;"	v
status_stuff	include/status.h	/^typedef struct  status_stuff {          $/;"	s
status_swappable	source/status.c	/^STATUS_FUNCTION(status_swappable);$/;"	v
status_test	source/status.c	/^STATUS_FUNCTION(status_test);$/;"	v
status_umode	source/status.c	/^STATUS_FUNCTION(status_umode);$/;"	v
status_updates_permitted	source/status.c	/^	int     status_updates_permitted = 0;$/;"	v
status_user	source/status.c	/^STATUS_FUNCTION(status_user);$/;"	v
status_version	source/status.c	/^STATUS_FUNCTION(status_version);$/;"	v
status_voice	source/status.c	/^STATUS_FUNCTION(status_voice);$/;"	v
status_window	source/status.c	/^STATUS_FUNCTION(status_window);$/;"	v
status_windowspec	source/status.c	/^STATUS_FUNCTION(status_windowspec);$/;"	v
stderrc	source/exec.c	/^	char	*stderrc;$/;"	m	struct:__anon14	file:
stderrpc	source/exec.c	/^	char	*stderrpc;$/;"	m	struct:__anon14	file:
stdio_file	source/term.c	/^	FILE		*stdio_file;$/;"	m	struct:tio_file_stru	file:
stdoutc	source/exec.c	/^	char	*stdoutc;$/;"	m	struct:__anon14	file:
stdoutpc	source/exec.c	/^	char	*stdoutpc;$/;"	m	struct:__anon14	file:
stk_stat	source/alloca.c	/^struct stk_stat$/;"	s	file:
stk_trailer	source/alloca.c	/^struct stk_trailer$/;"	s	file:
stkm_free	source/alloca.c	/^    long stkm_free;		\/* Number of deallocations by $STKMRET.  *\/$/;"	m	struct:stk_stat	file:
stko_free	source/alloca.c	/^    long stko_free;		\/* Number of deallocations by $STKRETN.  *\/$/;"	m	struct:stk_stat	file:
stko_mallocs	source/alloca.c	/^    long stko_mallocs;		\/* Block allocations by $STKOFEN.  *\/$/;"	m	struct:stk_stat	file:
str_isnumber	source/gailib.c	/^static int str_isnumber (const char *p)$/;"	f	file:
str_to_level	source/levels.c	/^int	str_to_level (const char *orig)$/;"	f
str_to_mask	source/levels.c	/^int	str_to_mask (Mask *mask, const char *orig, char **rejects)$/;"	f
str_to_newserv	source/server.c	/^int	str_to_newserv (const char *desc)$/;"	f
str_to_serverinfo	source/server.c	/^int	str_to_serverinfo (char *str, ServerInfo *s)$/;"	f
str_to_servref	source/server.c	/^int	str_to_servref (const char *desc)$/;"	f
str_to_servref_with_update	source/server.c	/^int	str_to_servref_with_update (const char *desc)$/;"	f
streq	source/ircaux.c	/^size_t 	streq (const char *str1, const char *str2)$/;"	f
strerror	configure	/^strerror();$/;"	f
strerror	include/irc_std.h	197;"	d
strext	source/ircaux.c	/^char *	strext (const char *start, const char *end)$/;"	f
strext2	source/ircaux.c	/^int	strext2 (unsigned char **cut, unsigned char *buffer, int part2, int part3)$/;"	f
strextend	source/ircaux.c	/^char 	*strextend (char *str, char app, int num)$/;"	f
strfill	source/ircaux.c	/^const char *	strfill (char c, int num)$/;"	f
strformat	source/ircaux.c	/^char *	strformat (char *dest, size_t destlen, const unsigned char *src, ssize_t length, int pad)$/;"	f
strftime_12hour	source/clock.c	/^static	const char	*strftime_12hour = "%I:%M%p";$/;"	v	file:
strftime_24hour	source/clock.c	/^static	const char	*strftime_24hour = "%R";$/;"	v	file:
stricmp_table	include/server.h	/^	int	stricmp_table;		\/* Which case insensitive map to use *\/$/;"	m	struct:__anon8
stricmp_tables	source/ircaux.c	/^unsigned char *stricmp_tables[2] = {$/;"	v
string	include/vars.h	/^        char *  string;                 \/* string value of variable *\/$/;"	m	union:builtin_variable
string	source/compat.c	/^	char	*string;$/;"	m	struct:arg_str	file:
string_feof	source/elf.c	/^int	string_feof(const char *file_contents, off_t file_contents_size)$/;"	f
string_fgetc	source/elf.c	/^int	string_fgetc(const char **file_contents, off_t *file_contents_size)$/;"	f
string_fgets	source/elf.c	/^off_t	string_fgets(char *buffer, size_t buffer_size, const char **file_contents, off_t *file_contents_size)$/;"	f
strip_modes	source/parse.c	/^static void strip_modes (const char *from, const char *channel, const char *line)$/;"	f	file:
stristr	source/ircaux.c	/^ssize_t	stristr (const char *start, const char *srch)$/;"	f
strlcat	configure	/^strlcat();$/;"	f
strlcat	source/compat.c	/^size_t	strlcat (char *dst, const char *src, size_t siz)$/;"	f
strlcat_c	source/ircaux.c	/^size_t	strlcat_c (char *dst, const char *src, size_t size, size_t *cluep)$/;"	f
strlcpy	configure	/^strlcpy();$/;"	f
strlcpy	source/compat.c	/^size_t	strlcpy (char *dst, const char *src, size_t siz)$/;"	f
strlcpy_c	source/ircaux.c	/^size_t	strlcpy_c (char *dst, const char *src, size_t size, size_t *cluep)$/;"	f
strlopencat	source/ircaux.c	/^char *	strlopencat (char *dest, size_t maxlen, ...)$/;"	f
strlopencat_c	source/ircaux.c	/^char *	strlopencat_c (char *dest, size_t maxlen, size_t *cluep, ...)$/;"	f
strlpcat	source/ircaux.c	/^char *	strlpcat (char *source, size_t size, const char *format, ...)$/;"	f
strnrchr	source/ircaux.c	/^char *	strnrchr(char *start, char which, int howmany)$/;"	f
strptime	configure	/^strptime();$/;"	f
strtoimax	include/irc_std.h	313;"	d
strtoimax	include/irc_std.h	321;"	d
strtoimax	include/irc_std.h	329;"	d
strtoll	configure	/^strtoll();$/;"	f
strtoq	configure	/^strtoq();$/;"	f
strtouimax	include/irc_std.h	314;"	d
strtouimax	include/irc_std.h	322;"	d
strtouimax	include/irc_std.h	330;"	d
strtoul	configure	/^strtoul();$/;"	f
strtoul	source/compat.c	/^unsigned long strtoul (const char *nptr, char **endptr, int base)$/;"	f
stubcmd	include/alias.h	/^	BUILT_IN_COMMAND(stubcmd);$/;"	v
stuff	include/ircaux.h	/^	char *stuff;$/;"	m	struct:Iconv_stuff
stuff	include/ircaux.h	/^	void *stuff;$/;"	m	struct:BucketItem
stuff	include/server.h	/^        char    *stuff;$/;"	m	struct:WaitCmdstru
stuff	source/hook.c	/^	char *	stuff;		\/* \/on #type sernum nick (arglist) STUFF *\/$/;"	m	struct:hook_stru	file:
stuff	source/keys.c	/^    char *	stuff;     	\/* passed as 2nd argument to binding *\/$/;"	m	struct:Key	file:
subargs	source/commands.c	/^	char *	subargs;$/;"	m	struct:defer	file:
subargs	source/queue.c	/^	char	 *subargs;$/;"	m	struct:CmdListT	file:
subargs	source/timer.c	/^	char	*subargs;$/;"	m	struct:timerlist_stru	file:
substitute_string	source/ircaux.c	/^char *	substitute_string (const char *string, const char *oldstr, const char *newstr, int case_sensitive, int global)$/;"	f
suppress	source/hook.c	/^	int	suppress;	\/*  0 = don't suppress default action$/;"	m	struct:NoiseInfo	file:
suspicious	source/names.c	/^	short	suspicious;	\/* True if the nick might be truncated *\/$/;"	m	struct:nick_stru	file:
swap_last_window	include/window.h	/^	BUILT_IN_KEYBINDING(swap_last_window);$/;"	v
swap_next_window	include/window.h	/^	BUILT_IN_KEYBINDING(swap_next_window);$/;"	v
swap_previous_window	include/window.h	/^	BUILT_IN_KEYBINDING(swap_previous_window);$/;"	v
swap_window	source/window.c	/^static void 	swap_window (Window *v_window, Window *window)$/;"	f	file:
swappable	include/window.h	/^	short	swappable;		\/* Can it be swapped in or out? *\/$/;"	m	struct:WindowStru
switch_channels	include/names.h	/^	BUILT_IN_KEYBINDING(switch_channels);$/;"	v
switch_help	source/irc.c	/^static		char	switch_help[] =$/;"	v	file:
switch_hostname	source/ircaux.c	/^char *	switch_hostname (const char *new_hostname)$/;"	f
switch_query	include/window.h	/^	BUILT_IN_KEYBINDING(switch_query);$/;"	v
switchcmd	include/ifcmd.h	/^	BUILT_IN_COMMAND(switchcmd);$/;"	v
symbol_types	source/alias.c	/^const char *symbol_types[] = {$/;"	v
symbolctl	source/alias.c	/^char    *symbolctl      (char *input)$/;"	f
syntax	test.c	/^syntax(op, msg)$/;"	f	file:
sysconf	configure	/^sysconf();$/;"	f
sysctlbyname	configure	/^sysctlbyname();$/;"	f
syserr	source/output.c	/^void    syserr (int server, const char *format, ...)$/;"	f
system_exception	source/commands.c	/^	int	system_exception = 0;$/;"	v
system_timer	source/clock.c	/^static int	system_timer (void *entry)$/;"	f	file:
system_timer	source/clock.c	/^struct system_timer {$/;"	s	file:
system_timers	source/clock.c	/^struct system_timer system_timers[] = {$/;"	v	typeref:struct:system_timer
t_lex	test.c	/^t_lex(s)$/;"	f	file:
t_op	test.c	/^struct t_op {$/;"	s	file:
t_wp	test.c	/^char **t_wp;$/;"	v
t_wp_op	test.c	/^struct t_op const *t_wp_op;$/;"	v
tail	source/term.c	/^struct	tio_qentry_stru	*next, *tail;$/;"	m	struct:tio_qentry_stru	typeref:struct:tio_qentry_stru::	file:
takes_meta	source/ircaux.c	/^	int	takes_meta;$/;"	m	struct:Transformer	file:
target	source/lastlog.c	/^	char	*target;$/;"	m	struct:lastlog_stru	file:
target	source/recode.c	/^	char *	target;$/;"	m	struct:RecodeRule	file:
target_copy	source/recode.c	/^	char *	target_copy;$/;"	m	struct:RecodeRule	file:
target_file_write	source/files.c	/^int 	target_file_write (const char *fd, const char *stuff)$/;"	f
target_part	source/recode.c	/^	char *	target_part;$/;"	m	struct:RecodeRule	file:
target_type	source/commands.c	/^struct target_type$/;"	s	file:
targets	source/logfiles.c	/^	WNickList *targets;$/;"	m	struct:Logfile	file:
tcaps	source/term.c	/^cap2info tcaps[] =$/;"	v
tclcmd	include/extlang.h	/^BUILT_IN_COMMAND(tclcmd);$/;"	v
tcleval	source/tcl.c	/^char *	tcleval (char* input) $/;"	f
tclstartstop	source/tcl.c	/^void	tclstartstop (int startnotstop) $/;"	f
tcsetpgrp	configure	/^tcsetpgrp();$/;"	f
term_all_off	include/termx.h	635;"	d
term_altcharset_off	include/termx.h	621;"	d
term_altcharset_on	include/termx.h	620;"	d
term_attribute	source/screen.c	/^static void	term_attribute (Attribute *a)$/;"	f	file:
term_beep	source/term.c	/^void	term_beep (void)$/;"	f
term_blink_off	include/termx.h	617;"	d
term_blink_on	include/termx.h	616;"	d
term_bold_off	include/termx.h	619;"	d
term_bold_on	include/termx.h	618;"	d
term_clear_screen	include/termx.h	628;"	d
term_clear_to_eol	include/termx.h	634;"	d
term_clreol	source/term.c	/^void	term_clreol	(void)$/;"	f
term_clrscr	source/term.c	/^void	term_clrscr (void)$/;"	f
term_cr	include/termx.h	630;"	d
term_cursor_left	include/termx.h	632;"	d
term_cursor_right	include/termx.h	633;"	d
term_echo	source/term.c	/^int	term_echo (int flag)$/;"	f
term_echo_flag	source/term.c	/^static	int	term_echo_flag = 1;$/;"	v	file:
term_flush	include/termx.h	/^__inline__ static void term_flush (void) { $/;"	f
term_getsgr	source/term.c	/^const char *	term_getsgr (int opt, int fore, int back)$/;"	f
term_gotoxy	source/term.c	/^void	term_gotoxy (int col, int row)$/;"	f
term_has	include/termx.h	602;"	d
term_init	source/term.c	/^int 	term_init (void)$/;"	f
term_init	source/wserv.c	/^static int 	term_init (void)$/;"	f	file:
term_inputline_putchar	source/term.c	/^void	term_inputline_putchar (unsigned char c)$/;"	f
term_italics_off	include/termx.h	623;"	d
term_italics_on	include/termx.h	622;"	d
term_move_cursor	include/termx.h	629;"	d
term_newline	include/termx.h	631;"	d
term_pause	include/termx.h	/^	BUILT_IN_KEYBINDING(term_pause);$/;"	v
term_putgchar	include/termx.h	627;"	d
term_reset	source/term.c	/^void	term_reset (void)$/;"	f
term_resize	source/term.c	/^int	term_resize (void)$/;"	f
term_resize	source/wserv.c	/^static void 	term_resize (void)$/;"	f	file:
term_right	source/term.c	/^void	term_right (int num)$/;"	f
term_scroll	source/term.c	/^void	term_scroll (int top, int bot, int n)$/;"	f
term_set_attribs	include/termx.h	626;"	d
term_set_background	include/termx.h	625;"	d
term_set_foreground	include/termx.h	624;"	d
term_standout_off	include/termx.h	615;"	d
term_standout_on	include/termx.h	614;"	d
term_underline_off	include/termx.h	613;"	d
term_underline_on	include/termx.h	612;"	d
termcap	source/compat.c	/^static int termcap;$/;"	v	file:
termcap	source/term.c	/^static	char	termcap[2048];		\/* Bigger than we need, just in case *\/$/;"	v	file:
termcap2	source/term.c	/^static	char	termcap2[2048];		\/* Bigger than we need, just in case *\/$/;"	v	file:
termfeatures	source/term.c	/^int	termfeatures = 0;$/;"	v
termsig	source/exec.c	/^	int	termsig;		\/* The signal that terminated$/;"	m	struct:__anon14	file:
text	include/who.h	/^        char *          text;$/;"	m	struct:UserhostEntryT
text_to_process	source/exec.c	/^int	text_to_process (int x, const char *y, int z) 	$/;"	f
text_to_process	source/exec.c	/^int 		text_to_process (int proc_index, const char *text, int show)$/;"	f
tgetent	configure	/^tgetent()$/;"	f
this_address	source/alloca.c	/^    long this_address;		\/* Address of this block.  *\/$/;"	m	struct:stk_trailer	file:
this_size	source/alloca.c	/^    long this_size;		\/* Size of this block (does not include$/;"	m	struct:stk_trailer	file:
ti	contrib/cdrom.c	/^static struct cdrom_ti ti;$/;"	v	typeref:struct:cdrom_ti	file:
time	source/timer.c	/^        Timeval time;$/;"	m	struct:timerlist_stru	file:
time_add	source/ircaux.c	/^Timeval time_add (const Timeval t1, const Timeval t2)$/;"	f
time_diff	source/ircaux.c	/^double 	time_diff (const Timeval t1, const Timeval t2)$/;"	f
time_format	source/clock.c	/^	char		*time_format = (char *) 0;	\/* XXX Bogus XXX *\/$/;"	v
time_since_startup	source/ircaux.c	/^double	time_since_startup (Timeval t)$/;"	f
time_subtract	source/ircaux.c	/^Timeval time_subtract (const Timeval t1, const Timeval t2)$/;"	f
time_to_next_interval	source/ircaux.c	/^double	time_to_next_interval (int interval)$/;"	f
time_to_next_minute	source/ircaux.c	/^double	time_to_next_minute (void)$/;"	f
timeout_keypress	source/keys.c	/^static void *	timeout_keypress (void *lastp, Timeval pressed) $/;"	f	file:
timer_exists	source/timer.c	/^int 	timer_exists (const char *ref)$/;"	f
timercmd	include/timer.h	/^	BUILT_IN_COMMAND(timercmd);$/;"	v
timerctl	source/timer.c	/^char *	timerctl (char *input)$/;"	f
timerlist_stru	source/timer.c	/^typedef struct  timerlist_stru$/;"	s	file:
timers_merge_winrefs	source/timer.c	/^void    timers_merge_winrefs (unsigned oldref, unsigned newref)$/;"	f
timers_swap_winrefs	source/timer.c	/^void    timers_swap_winrefs (unsigned oldref, unsigned newref)$/;"	f
timeval_to_metric	source/ircaux.c	/^struct metric_time	timeval_to_metric (const Timeval *tv)$/;"	f
tio_close	source/term.c	/^void	tio_close (tio_file *stream)$/;"	f
tio_cond	source/term.c	/^static	pthread_cond_t	tio_cond = PTHREAD_COND_INITIALIZER;$/;"	v	file:
tio_file	include/screen.h	/^	tio_file *tio_file;$/;"	m	struct:ScreenStru
tio_file	include/tio.h	/^typedef struct tio_file_stru tio_file;$/;"	t	typeref:struct:tio_file_stru
tio_file_stru	source/term.c	/^struct tio_file_stru {$/;"	s	file:
tio_flush	source/term.c	/^void	tio_flush(tio_file *stream)$/;"	f
tio_fputc	source/term.c	/^void	tio_fputc(int c, tio_file *f)$/;"	f
tio_fputs	source/term.c	/^void	tio_fputs(const char *str, tio_file *stream)$/;"	f
tio_init	source/term.c	/^void	tio_init(void)$/;"	f
tio_mtx	source/term.c	/^static	pthread_mutex_t	tio_mtx = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
tio_open	source/term.c	/^tio_file	*tio_open(FILE *f)$/;"	f
tio_push	source/term.c	/^static void	tio_push(tio_file *stream)$/;"	f	file:
tio_putc	include/tio.h	23;"	d
tio_puts	include/tio.h	24;"	d
tio_qentry	source/term.c	/^} tio_qentry;$/;"	t	typeref:struct:tio_qentry_stru	file:
tio_qentry_stru	source/term.c	/^typedef struct tio_qentry_stru {$/;"	s	file:
tio_qhead	source/term.c	/^static	tio_qentry	tio_qhead;$/;"	v	file:
tio_stdout	source/term.c	/^tio_file	*tio_stdout;$/;"	v
tio_thread	source/term.c	/^static	pthread_t	tio_thread;$/;"	v	file:
tio_thread_run	source/term.c	/^static void	*tio_thread_run(void *unused)$/;"	f	file:
tname	source/term.c	/^	const char *	tname;$/;"	m	struct:cap2info	file:
to_window	source/screen.c	/^	Window	*to_window;$/;"	v
to_window	source/window.c	/^	unsigned	to_window;$/;"	m	struct:output_context	file:
toggle_insert_mode	include/input.h	/^	BUILT_IN_KEYBINDING(toggle_insert_mode);$/;"	v
toggle_stop_screen	include/window.h	/^	BUILT_IN_KEYBINDING(toggle_stop_screen);$/;"	v
toggle_variable	source/clock.c	/^	int *	toggle_variable;$/;"	m	struct:system_timer	file:
token	source/expr2.c	/^	TOKEN	token;$/;"	m	struct:__anon15	file:
token	test.c	/^enum token {$/;"	g	file:
token_decode	source/ircaux.c	/^static unsigned int     token_decode (const char *base, const char *token)$/;"	f	file:
token_types	test.c	/^enum token_types {$/;"	g	file:
tokenize_bool	source/expr2.c	/^__inline static	TOKEN		tokenize_bool (expr_info *c, BooL t)$/;"	f	file:
tokenize_expanded	source/expr2.c	/^__inline static	TOKEN		tokenize_expanded (expr_info *c, char *t)$/;"	f	file:
tokenize_float	source/expr2.c	/^__inline static	TOKEN		tokenize_float (expr_info *c, double t)$/;"	f	file:
tokenize_integer	source/expr2.c	/^__inline static	TOKEN		tokenize_integer (expr_info *c, intmax_t t)$/;"	f	file:
tokenize_lval	source/expr2.c	/^__inline static	TOKEN		tokenize_lval (expr_info *c, const char *t)$/;"	f	file:
tokenize_raw	source/expr2.c	/^__inline static	TOKEN		tokenize_raw (expr_info *c, const char *t)$/;"	f	file:
tokens	source/expr2.c	/^	SYMBOL	tokens[TOKENCOUNT + 1];$/;"	m	struct:__anon15	file:
top	include/window.h	/^	short	top;			\/* SCREEN line for top of window *\/$/;"	m	struct:WindowStru
top	source/expr2.c	/^__inline static TOKEN	top (expr_info *c)$/;"	f	file:
top_of_scrollback	include/window.h	/^	Display *top_of_scrollback;	\/* Start of the scrollback buffer *\/$/;"	m	struct:WindowStru
topline	include/window.h	/^	char *	topline[10];$/;"	m	struct:WindowStru
toplines_showing	include/window.h	/^	short	toplines_showing;$/;"	m	struct:WindowStru
toplines_wanted	include/window.h	/^	short	toplines_wanted;$/;"	m	struct:WindowStru
total_explicit	source/reg.c	/^static	int	total_explicit;$/;"	v	file:
total_max	include/alist.h	/^	int total_max;$/;"	m	struct:__anon3
tparm	configure	/^tparm();$/;"	f
tparm	include/compat.h	11;"	d
tparm1	source/term.c	/^static char *tparm1 (const char *str, int l1)$/;"	f	file:
tparm2	source/term.c	/^static char *tparm2 (const char *str, int l1, int l2)$/;"	f	file:
tparm4	source/term.c	/^static char *tparm4 (const char *str, int l1, int l2, int l3, int l4)$/;"	f	file:
tparm_args	source/compat.c	/^static va_list tparm_args;$/;"	v	file:
tptr	source/term.c	/^static	char *	tptr = termcap2;$/;"	v	file:
tputs_x	include/termx.h	607;"	d
transform_string	source/ircaux.c	/^size_t	transform_string (int type, int encoding, const char *meta, const char *orig_str, size_t orig_str_len, char *dest_str, size_t dest_str_len)$/;"	f
transform_string_dyn	source/ircaux.c	/^char *	transform_string_dyn (const char *type, const char *orig_str, size_t orig_str_len, size_t *my_dest_str_len)$/;"	f
transformers	source/ircaux.c	/^struct Transformer transformers[256];		\/* XXX *\/$/;"	v	typeref:struct:Transformer
translate_user_input	source/screen.c	/^void	translate_user_input (unsigned char byte)$/;"	f
trash	source/perl.c	/^STRLEN	trash;$/;"	v
traverse_all_channels	source/names.c	/^static int	traverse_all_channels (Channel **ptr, int server, int only_this_server)$/;"	f	file:
traverse_all_windows	source/window.c	/^int 	traverse_all_windows (Window **ptr)$/;"	f
traverse_all_windows_by_priority	source/window.c	/^int 	traverse_all_windows_by_priority (Window **ptr)$/;"	f
trim_lastlog	source/lastlog.c	/^void 	trim_lastlog (Window *window)$/;"	f
trim_scrollback	source/window.c	/^int	trim_scrollback (Window *window)$/;"	f
truncate_lastlog	source/lastlog.c	/^void 	truncate_lastlog (Window *window)$/;"	f
tty_des	source/term.c	/^static	int		tty_des;		\/* descriptor for the tty *\/$/;"	v	file:
tty_des	source/wserv.c	/^static	int	tty_des;$/;"	v	file:
tty_name	include/screen.h	/^	char	*tty_name;$/;"	m	struct:ScreenStru
type	include/screen.h	/^	int		type;$/;"	m	struct:PromptStru
type	include/vars.h	/^        int             type;           \/* variable types, see below *\/$/;"	m	struct:__anon10
type	source/compat.c	/^	int	type;$/;"	m	struct:stack_str	file:
type	source/compat.c	/^	int type;$/;"	m	struct:arg_str	file:
type	source/files.c	/^	int	type;		\/* Always 0 for now, future expansion *\/$/;"	m	struct:DBM___	file:
type	source/hook.c	/^	int 	type;		\/* \/on #TYPE sernum nick (arglist) stuff *\/$/;"	m	struct:hook_stru	file:
type	source/ignore.c	/^	Mask	type;			\/* Suppressive ignores *\/$/;"	m	struct:IgnoreStru	file:
type	source/logfiles.c	/^	int	type;$/;"	m	struct:Logfile	file:
type	source/term.c	/^	int 		type;$/;"	m	struct:cap2info	file:
type_text	include/input.h	/^	BUILT_IN_KEYBINDING(type_text);$/;"	v
types	include/alias.h	/^	enum	ARG_TYPES types[32];$/;"	m	struct:ArgListT	typeref:enum:ArgListT::ARG_TYPES
u_32int_t	include/irc_std.h	/^  typedef		unsigned int		u_32int_t;$/;"	t
u_32int_t	include/irc_std.h	/^  typedef		unsigned long		u_32int_t;$/;"	t
ucs_to_console	source/recode.c	/^int     ucs_to_console (u_32int_t codepoint, unsigned char *deststr, size_t deststrsiz)$/;"	f
ucs_to_utf8	source/ircaux.c	/^int	ucs_to_utf8 (u_32int_t key, unsigned char *utf8str, size_t utf8strsiz)$/;"	f
uh_addr	include/server.h	/^	SS	uh_addr;		\/* ip address the server sees *\/$/;"	m	struct:__anon8
uintmax_t	include/irc_std.h	312;"	d
uintmax_t	include/irc_std.h	320;"	d
uintmax_t	include/irc_std.h	328;"	d
umode	include/server.h	/^	char	umode[54];		\/* Currently set user modes *\/$/;"	m	struct:__anon8
umode_format	source/status.c	/^static	char	*umode_format 		= (char *) 0;$/;"	v	file:
uname	configure	/^uname();$/;"	f
unary	source/expr2.c	/^static __inline TOKEN 	unary (expr_info *c, const char *x, int y, TOKEN z)$/;"	f	file:
unblock_signal	source/ircsig.c	/^int	unblock_signal (int sig_no)$/;"	f
unclear_all_windows	source/window.c	/^void	unclear_all_windows (int visible, int hidden, int unhold)$/;"	f
unclear_window	source/window.c	/^static void	unclear_window (Window *window)$/;"	f	file:
unclear_window_by_refnum	source/window.c	/^void	unclear_window_by_refnum (unsigned refnum, int unhold)$/;"	f
unclone_biv	source/vars.c	/^void	unclone_biv (const char *name, IrcVariable *clone)$/;"	f
under	source/hook.c	/^	struct Current_hook *under;$/;"	m	struct:Current_hook	typeref:struct:Current_hook::Current_hook	file:
underflows	source/alloca.c	/^    long underflows;		\/* Number of stack underflow calls ($STKRETN).  *\/$/;"	m	struct:stk_stat	file:
underline	source/screen.c	/^	unsigned char	underline;$/;"	m	struct:attributes	file:
undernet_extended	include/who.h	/^	int  undernet_extended;$/;"	m	struct:WhoEntryT
undernet_extended_args	include/who.h	/^	char *undernet_extended_args;$/;"	m	struct:WhoEntryT
unflash	source/output.c	/^static void	unflash (void)$/;"	f	file:
unhold_a_window	source/window.c	/^int	unhold_a_window (Window *w)$/;"	f
unique_id	include/server.h	/^	char	*unique_id;		\/* Unique ID (for ircnet) *\/$/;"	m	struct:__anon8
unique_refnum	include/window.h	/^	ssize_t			unique_refnum;$/;"	m	struct:DisplayStru
universal_next_arg_count	source/ircaux.c	/^char *	universal_next_arg_count (char *str, char **new_ptr, int count, int extended, int dequote, const char *delims)$/;"	f
unix_accept	source/newio.c	/^static int	unix_accept (int channel, int quiet)$/;"	f	file:
unix_close	source/newio.c	/^static int	unix_close (int channel, int quiet)$/;"	f	file:
unix_connect	source/newio.c	/^static int	unix_connect (int channel, int quiet)$/;"	f	file:
unix_read	source/newio.c	/^static int	unix_read (int channel, int quiet)$/;"	f	file:
unix_recv	source/newio.c	/^static int	unix_recv (int channel, int quiet)$/;"	f	file:
unknown10	source/alloca.c	/^    long unknown10;$/;"	m	struct:stk_trailer	file:
unknown11	source/alloca.c	/^    long unknown11;$/;"	m	struct:stk_trailer	file:
unknown12	source/alloca.c	/^    long unknown12;$/;"	m	struct:stk_trailer	file:
unknown13	source/alloca.c	/^    long unknown13;$/;"	m	struct:stk_trailer	file:
unknown14	source/alloca.c	/^    long unknown14;$/;"	m	struct:stk_trailer	file:
unknown2	source/alloca.c	/^    long unknown2;$/;"	m	struct:stk_trailer	file:
unknown3	source/alloca.c	/^    long unknown3;$/;"	m	struct:stk_trailer	file:
unknown5	source/alloca.c	/^    long unknown5;$/;"	m	struct:stk_trailer	file:
unknown6	source/alloca.c	/^    long unknown6;$/;"	m	struct:stk_trailer	file:
unknown7	source/alloca.c	/^    long unknown7;$/;"	m	struct:stk_trailer	file:
unknown8	source/alloca.c	/^    long unknown8;$/;"	m	struct:stk_trailer	file:
unknown9	source/alloca.c	/^    long unknown9;$/;"	m	struct:stk_trailer	file:
unknown_userhost	source/irc.c	/^const char	*unknown_userhost = "<UNKNOWN>@<UNKNOWN>";$/;"	v
unlink_ssl_info	source/ssl.c	/^static ssl_info *	unlink_ssl_info (int vfd)$/;"	f	file:
unlink_timer	source/timer.c	/^static int	unlink_timer (Timer *timer)$/;"	f	file:
unload_bindings	source/keys.c	/^void	unload_bindings (const char *pkg) $/;"	f
unload_bindings_recurse	source/keys.c	/^static void	unload_bindings_recurse (const char *pkg, Key *map) $/;"	f	file:
unload_builtin_commands	source/alias.c	/^static void	unload_builtin_commands (const char *filename)$/;"	f	file:
unload_builtin_expandos	source/alias.c	/^static	void	unload_builtin_expandos (const char *filename)$/;"	f	file:
unload_builtin_functions	source/alias.c	/^static	void	unload_builtin_functions (const char *filename)$/;"	f	file:
unload_builtin_variables	source/alias.c	/^static	void	unload_builtin_variables (const char *filename)$/;"	f	file:
unload_cmd_alias	source/alias.c	/^static void	unload_cmd_alias (const char *package)$/;"	f	file:
unload_on_hooks	source/hook.c	/^void	unload_on_hooks (char *filename)$/;"	f
unload_var_alias	source/alias.c	/^static void	unload_var_alias (const char *package)$/;"	f	file:
unloadcmd	include/alias.h	/^	BUILT_IN_COMMAND(unloadcmd);$/;"	v
unlock_dcc	source/dcc.c	/^static int	unlock_dcc (DCC_list *dcc)$/;"	f	file:
unlock_stack_frame	source/alias.c	/^void	unlock_stack_frame	(void)$/;"	f
unmarshall_getaddrinfo	source/network.c	/^void	unmarshall_getaddrinfo (AI *results)$/;"	f
unregister_transform	source/ircaux.c	/^static int	unregister_transform (int i)$/;"	f	file:
unset_current_command	source/alias.c	/^void 	unset_current_command 	(void)$/;"	f
unsetenv	configure	/^unsetenv();$/;"	f
unsetenv	source/compat.c	/^int	unsetenv (const char *name)$/;"	f
unsort_it	source/functions.c	/^static int unsort_it (const void *v1, const void *v2)$/;"	f	file:
unsorted	include/array.h	/^	int  unsorted;$/;"	m	struct:an_array_struct
unsplitw	source/ircaux.c	/^char *	unsplitw (char ***container, int howmany, int extended)$/;"	f
unstop_all_windows	include/window.h	/^	BUILT_IN_KEYBINDING(unstop_all_windows);$/;"	v
unstub_command	source/alias.c	/^static Symbol *unstub_command (Symbol *item)$/;"	f	file:
unstub_in_progress	source/alias.c	/^static	int	unstub_in_progress = 0;$/;"	v	file:
unstub_variable	source/alias.c	/^static Symbol *unstub_variable (Symbol *item)$/;"	f	file:
update	include/window.h	/^	short	update;			\/* True if window display is dirty *\/$/;"	m	struct:WindowStru
update_all_status	source/window.c	/^void 	update_all_status (void)$/;"	f
update_all_status_wrapper	source/vars.c	/^static void	update_all_status_wrapper (void *stuff)$/;"	f	file:
update_all_windows	source/window.c	/^void 	update_all_windows (void)$/;"	f
update_channel_mode	source/names.c	/^void 	update_channel_mode (const char *channel, const char *mode)$/;"	f
update_input	source/input.c	/^void	update_input (void *which_screen, int update)$/;"	f
update_mail_level1_maildir	source/mail.c	/^static void	update_mail_level1_maildir (void)$/;"	f	file:
update_mail_level1_mbox	source/mail.c	/^static void	update_mail_level1_mbox (void)$/;"	f	file:
update_mail_level2_maildir	source/mail.c	/^static void	update_mail_level2_maildir (void)$/;"	f	file:
update_mail_level2_mbox	source/mail.c	/^static void	update_mail_level2_mbox (void)$/;"	f	file:
update_mail_level3_maildir	source/mail.c	/^static void	update_mail_level3_maildir (void)$/;"	f	file:
update_mail_level3_mbox	source/mail.c	/^static void	update_mail_level3_mbox (void)$/;"	f	file:
update_mode_str	source/ircaux.c	/^void	update_mode_str (char *modes, size_t len, const char *changes)$/;"	f
update_recoding_encoding	source/recode.c	/^static int	update_recoding_encoding (RecodeRule *r, const char *encoding)$/;"	f	file:
update_refnum_serverinfo	source/server.c	/^static	void	update_refnum_serverinfo (int refnum, ServerInfo *new_si)$/;"	f	file:
update_scrollback_indicator	source/window.c	/^static void	update_scrollback_indicator (Window *w)$/;"	f	file:
update_server_from_raw_desc	source/server.c	/^static	int	update_server_from_raw_desc (int refnum, char *str)$/;"	f	file:
update_serverinfo	source/server.c	/^static	void	update_serverinfo (ServerInfo *old_si, ServerInfo *new_si)$/;"	f	file:
update_system_timer	source/clock.c	/^int	update_system_timer (const char *entry)$/;"	f
update_transfer_buffer	source/dcc.c	/^static void 	update_transfer_buffer (DCC_list *dcc, const char *format, ...)$/;"	f	file:
update_user_mode	source/server.c	/^void	update_user_mode (int refnum, const char *modes)$/;"	f
updates_status	source/dcc.c	/^	int		updates_status;$/;"	m	struct:DCC_struct	file:
upper	source/ircaux.c	/^char *	upper (char *str)$/;"	f
url_decoder	source/ircaux.c	/^static ssize_t	url_decoder (const char *orig, size_t orig_len, const void *meta, size_t meta_len, char *dest, size_t dest_len)$/;"	f	file:
url_encoder	source/ircaux.c	/^static ssize_t	url_encoder (const char *orig, size_t orig_len, const void *meta, size_t meta_len, char *dest, size_t dest_len)$/;"	f	file:
use_input	source/irc.c	/^int		use_input = 1;$/;"	v
use_server_cookie	source/server.c	/^void	use_server_cookie (int refnum)$/;"	f
used	source/expr2.c	/^	int	used;			\/* Which fields contain useful info? *\/$/;"	m	struct:TOKEN_type	file:
useful_info	source/irc.c	/^const char useful_info[] = "epic5 1 1 10";$/;"	v
user	include/who.h	/^	const char *	user;$/;"	m	struct:UserhostItemT
user	source/dcc.c	/^	char *		user;$/;"	m	struct:DCC_struct	file:
user_command	source/alias.c	/^	char *	user_command;$/;"	m	struct:SymbolStru	file:
user_command_package	source/alias.c	/^	char *	user_command_package;$/;"	m	struct:SymbolStru	file:
user_command_stub	source/alias.c	/^	int	user_command_stub;$/;"	m	struct:SymbolStru	file:
user_supplied_info	source/hook.c	/^	char *user_supplied_info;$/;"	m	struct:Current_hook	file:
user_variable	source/alias.c	/^	char *	user_variable;$/;"	m	struct:SymbolStru	file:
user_variable_package	source/alias.c	/^	char *	user_variable_package;$/;"	m	struct:SymbolStru	file:
user_variable_stub	source/alias.c	/^	int	user_variable_stub;$/;"	m	struct:SymbolStru	file:
userhost	include/server.h	/^	char	*userhost;		\/* my userhost on this server *\/$/;"	m	struct:__anon8
userhost	source/dcc.c	/^	char *		userhost;$/;"	m	struct:DCC_struct	file:
userhost	source/names.c	/^	char	*userhost;	\/* Their userhost, if we know it *\/$/;"	m	struct:nick_stru	file:
userhost_asked	include/who.h	/^        char *          userhost_asked;$/;"	m	struct:UserhostEntryT
userhost_cmd_returned	source/who.c	/^void	userhost_cmd_returned (int refnum, UserhostItem *stuff, const char *nick, const char *text)$/;"	f
userhost_entry_pop	source/who.c	/^static void userhost_entry_pop (UserhostEntry **entry)$/;"	f	file:
userhost_max	include/server.h	/^	int	userhost_max;		\/* Max pending userhosts *\/$/;"	m	struct:__anon8
userhost_queue	include/server.h	/^	UserhostEntry *	userhost_queue;	\/* Userhost queue *\/$/;"	m	struct:__anon8
userhost_queue_add	source/who.c	/^static void userhost_queue_add (int refnum, UserhostEntry *item)$/;"	f	file:
userhost_queue_pop	source/who.c	/^static void userhost_queue_pop (int refnum)$/;"	f	file:
userhost_queue_send	source/who.c	/^static void userhost_queue_send (int refnum)$/;"	f	file:
userhost_queue_top	source/who.c	/^static UserhostEntry *userhost_queue_top (int refnum)$/;"	f	file:
userhost_returned	source/who.c	/^void	userhost_returned (int refnum, const char *from, const char *comm, const char **ArgList)$/;"	f
userhost_wait	include/server.h	/^	UserhostEntry *	userhost_wait;	\/* Userhost wait queue *\/$/;"	m	struct:__anon8
userhost_wait_pop	source/who.c	/^static void userhost_wait_pop (int refnum)$/;"	f	file:
userhost_wait_top	source/who.c	/^static UserhostEntry *userhost_wait_top (int refnum)$/;"	f	file:
userhostbase	source/who.c	/^void userhostbase (int refnum, char *args, const char *subargs, void (*line) (int, UserhostItem *, const char *, const char *), int do_userhost)$/;"	f
userhostcmd	include/who.h	/^	BUILT_IN_COMMAND(userhostcmd);$/;"	v
userial	source/hook.c	/^	int	userial;	\/* Unique serial for this hook *\/$/;"	m	struct:hook_stru	file:
userial	source/hook.c	/^	int userial;$/;"	m	struct:Current_hook	file:
useripcmd	include/who.h	/^	BUILT_IN_COMMAND(useripcmd);$/;"	v
username	source/crypt.c	/^	const char *username;$/;"	m	struct:ciphertypes	file:
users	source/flood.c	/^int	users = 0;$/;"	v
usripcmd	include/who.h	/^	BUILT_IN_COMMAND(usripcmd);$/;"	v
utf8_locale	source/recode.c	/^static	locale_t	utf8_locale = 0;$/;"	v	file:
utf8_strnicmp	source/ircaux.c	/^int	utf8_strnicmp (const unsigned char *str1, const unsigned char *str2, size_t n)$/;"	f
uzfopen	source/ircaux.c	/^struct epic_loadfile *	uzfopen (char **filename, const char *path, int do_error, struct stat *sb)$/;"	f
val	source/keys.c	/^    char   	val;  		\/* the key value *\/$/;"	m	struct:Key	file:
valid_process_index	source/exec.c	/^static int 	valid_process_index (int process)$/;"	f	file:
valid_transforms	source/ircaux.c	/^char *	valid_transforms (void)$/;"	f
value	include/server.h	/^	char	*value;$/;"	m	struct:__anon7
value	source/compat.c	/^	int	value;$/;"	m	struct:stack_str	file:
value	source/hook.c	/^	int	value;$/;"	m	struct:NoiseInfo	file:
var_bucket	source/vars.c	/^	Bucket *var_bucket = NULL;$/;"	v
var_settings	source/vars.c	/^const char	*var_settings[] =$/;"	v
vars	include/alias.h	/^	char *	vars[32];$/;"	m	struct:ArgListT
vars	source/compat.c	/^static stack vars['z'-'a'+1];$/;"	v	file:
version	include/server.h	/^	int	version;		\/* the version of the server -$/;"	m	struct:__anon8
version_string	include/server.h	/^	char	*version_string;	\/* what is says *\/$/;"	m	struct:__anon8
vfd	source/ssl.c	/^	int	vfd;$/;"	m	struct:ssl_info_T	file:
vhost	include/server.h	/^	const char *  vhost;$/;"	m	struct:ServerInfo
visible	source/lastlog.c	/^	int	visible;$/;"	m	struct:lastlog_stru	file:
visible_windows	include/screen.h	/^	int	visible_windows;	\/* Number of windows on me *\/$/;"	m	struct:ScreenStru
vmy_strnicmp	source/ircaux.c	/^int	vmy_strnicmp (size_t len, char *str, ...)$/;"	f
voice	source/names.c	/^	char		voice;		\/* true if i'm a channel voice *\/$/;"	m	struct:channel_stru	file:
voice	source/names.c	/^	short	voice;		\/* 1 if they are, 0 if theyre not, -1 if uk *\/$/;"	m	struct:nick_stru	file:
void_flag	include/alias.h	/^	int	void_flag;$/;"	m	struct:ArgListT
vsay	source/output.c	/^static void 	vsay (const char *format, va_list args)$/;"	f	file:
vsend_to_aserver_with_payload	source/server.c	/^static void 	vsend_to_aserver_with_payload (int refnum, const char *payload, const char *format, va_list args)$/;"	f	file:
vsnprintf	configure	/^vsnprintf();$/;"	f
vsnprintf	source/compat.c	/^int vsnprintf (char *str, size_t size, const char *format, va_list ap)$/;"	f
vsyserr	source/output.c	/^static void     vsyserr (int server, const char *format, va_list args)$/;"	f	file:
wait_for_dcc	source/dcc.c	/^int	wait_for_dcc (const char *descriptor)$/;"	f
wait_nick	source/server.c	/^static	char    wait_nick[] = "***W***";$/;"	v	file:
waitcmds	source/exec.c	/^	List	*waitcmds;		\/* commands queued by WAIT -CMD *\/$/;"	m	struct:__anon14	file:
waiting	source/names.c	/^	int		waiting;	\/* Syncing, waiting for names\/who *\/$/;"	m	struct:channel_stru	file:
waiting_chans	include/window.h	/^	WNickList *waiting_chans;	\/*$/;"	m	struct:WindowStru
waiting_in	include/server.h	/^        int             waiting_in;$/;"	m	struct:__anon8
waiting_out	include/server.h	/^        int             waiting_out;$/;"	m	struct:__anon8
walk_channels	source/names.c	/^const char *	walk_channels (int init, const char *nick)$/;"	f
want_port	source/dcc.c	/^	unsigned short	want_port;		\/* HOST ORDER *\/$/;"	m	struct:DCC_struct	file:
what	source/queue.c	/^        char     *what;$/;"	m	struct:CmdListT	file:
what_channel	source/names.c	/^const char *	what_channel (const char *nick, int servref)$/;"	f
when	include/window.h	/^	time_t			when;$/;"	m	struct:DisplayStru
which	source/hook.c	/^	int     which;$/;"	m	struct:onstacklist	file:
which_server_altname	source/server.c	/^int	which_server_altname (int refnum, const char *name)$/;"	f
whilecmd	include/ifcmd.h	/^	BUILT_IN_COMMAND(whilecmd);$/;"	v
who	source/exec.c	/^	char	*who;			\/* nickname used for redirection *\/$/;"	m	struct:__anon14	file:
who_end	include/who.h	/^	char *who_end;$/;"	m	struct:WhoEntryT
who_end	source/who.c	/^void	who_end (int refnum, const char *from, const char *comm, const char **ArgList)$/;"	f
who_file	source/window.c	/^	const char *	who_file;$/;"	m	struct:output_context	file:
who_from	source/window.c	/^	const char *	who_from;$/;"	m	struct:output_context	file:
who_from	source/window.c	/^const	char	*who_from = (char *) 0;	$/;"	v
who_global_refnum	source/who.c	/^static	int	who_global_refnum = 0;$/;"	v	file:
who_host	include/who.h	/^        char *who_host;$/;"	m	struct:WhoEntryT
who_item_desc	source/who.c	/^static char *who_item_desc (WhoEntry *item)$/;"	f	file:
who_item_full_desc	source/who.c	/^static char *who_item_full_desc (WhoEntry *item)$/;"	f	file:
who_level	source/window.c	/^	int		who_level;$/;"	m	struct:output_context	file:
who_level	source/window.c	/^	int	who_level;$/;"	v
who_line	source/window.c	/^	int		who_line;$/;"	m	struct:output_context	file:
who_log	source/who.c	/^static	FILE *	who_log = NULL;$/;"	v	file:
who_mask	include/who.h	/^        int  who_mask;$/;"	m	struct:WhoEntryT
who_max	include/server.h	/^	int	who_max;		\/* Max pending whos *\/$/;"	m	struct:__anon8
who_name	include/who.h	/^        char *who_name;$/;"	m	struct:WhoEntryT
who_nick	include/who.h	/^        char *who_nick;$/;"	m	struct:WhoEntryT
who_previous_query	source/who.c	/^static WhoEntry *who_previous_query (int refnum, WhoEntry *me)$/;"	f	file:
who_queue	include/server.h	/^	WhoEntry *	who_queue;	\/* Who queue *\/$/;"	m	struct:__anon8
who_queue_add	source/who.c	/^static void who_queue_add (int refnum, WhoEntry *item)$/;"	f	file:
who_queue_debug	source/who.c	/^static int	who_queue_debug (void *unused)$/;"	f	file:
who_queue_flush	source/who.c	/^static void who_queue_flush (int refnum)$/;"	f	file:
who_queue_list	source/who.c	/^static void who_queue_list (int refnum)$/;"	f	file:
who_queue_pop	source/who.c	/^static void who_queue_pop (int refnum)$/;"	f	file:
who_queue_top	source/who.c	/^static WhoEntry *who_queue_top (int refnum)$/;"	f	file:
who_real	include/who.h	/^        char *who_real;$/;"	m	struct:WhoEntryT
who_server	include/who.h	/^        char *who_server;$/;"	m	struct:WhoEntryT
who_stuff	include/who.h	/^	char *who_stuff;$/;"	m	struct:WhoEntryT
who_target	include/who.h	/^	char *who_target;$/;"	m	struct:WhoEntryT
who_timeref	source/who.c	/^static	char	who_timeref[] = "WHOTIM";$/;"	v	file:
whobase	source/who.c	/^void 	whobase (int refnum, char *args, void (*line) (int, const char *, const char *, const char **), void (*end) (int, const char *, const char *, const char **))$/;"	f
whocmd	include/who.h	/^	BUILT_IN_COMMAND(whocmd);$/;"	v
whoreply	source/who.c	/^void	whoreply (int refnum, const char *from, const char *comm, const char **ArgList)$/;"	f
wild_match	source/reg.c	/^int wild_match (const char *p, const char *str)$/;"	f
will_catch_break_exceptions	source/commands.c	/^	int	will_catch_break_exceptions = 0;$/;"	v
will_catch_continue_exceptions	source/commands.c	/^	int	will_catch_continue_exceptions = 0;$/;"	v
will_catch_return_exceptions	source/commands.c	/^	int	will_catch_return_exceptions = 0;$/;"	v
wind_index	source/alias.c	/^	int 	wind_index = -1;$/;"	v
window	source/lastlog.c	/^	Window *window;$/;"	m	struct:lastlog_stru	file:
window_add	source/window.c	/^static Window *window_add (Window *window, char **args)$/;"	f	file:
window_all_channels	source/names.c	/^char *	window_all_channels (int window, int server)$/;"	f
window_back	source/window.c	/^static Window *window_back (Window *window, char **args)$/;"	f	file:
window_balance	source/window.c	/^static Window *window_balance (Window *window, char **args)$/;"	f	file:
window_beep_always	source/window.c	/^static Window *window_beep_always (Window *window, char **args)$/;"	f	file:
window_body_needs_redraw	source/window.c	/^void	window_body_needs_redraw (Window *w)$/;"	f
window_change_server	source/window.c	/^void	window_change_server (Window * win, int server) $/;"	f
window_channel	source/window.c	/^static Window *window_channel (Window *window, char **args)$/;"	f	file:
window_check	source/window.c	/^static Window *window_check (Window *window, char **args)$/;"	f	file:
window_check_channels	source/window.c	/^void 	window_check_channels (void)$/;"	f
window_check_columns	source/window.c	/^static	void	window_check_columns (Window *w)$/;"	f	file:
window_check_servers	source/window.c	/^void 	window_check_servers (void)$/;"	f
window_claims_nickname	source/window.c	/^static int	window_claims_nickname (unsigned winref, int server, const char *nick)$/;"	f	file:
window_clear	source/window.c	/^static Window *window_clear (Window *window, char **args)$/;"	f	file:
window_create	source/window.c	/^static Window *window_create (Window *window, char **args)$/;"	f	file:
window_current_channel	source/names.c	/^const char *  window_current_channel (int window, int server)$/;"	f
window_current_channel_internal	source/names.c	/^static Channel *window_current_channel_internal (int window, int server)$/;"	f	file:
window_delete	source/window.c	/^static Window *window_delete (Window *window, char **args)$/;"	f	file:
window_describe	source/window.c	/^static Window *window_describe (Window *window, char **args)$/;"	f	file:
window_discon	source/window.c	/^static Window *window_discon (Window *window, char **args)$/;"	f	file:
window_display	source/window.c	/^	unsigned window_display = 1;$/;"	v
window_double	source/window.c	/^static Window *window_double (Window *window, char **args)$/;"	f	file:
window_echo	source/window.c	/^static	Window *window_echo (Window *window, char **args)$/;"	f	file:
window_fixed	source/window.c	/^static	Window *window_fixed (Window *window, char **args)$/;"	f	file:
window_flush	source/window.c	/^static	Window *window_flush (Window *window, char **args)$/;"	f	file:
window_flush_scrollback	source/window.c	/^static	Window *window_flush_scrollback (Window *window, char **args)$/;"	f	file:
window_func	source/window.c	/^typedef Window *(*window_func) (Window *, char **args);$/;"	t	file:
window_goto	source/window.c	/^static Window *window_goto (Window *window, char **args)$/;"	f	file:
window_grow	source/window.c	/^static Window *window_grow (Window *window, char **args)$/;"	f	file:
window_hide	source/window.c	/^static Window *window_hide (Window *window, char **args)$/;"	f	file:
window_hide_others	source/window.c	/^static Window *window_hide_others (Window *window, char **args)$/;"	f	file:
window_hold_interval	source/window.c	/^static Window *window_hold_interval (Window *window, char **args)$/;"	f	file:
window_hold_mode	source/window.c	/^static Window *window_hold_mode (Window *window, char **args)$/;"	f	file:
window_hold_slider	source/window.c	/^static Window *window_hold_slider (Window *window, char **args)$/;"	f	file:
window_indent	source/window.c	/^static	Window *window_indent (Window *window, char **args)$/;"	f	file:
window_indicator_is_visible	source/window.c	/^static void	window_indicator_is_visible (Window *w)$/;"	f	file:
window_is_holding	source/window.c	/^int	window_is_holding (Window *w)$/;"	f
window_is_scrolled_back	source/window.c	/^int	window_is_scrolled_back (Window *w)$/;"	f
window_kill	source/window.c	/^static Window *window_kill (Window *window, char **args)$/;"	f	file:
window_kill_all_hidden	source/window.c	/^static Window *window_kill_all_hidden (Window *window, char **args)$/;"	f	file:
window_kill_others	source/window.c	/^static Window *window_kill_others (Window *window, char **args)$/;"	f	file:
window_killable	source/window.c	/^static Window *window_killable (Window *window, char **args)$/;"	f	file:
window_killswap	source/window.c	/^static Window *window_killswap (Window *window, char **args)$/;"	f	file:
window_last	source/window.c	/^static Window *window_last (Window *window, char **args)$/;"	f	file:
window_lastlog	source/window.c	/^static Window *window_lastlog (Window *window, char **args)$/;"	f	file:
window_lastlog_mask	source/window.c	/^static Window *window_lastlog_mask (Window *window, char **args)$/;"	f	file:
window_level	source/window.c	/^static Window *window_level (Window *window, char **args)$/;"	f	file:
window_list	include/screen.h	/^	Window	*window_list;		\/* The top window on me *\/$/;"	m	struct:ScreenStru
window_list	source/window.c	/^static Window *window_list (Window *window, char **args)$/;"	f	file:
window_list_end	include/screen.h	/^	Window	*window_list_end;	\/* The bottom window on me *\/$/;"	m	struct:ScreenStru
window_log	source/window.c	/^static Window *window_log (Window *window, char **args)$/;"	f	file:
window_logfile	source/window.c	/^static Window *window_logfile (Window *window, char **args)$/;"	f	file:
window_mask	include/window.h	/^	Mask	window_mask;		\/* Window level for the window *\/$/;"	m	struct:WindowStru
window_merge	source/window.c	/^static	Window *window_merge (Window *window, char **args)$/;"	f	file:
window_move	source/window.c	/^static Window *window_move (Window *window, char **args)$/;"	f	file:
window_move_to	source/window.c	/^static Window *window_move_to (Window *window, char **args)$/;"	f	file:
window_name	source/window.c	/^static Window *window_name (Window *window, char **args)$/;"	f	file:
window_new	source/window.c	/^static Window *window_new (Window *window, char **args)$/;"	f	file:
window_new_hide	source/window.c	/^static Window *window_new_hide (Window *window, char **args)$/;"	f	file:
window_next	source/window.c	/^static Window *window_next (Window *window, char **args)$/;"	f	file:
window_notify	source/window.c	/^static Window *window_notify (Window *window, char **args)$/;"	f	file:
window_notify_list	source/window.c	/^static Window *window_notify_list (Window *window, char **args)$/;"	f	file:
window_notify_mask	source/window.c	/^static Window *window_notify_mask (Window *window, char **args)$/;"	f	file:
window_notify_name	source/window.c	/^static Window *window_notify_name (Window *window, char **args)$/;"	f	file:
window_number	source/window.c	/^static Window *window_number (Window *window, char **args)$/;"	f	file:
window_ops	source/window.c	/^} window_ops;$/;"	t	typeref:struct:window_ops_T	file:
window_ops_T	source/window.c	/^typedef struct window_ops_T {$/;"	s	file:
window_pop	source/window.c	/^static Window *window_pop (Window *window, char **args)$/;"	f	file:
window_previous	source/window.c	/^static Window *window_previous (Window *window, char **args)$/;"	f	file:
window_prompt	source/window.c	/^static Window *window_prompt (Window *window, char **args)$/;"	f	file:
window_push	source/window.c	/^static Window *window_push (Window *window, char **args)$/;"	f	file:
window_query	source/window.c	/^Window *window_query (Window *window, char **args)$/;"	f
window_rebuild_scrollback	source/window.c	/^static Window *window_rebuild_scrollback (Window *window, char **args)$/;"	f	file:
window_refnum	source/window.c	/^static Window *window_refnum (Window *window, char **args)$/;"	f	file:
window_refnum_or_swap	source/window.c	/^static Window *window_refnum_or_swap (Window *window, char **args)$/;"	f	file:
window_refresh	source/window.c	/^static Window *window_refresh (Window *window, char **args)$/;"	f	file:
window_rejoin	source/window.c	/^Window *window_rejoin (Window *window, char **args)$/;"	f
window_remove	source/window.c	/^static Window *window_remove (Window *window, char **args)$/;"	f	file:
window_scratch	source/window.c	/^static	Window *window_scratch (Window *window, char **args)$/;"	f	file:
window_scroll	source/window.c	/^Window *window_scroll (Window *window, char **args)$/;"	f
window_scroll_backward	source/window.c	/^static	Window *window_scroll_backward (Window *window, char **args)$/;"	f	file:
window_scroll_end	source/window.c	/^static	Window *window_scroll_end (Window *window, char **args)$/;"	f	file:
window_scroll_forward	source/window.c	/^static	Window *window_scroll_forward (Window *window, char **args)$/;"	f	file:
window_scroll_lines	source/window.c	/^static Window *window_scroll_lines (Window *window, char **args)$/;"	f	file:
window_scroll_lines_tester	source/window.c	/^static	int	window_scroll_lines_tester (Window *window, Display *line, void *meta)$/;"	f	file:
window_scroll_regex_tester	source/window.c	/^static	int	window_scroll_regex_tester (Window *window, Display *line, void *meta)$/;"	f	file:
window_scroll_seconds	source/window.c	/^static Window *window_scroll_seconds (Window *window, char **args)$/;"	f	file:
window_scroll_start	source/window.c	/^static	Window *window_scroll_start (Window *window, char **args)$/;"	f	file:
window_scroll_time_tester	source/window.c	/^static	int	window_scroll_time_tester (Window *window, Display *line, void *meta)$/;"	f	file:
window_scrolladj	source/window.c	/^static Window *window_scrolladj (Window *window, char **args)$/;"	f	file:
window_scrollback	source/window.c	/^static	Window *window_scrollback (Window *window, char **args)$/;"	f	file:
window_scrollback_backward	source/window.c	/^static void	window_scrollback_backward (Window *window)$/;"	f	file:
window_scrollback_backwards	source/window.c	/^static void	window_scrollback_backwards (Window *window, int skip_lines, int abort_if_not_found, int (*test)(Window *, Display *, void *), void *meta)$/;"	f	file:
window_scrollback_backwards_lines	source/window.c	/^static void 	window_scrollback_backwards_lines (Window *window, int my_lines)$/;"	f	file:
window_scrollback_end	source/window.c	/^static void	window_scrollback_end (Window *window)$/;"	f	file:
window_scrollback_forward	source/window.c	/^static void	window_scrollback_forward (Window *window)$/;"	f	file:
window_scrollback_forwards	source/window.c	/^static void	window_scrollback_forwards (Window *window, int skip_lines, int abort_if_not_found, int (*test)(Window *, Display *, void *), void *meta)$/;"	f	file:
window_scrollback_forwards_lines	source/window.c	/^static void 	window_scrollback_forwards_lines (Window *window, int my_lines)$/;"	f	file:
window_scrollback_needs_rebuild	source/window.c	/^void	window_scrollback_needs_rebuild (Window *w)$/;"	f
window_scrollback_start	source/window.c	/^static void	window_scrollback_start (Window *window)$/;"	f	file:
window_scrollback_to_string	source/window.c	/^static void 	window_scrollback_to_string (Window *window, regex_t *preg)$/;"	f	file:
window_scrollforward_to_string	source/window.c	/^static void 	window_scrollforward_to_string (Window *window, regex_t *preg)$/;"	f	file:
window_search_back	source/window.c	/^static Window *window_search_back (Window *window, char **args)$/;"	f	file:
window_search_forward	source/window.c	/^static Window *window_search_forward (Window *window, char **args)$/;"	f	file:
window_server	source/window.c	/^Window *window_server (Window *window, char **args)$/;"	f
window_show	source/window.c	/^static Window *window_show (Window *window, char **args)$/;"	f	file:
window_show_all	source/window.c	/^static Window *window_show_all (Window *window, char **args)$/;"	f	file:
window_shrink	source/window.c	/^static Window *window_shrink (Window *window, char **args)$/;"	f	file:
window_size	source/window.c	/^static Window *window_size (Window *window, char **args)$/;"	f	file:
window_skip	source/window.c	/^static Window *window_skip (Window *window, char **args)$/;"	f	file:
window_stack	include/screen.h	/^	WindowStack	*window_stack;	\/* Number of windows on my stack *\/$/;"	m	struct:ScreenStru
window_stack	source/window.c	/^static Window *window_stack (Window *window, char **args)$/;"	f	file:
window_stack_stru	include/window.h	/^typedef	struct	window_stack_stru$/;"	s
window_status_format	source/window.c	/^static Window *window_status_format (Window *window, char **args)$/;"	f	file:
window_status_format1	source/window.c	/^static Window *window_status_format1 (Window *window, char **args)$/;"	f	file:
window_status_format2	source/window.c	/^static Window *window_status_format2 (Window *window, char **args)$/;"	f	file:
window_status_special	source/window.c	/^static Window *window_status_special (Window *window, char **args)$/;"	f	file:
window_statusbar_needs_redraw	source/window.c	/^void	window_statusbar_needs_redraw (Window *w)$/;"	f
window_statusbar_needs_update	source/window.c	/^void	window_statusbar_needs_update (Window *w)$/;"	f
window_swap	source/window.c	/^static Window *window_swap (Window *window, char **args)$/;"	f	file:
window_swappable	source/window.c	/^static Window *window_swappable (Window *window, char **args)$/;"	f	file:
window_topline	source/window.c	/^static Window *window_topline (Window *window, char **args)$/;"	f	file:
window_toplines	source/window.c	/^static Window *window_toplines (Window *window, char **args)$/;"	f	file:
windowcmd	include/window.h	/^	BUILT_IN_COMMAND(windowcmd);$/;"	v
windowctl	source/window.c	/^char 	*windowctl 	(char *input)$/;"	f
winref	source/names.c	/^	int		winref;		\/* The window the channel is "on" *\/$/;"	m	struct:channel_stru	file:
words	include/alias.h	/^	int	words[32];$/;"	m	struct:ArgListT
wrapper_pattern	source/functions.c	/^char *wrapper_pattern(char *word, int mode)$/;"	f
wrapper_rpattern	source/functions.c	/^char *wrapper_rpattern (char *word, int mode)$/;"	f
writables	source/newio.c	/^fd_set	readables, writables;$/;"	v
write	acconfig.h	189;"	d
write_pos	source/newio.c	/^		write_pos;$/;"	m	struct:myio_struct	file:
write_ssl	source/ssl.c	/^int	write_ssl (int vfd, const void *data, size_t len)$/;"	f
write_to_dbm	source/files.c	/^static int	write_to_dbm (int refnum, char *key, char *data, int replace)$/;"	f	file:
wserv_exe	Makefile	/^wserv_exe   = $(libexecdir)\/$(epic5)-wserv4$/;"	m
wserv_version	include/screen.h	/^	int	wserv_version;		\/* The version of wserv talking to *\/$/;"	m	struct:ScreenStru
x_debug	source/debug.c	/^unsigned long x_debug = 0;$/;"	v
xdebugcmd	include/debug.h	/^	BUILT_IN_COMMAND(xdebugcmd);$/;"	v
xs_init	source/perl.c	/^EXTERN_C void	xs_init(void)$/;"	f
xwhoreply	source/who.c	/^void	xwhoreply (int refnum, const char *from, const char *comm, const char **ArgList)$/;"	f
yell	source/output.c	/^void	yell (const char *format, ...)$/;"	f
yell	source/wserv.c	/^void	yell (const char *format, ...)$/;"	f
zero	source/irc.c	/^		zero[] = "0",$/;"	v
zzlex	source/expr2.c	/^static int	zzlex (expr_info *c)$/;"	f	file:
